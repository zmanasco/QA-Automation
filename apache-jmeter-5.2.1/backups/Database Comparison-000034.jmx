<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Database Comparison" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">C:\Users\AABrar\Desktop\JMeter\apache-jmeter-5.2.1\lib\mssql-jdbc-7.4.1.jre8-shaded.jar</stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Just for Testing Purpose" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="false">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">test_pool1</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://cofindwdb01t.corp.pediatrix.net;authenticationScheme=JavaKerberos;integratedSecurity=true</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Vinayaka420$</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">AABrar</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">test_pool1</stringProp>
          <stringProp name="query">select * from INFORMATION_SCHEMA.COLUMNS</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">test_1</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">package org.olap4j.layout;
package org.olap4j.*;
//package org.olap4j;
//import org.olap4j.driver.xmla.proxy;
import org.olap4j.impl.Olap4jUtil;
import org.olap4j.*;
import org.olap4jxmla.*;
//import org.olap4j..xmla.driver.xmla.XmlaOlap4jDriver;
import java.*;
import java.sql.Connection;
import java.sql.DriverManager;
import org.olap4j.impl.CoordinateIterator;
import org.olap4j.OlapConnection;


Class.forName(&quot;org.olap4j.xmla.driver.xmla.XmlaOlap4jDriver&quot;);
OlapConnection con = (OlapConnection)DriverManager.getConnection
(&quot;jdbc:xmla:Server=https://cofindwdb01t.corp.pediatrix.net,Catalog=Acct_Datamart&quot;);

OlapWrapper wrapper = (OlapWrapper) con;

OlapConnection olapConnection = connection.unwrap(OlapConnection.class);
OlapStatement statement = olapConnection.createStatement();
CellSet cellSet =
    statement.executeOlapQuery(
        &quot;SELECT {[Measures].[Unit Sales]} ON 0,\n&quot;
        + &quot;{[Product].Children} ON 1\n&quot;
        + &quot;FROM [Sales]&quot;);

 RectangularCellSetFormatter formatter =
            new RectangularCellSetFormatter(false);


        // Print out.
        PrintWriter writer = new PrintWriter(System.out);
        formatter.format(cellSet, writer);
        writer.flush();


        statement.close();
        connection.close();

</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="false">
          <stringProp name="FileSaver.filename"></stringProp>
          <boolProp name="FileSaver.errorsonly">false</boolProp>
          <boolProp name="FileSaver.successonly">false</boolProp>
          <boolProp name="FileSaver.skipsuffix">false</boolProp>
          <boolProp name="FileSaver.skipautonumber">false</boolProp>
        </ResultSaver>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">package org.olap4j.layout;
package org.olap4j.*;
//package org.olap4j;
//import org.olap4j.driver.xmla.proxy;
import org.olap4j.impl.Olap4jUtil;
import org.olap4j.*;
import org.olap4jxmla.*;
//import org.olap4j..xmla.driver.xmla.XmlaOlap4jDriver;
import java.*;
import java.sql.Connection;
import java.sql.DriverManager;
import org.olap4j.impl.CoordinateIterator;
import org.olap4j.OlapConnection;

Class.forName(&quot;org.olap4j.driver.xmla.XmlaOlap4jDriver&quot;);
Connection connection =
    DriverManager.getConnection(
        &quot;jdbc:xmla:Server=http://example.com:8080/mondrian/xmla&quot;);
OlapConnection olapConnection = connection.unwrap(OlapConnection.class);
OlapStatement statement = olapConnection.createStatement();
CellSet cellSet =
    statement.executeOlapQuery(
        &quot;SELECT {[Measures].[Unit Sales]} ON 0,\n&quot;
        + &quot;{[Product].Children} ON 1\n&quot;
        + &quot;FROM [Sales]&quot;);
for (Position row : cellSet.getAxes().get(1)) {
    for (Position column : cellSet.getAxes().get(0)) {
        for (Member member : row.getMembers()) {
            System.out.println(member.getUniqueName());
        }
        for (Member member : column.getMembers()) {
            System.out.println(member.getUniqueName());
        }
        final Cell cell = cellSet.getCell(column, row);
        System.out.println(cell.getFormattedValue());
        System.out.println();
    }
}</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="JSR223 Listener" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script"></stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Listener>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="false">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">package org.olap4j.layout;
//package org.olap4j.*;
//package org.olap4j;
//import org.olap4j.driver.xmla.proxy;
import org.olap4j.impl.Olap4jUtil;
import org.olap4j.*;
import org.olap4jxmla.*;
//import org.olap4j..xmla.driver.xmla.XmlaOlap4jDriver;
import java.*;
import java.sql.Connection;
import java.sql.DriverManager;
import org.olap4j.impl.CoordinateIterator;
import org.olap4j.OlapConnection;

public static void main(String[] args) throws ClassNotFoundException, OlapException{
    Class.forName(&quot;org.olap4j.driver.xmla.XmlaOlap4jDriver&quot;);
    Connection connection = null;;
    try {
        connection = DriverManager.getConnection(
&quot;jdbc:xmla:Server=https://cofindwdb01t.corp.pediatrix.net/OLAP/msmdpump.dll&quot;+
                &quot;;Catalog=AA Financials&quot;, + &quot;;Integrated Security=Basic &quot; +
&quot;;User ID=AABrar&quot; +
&quot;;Password=Vinayaka420$&quot;);

    } catch (SQLException e) {
        e.printStackTrace();
    }
    if (null== connection){
        System.out.println(&quot;Connection null&quot;);
    }else
        System.out.println(&quot;Connect Successfully !&quot;);

    OlapWrapper wrapper = (OlapWrapper) connection;
    OlapConnection olapConnection = null;
    try {
    olapConnection = wrapper.unwrap(OlapConnection.class);
    } catch (SQLException e) {
    e.printStackTrace();
    }
    OlapStatement statement = null;
    CellSet cellSet = null;
    try {
    statement = (OlapStatement) olapConnection.createStatement();
    cellSet =   statement.executeOlapQuery(
&quot;select top 1000 [Accounting Period].[AcctPer Year - Quarter - Month - Calculations] from [AA Transactions]&quot;
    );

    } catch (SQLException e) {
    e.printStackTrace();
    }

    for (Position row : cellSet.getAxes().get(1)) {
        for (Position column : cellSet.getAxes().get(0)) {
                for (Member member : row.getMembers()) {
                        System.out.println(member.getName());
                }
                final Cell cell = cellSet.getCell(column, row);
                System.out.println(cell.getFormattedValue());
                System.out.println();

        }

    }
}</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
          <stringProp name="BeanShellSampler.query">package org.olap4j.layout;
//package org.olap4j.*;
//package org.olap4j;
//import org.olap4j.driver.xmla.proxy;
import org.olap4j.impl.Olap4jUtil;
import org.olap4j.*;
import org.olap4jxmla.*;
//import org.olap4j..xmla.driver.xmla.XmlaOlap4jDriver;
import java.*;
import java.sql.Connection;
import java.sql.DriverManager;
import org.olap4j.impl.CoordinateIterator;
import org.olap4j.OlapConnection;

public static void main(String[] args) throws ClassNotFoundException, OlapException{
    Class.forName(&quot;org.olap4j.driver.xmla.XmlaOlap4jDriver&quot;);
    Connection connection = null;;
    try {
        connection = DriverManager.getConnection(
&quot;jdbc:xmla:Server=https://cofindwdb01t.corp.pediatrix.net/OLAP/msmdpump.dll&quot;+
                &quot;;Catalog=AA Financials&quot;, + &quot;;Integrated Security=Basic &quot; +
&quot;;User ID=AABrar&quot; +
&quot;;Password=Vinayaka420$&quot;);

    } catch (SQLException e) {
        e.printStackTrace();
    }
    if (null== connection){
        System.out.println(&quot;Connection null&quot;);
    }else
        System.out.println(&quot;Connect Successfully !&quot;);

    OlapWrapper wrapper = (OlapWrapper) connection;
    OlapConnection olapConnection = null;
    try {
    olapConnection = wrapper.unwrap(OlapConnection.class);
    } catch (SQLException e) {
    e.printStackTrace();
    }
    OlapStatement statement = null;
    CellSet cellSet = null;
    try {
    statement = (OlapStatement) olapConnection.createStatement();
    cellSet =   statement.executeOlapQuery(

          &quot;SELECT NON EMPTY { [Measures].[Instalment Future Amount] } ON COLUMNS&quot;+
          &quot;, NON EMPTY { ([Dim MerchantInstalmentCashFlowDate].[J Year].[J Year].ALLMEMBERS * [Dim MerchantInstalmentCashFlowDate].[Persian Month].[Persian Month].ALLMEMBERS) }  ON ROWS &quot;+ 
          &quot;FROM [Credit Card DW] where ([Dim Merchant].[Mrc Unique Id].[Mrc Unique Id].&amp;[100000000000013])&quot;     

    );

    } catch (SQLException e) {
    e.printStackTrace();
    }

    for (Position row : cellSet.getAxes().get(1)) {
        for (Position column : cellSet.getAxes().get(0)) {
                for (Member member : row.getMembers()) {
                        System.out.println(member.getName());
                }
                final Cell cell = cellSet.getCell(column, row);
                System.out.println(cell.getFormattedValue());
                System.out.println();

        }

    }
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellListener guiclass="TestBeanGUI" testclass="BeanShellListener" testname="BeanShell Listener" enabled="false">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">package org.olap4j.layout;
//package org.olap4j.xmla.driver.xmla.XmlaOlap4jDriver;
package org.olap4j;
//import org.olap4j.driver.xmla.proxy;
import org.olap4j.impl.Olap4jUtil;
import org.olap4j.*;
import org.olap4jxmla.*;
//import org.olap4j..xmla.driver.xmla.XmlaOlap4jDriver;
import java.*;
import java.sql.Connection;
import java.sql.DriverManager;
import org.olap4j.impl.CoordinateIterator;
import org.olap4j.OlapConnection;


Class.forName(&quot;org.olap4j.xmla.driver.xmla.XmlaOlap4jDriver&quot;);
OlapConnection con = (OlapConnection)DriverManager.getConnection
(&quot;jdbc:xmla:Server=https://cofindwdb01t.corp.pediatrix.net,Catalog=Acct_Datamart&quot;);

OlapWrapper wrapper = (OlapWrapper) con;

OlapConnection olapConnection = connection.unwrap(OlapConnection.class);
OlapStatement statement = olapConnection.createStatement();
CellSet cellSet =
    statement.executeOlapQuery(
        &quot;SELECT {[Measures].[Unit Sales]} ON 0,\n&quot;
        + &quot;{[Product].Children} ON 1\n&quot;
        + &quot;FROM [Sales]&quot;);

 RectangularCellSetFormatter formatter =
            new RectangularCellSetFormatter(false);


        // Print out.
        PrintWriter writer = new PrintWriter(System.out);
        formatter.format(cellSet, writer);
        writer.flush();


        statement.close();
        connection.close();

</stringProp>
        </BeanShellListener>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">cofindwdb01t.corp.pediatrix.net</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/OLAP/msmdpump.dll</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler" enabled="false">
          <stringProp name="TCPSampler.server">cofindwdb01t.corp.pediatrix.net</stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port">8080</stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request"></stringProp>
          <boolProp name="TCPSampler.closeConnection">false</boolProp>
          <stringProp name="ConfigTestElement.username">AABrar</stringProp>
          <stringProp name="ConfigTestElement.password">Vinayaka420$</stringProp>
        </TCPSampler>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
          <stringProp name="scriptLanguage">beanshell</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename">C:/Users/AABrar/Desktop/test.jar</stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script"></stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="JSR223 Listener" enabled="false">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">package org.olap4j.layout;
//package org.olap4j.*;
//package org.olap4j;
//import org.olap4j.driver.xmla.proxy;
import org.olap4j.impl.Olap4jUtil;
import org.olap4j.*;
import org.olap4jxmla.*;
//import org.olap4j..xmla.driver.xmla.XmlaOlap4jDriver;
import java.*;
import java.sql.Connection;
import java.sql.DriverManager;
import org.olap4j.impl.CoordinateIterator;
import org.olap4j.OlapConnection;

public class OLAPConnection extends AbstractJavaSamplerClient implements Serializable {

public static void main(String[] args) throws ClassNotFoundException, OlapException{
    Class.forName(&quot;org.olap4j.driver.xmla.XmlaOlap4jDriver&quot;);
    Connection connection = null;;
    try {
        connection = DriverManager.getConnection(
&quot;jdbc:xmla:Server=cofindwdb01t.corp.pediatrix.net:8080/OLAP/msmdpump.dll&quot;+
                &quot;;Catalog=AA Financials&quot;, + &quot;;Integrated Security=Basic &quot; +
&quot;;User ID=AABrar&quot; +
&quot;;Password=Vinayaka420$&quot;);

    } catch (SQLException e) {
        e.printStackTrace();
    }
    if (null== connection){
        System.out.println(&quot;Connection null&quot;);
    }else
        System.out.println(&quot;Connect Successfully !&quot;);

    OlapWrapper wrapper = (OlapWrapper) connection;
    OlapConnection olapConnection = null;
    try {
    olapConnection = wrapper.unwrap(OlapConnection.class);
    } catch (SQLException e) {
    e.printStackTrace();
    }
    OlapStatement statement = null;
    CellSet cellSet = null;
    try {
    statement = (OlapStatement) olapConnection.createStatement();
    cellSet =   statement.executeOlapQuery(
&quot;select top 1000 [Accounting Period].[AcctPer Year - Quarter - Month - Calculations] from [AA Transactions]&quot;
    );

    } catch (SQLException e) {
    e.printStackTrace();
    }

    for (Position row : cellSet.getAxes().get(1)) {
        for (Position column : cellSet.getAxes().get(0)) {
                for (Member member : row.getMembers()) {
                        System.out.println(member.getName());
                }
                final Cell cell = cellSet.getCell(column, row);
                System.out.println(cell.getFormattedValue());
                System.out.println();

        }

    }
}

}</stringProp>
        </JSR223Listener>
        <hashTree/>
        <BeanShellListener guiclass="TestBeanGUI" testclass="BeanShellListener" testname="BeanShell Listener" enabled="false">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script"></stringProp>
        </BeanShellListener>
        <hashTree/>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Java Request" enabled="false">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="URL" elementType="Argument">
                <stringProp name="Argument.name">URL</stringProp>
                <stringProp name="Argument.value">http://www.google.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SEARCHFOR" elementType="Argument">
                <stringProp name="Argument.name">SEARCHFOR</stringProp>
                <stringProp name="Argument.value">Test</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">com.wordpress.newspaint.jmeter.java.demo.ExampleJavaTestClass</stringProp>
        </JavaSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler" enabled="false">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command"></stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">$connectionString = “Provider=MSOLAP;Data Source=COFINDWDB01T;Initial Catalog=FinancialWarehouse Cubes;”
$query = “SELECT NON EMPTY { [Measures].[Under_Budget_Flag] } ON COLUMNS, NON EMPTY { ([Accounting Calendar].[Current Month].[Current Month Date].ALLMEMBERS * [COA].[COA].[GLAcct].ALLMEMBERS * [Dashboard Location Rollup].[Dashboard Location Rollup].[PAU].ALLMEMBERS ) } DIMENSION PROPERTIES MEMBER_CAPTION, MEMBER_UNIQUE_NAME ON ROWS FROM ( SELECT ( { [Accounting Calendar].[Month].&amp;[2018-01-01T00:00:00], [Accounting Calendar].[Month].&amp;[2018-02-01T00:00:00], [Accounting Calendar].[Month].&amp;[2018-03-01T00:00:00], [Accounting Calendar].[Month].&amp;[2018-04-01T00:00:00], [Accounting Calendar].[Month].&amp;[2018-05-01T00:00:00], [Accounting Calendar].[Month].&amp;[2018-06-01T00:00:00], [Accounting Calendar].[Month].&amp;[2018-07-01T00:00:00], [Accounting Calendar].[Month].&amp;[2018-08-01T00:00:00], [Accounting Calendar].[Month].&amp;[2018-09-01T00:00:00], [Accounting Calendar].[Month].&amp;[2018-10-01T00:00:00], [Accounting Calendar].[Month].&amp;[2018-11-01T00:00:00], [Accounting Calendar].[Month].&amp;[2018-12-01T00:00:00], [Accounting Calendar].[Month].&amp;[2019-01-01T00:00:00], [Accounting Calendar].[Month].&amp;[2019-02-01T00:00:00] } ) ON COLUMNS FROM [Operational Summary Cube]) WHERE ( [Accounting Calendar].[Month].CurrentMember ) CELL PROPERTIES VALUE, BACK_COLOR, FORE_COLOR, FORMATTED_VALUE, FORMAT_STRING, FONT_NAME, FONT_SIZE, FONT_FLAGS”

$filename = “tofile.csv”
 
$connection = New-Object -TypeName System.Data.OleDb.OleDbConnection

$connection.ConnectionString = $connectionString
$command = $connection.CreateCommand()
$command.CommandText = $query
$adapter = New-Object -TypeName System.Data.OleDb.OleDbDataAdapter $command
$dataset = New-Object -TypeName System.Data.DataSet
$adapter.Fill($dataset)

$dataset.Tables[0] | export-csv $filename -notypeinformation
  
$connection.Close()</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Azure to Azure" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">test_pool</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://azprsvratsqlsvr01t.database.windows.net;DatabaseName=reserve_rate_reporting;authentication=ActiveDirectoryPassword</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Vinayaka420%</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">Amrinder_Brar@mednax.com</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - 1" enabled="true">
          <stringProp name="dataSource">test_pool</stringProp>
          <stringProp name="query">SELECT period_id, 
       Count(*)                  records, 
       Sum(charges)              Charges, 
       Sum(payments)             Payments, 
       Sum(refunds)              Refunds, 
       Sum(adjustments)          Adjustments, 
       Sum(balance)              Balance, 
       Sum(encounters)           Encounters, 
       Sum(quantity)             Quantity, 
       Sum(cases)                Cases, 
       Sum(allowed)              Allowed, 
       --Allowed_Base_Units, Total_Allowed_Units, 
       Sum(base_units)           Base_Units, 
       Sum(units)                Units, 
       Sum(ar_beginning_balance) AR_Beginning_Balance, 
       Sum(ar_charges)           AR_Charges, 
       Sum(ar_payments)          AR_Payments, 
       Sum(ar_refunds)           AR_Refunds, 
       Sum(ar_adjustments)       AR_Adjustments, 
       Sum(ar_ending_balance)    AR_Ending_Balance, 
       Sum(ca_beginning_balance) CA_Beginning_Balance, 
       Sum(ca_provision)         CA_Provision, 
       Sum(ca_adjustments)       CA_Adjustments, 
       Sum(ca_ending_balance)    CA_Ending_Balance, 
       Sum(contractual_adj_calc) Contractual_Adj_Calc, 
       Sum(bad_debt_adj_calc)    Bad_Debt_Adj_Calc, 
       Sum(other_adj_calc)       Other_Adj_Calc, 
       Sum(ar_contractual_adj)   ar_contractual_adj, 
       Sum(ar_bad_debt_adj)      ar_bad_debt_adj, 
       Sum(ar_other_adj)         ar_other_adj, 
       Sum(patient_payments)     patient_payments, 
       Sum(contractual_adj)      contractual_adj, 
       Sum(bad_debt_adj)         bad_debt_adj, 
       Sum(other_adj)            other_adj,
    Sum(total_units)          Total_Units,
         ( Sum(contractual_adj) + Sum(bad_debt_adj) 
         + Sum(other_adj) )      TOTAL_Adj
FROM   dbo.charge_financial_details 
WHERE  division_id = 1
GROUP  BY period_id 
ORDER  BY period_id </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">test_5</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">BodyData</stringProp>
            <stringProp name="RegexExtractor.regex">[\s\S]+</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">test_5 = vars.getObject(&quot;test_5&quot;)
result = new StringBuilder()

def randomRow = test_5.get(org.apache.commons.lang3.RandomUtils.nextInt(0,test_5.size()))

randomRow.each { k, v -&gt; 
    result.append(&quot;${k}&quot;).append(&quot;,&quot;)
}
result.append(System.getProperty(&quot;line.separator&quot;))

for (Object row : test_5 ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(&quot;AzuretoAzure1.csv&quot;), result.toString(), &quot;UTF-8&quot;)</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">test_pool_2</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://azprsvratsqlsvr01p.database.windows.net;DatabaseName=reserve_rate_reporting;authentication=ActiveDirectoryPassword</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Vinayaka420%</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">Amrinder_Brar@mednax.com</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - 2" enabled="true">
          <stringProp name="dataSource">test_pool_2</stringProp>
          <stringProp name="query">SELECT period_id, 
       Count(*)                  records, 
       Sum(charges)              Charges, 
       Sum(payments)             Payments, 
       Sum(refunds)              Refunds, 
       Sum(adjustments)          Adjustments, 
       Sum(balance)              Balance, 
       Sum(encounters)           Encounters, 
       Sum(quantity)             Quantity, 
       Sum(cases)                Cases, 
       Sum(allowed)              Allowed, 
       --Allowed_Base_Units, Total_Allowed_Units, 
       Sum(base_units)           Base_Units, 
       Sum(units)                Units, 
       Sum(ar_beginning_balance) AR_Beginning_Balance, 
       Sum(ar_charges)           AR_Charges, 
       Sum(ar_payments)          AR_Payments, 
       Sum(ar_refunds)           AR_Refunds, 
       Sum(ar_adjustments)       AR_Adjustments, 
       Sum(ar_ending_balance)    AR_Ending_Balance, 
       Sum(ca_beginning_balance) CA_Beginning_Balance, 
       Sum(ca_provision)         CA_Provision, 
       Sum(ca_adjustments)       CA_Adjustments, 
       Sum(ca_ending_balance)    CA_Ending_Balance, 
       Sum(contractual_adj_calc) Contractual_Adj_Calc, 
       Sum(bad_debt_adj_calc)    Bad_Debt_Adj_Calc, 
       Sum(other_adj_calc)       Other_Adj_Calc, 
       Sum(ar_contractual_adj)   ar_contractual_adj, 
       Sum(ar_bad_debt_adj)      ar_bad_debt_adj, 
       Sum(ar_other_adj)         ar_other_adj, 
       Sum(patient_payments)     patient_payments, 
       Sum(contractual_adj)      contractual_adj, 
       Sum(bad_debt_adj)         bad_debt_adj, 
       Sum(other_adj)            other_adj,
    Sum(total_units)          Total_Units,
         ( Sum(contractual_adj) + Sum(bad_debt_adj) 
         + Sum(other_adj) )      TOTAL_Adj
FROM   dbo.charge_financial_details 
WHERE  division_id = 1
GROUP  BY period_id 
ORDER  BY period_id </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">test_6</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="269430394">${BodyData}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">test_6 = vars.getObject(&quot;test_6&quot;)
result = new StringBuilder()

def randomRow = test_6.get(org.apache.commons.lang3.RandomUtils.nextInt(0,test_6.size()))

randomRow.each { k, v -&gt; 
    result.append(&quot;${k}&quot;).append(&quot;,&quot;)
}
result.append(System.getProperty(&quot;line.separator&quot;))

for (Object row : test_6 ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(&quot;AzuretoAzure2.csv&quot;), result.toString(), &quot;UTF-8&quot;)</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler" enabled="false">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">C:\Users\AABrar\Desktop\output.ps1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">allowed</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)&lt;.Value&gt;.FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;1&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">allowed_payer</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;1&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;2&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">AR_Bad_Debt_Adj</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;2&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;3&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CA_Provision</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;3&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;4&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">AR_Charges</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;4&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;5&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">AR_Contractual_Adj</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;5&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;6&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">AR_Inferred_Avoidable_Adjustment</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;6&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;7&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">AR_Inferred_Pat_Pymt_From_BDA</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;7&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;8&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">AR_Ins_Payments</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;8&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;9&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">AR_Other_Adj</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;9&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;10&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Pat_Pymt_Count</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;10&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;11&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">AR_Patient_Payments</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;11&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;12&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">AR_Payments</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;12&quot;&gt;&lt;Value xsi:type=&quot;xsd:long&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;13&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">AR_Units</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;13&quot;&gt;&lt;Value xsi:type=&quot;xsd:double&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>false</time>
                <latency>false</latency>
                <timestamp>false</timestamp>
                <success>false</success>
                <label>false</label>
                <code>false</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename">C:\Users\AABrar\Desktop\JMeter\apache-jmeter-5.2.1\bin\Cube.csv</stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>false</time>
                <latency>false</latency>
                <timestamp>false</timestamp>
                <success>false</success>
                <label>false</label>
                <code>false</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename">C:\Users\AABrar\Desktop\JMeter\apache-jmeter-5.2.1\bin\Cube.csv</stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler" enabled="false">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">C:\Users\AABrar\Desktop\test111111.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">BodyData2</stringProp>
            <stringProp name="RegexExtractor.regex">[\s\S]+</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">BodyData2 = vars.getObject(&quot;BodyData2&quot;)
result = new StringBuilder()

def randomRow = BodyData2.get(org.apache.commons.lang3.RandomUtils.nextInt(0,BodyData2.size()))

randomRow.each { k, v -&gt; 
    result.append(&quot;${k}&quot;).append(&quot;,&quot;)
}
result.append(System.getProperty(&quot;line.separator&quot;))

for (Object row : BodyData2 ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(&quot;test5.csv&quot;), result.toString(), &quot;UTF-8&quot;)</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import org.apache.jmeter.assertions.AssertionResult;

AssertionResult[] results = prev.getAssertionResults();
StringBuilder body = new StringBuilder();
for (AssertionResult result : results) {
    body.append(result.getFailureMessage());
    body.append(System.getProperty(&quot;line.separator&quot;));
}
vars.put(&quot;body&quot;, body.toString());</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <SmtpSampler guiclass="SmtpSamplerGui" testclass="SmtpSampler" testname="SMTP Sampler" enabled="true">
          <stringProp name="SMTPSampler.server">smtp.office365.com</stringProp>
          <stringProp name="SMTPSampler.serverPort">587</stringProp>
          <stringProp name="SMTPSampler.mailFrom">amrinder_brar@mednax.com</stringProp>
          <stringProp name="SMTPSampler.replyTo"></stringProp>
          <stringProp name="SMTPSampler.receiverTo">amrinder_brar@mednax.com</stringProp>
          <stringProp name="SMTPSampler.receiverCC"></stringProp>
          <stringProp name="SMTPSampler.receiverBCC"></stringProp>
          <stringProp name="SMTPSampler.subject">Hi there</stringProp>
          <stringProp name="SMTPSampler.suppressSubject">false</stringProp>
          <stringProp name="SMTPSampler.include_timestamp">false</stringProp>
          <stringProp name="SMTPSampler.message">${body}</stringProp>
          <stringProp name="SMTPSampler.plainBody">false</stringProp>
          <stringProp name="SMTPSampler.attachFile"></stringProp>
          <stringProp name="SMTPSampler.useSSL">false</stringProp>
          <stringProp name="SMTPSampler.useStartTLS">true</stringProp>
          <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
          <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
          <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
          <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          <stringProp name="SMTPSampler.tlsProtocols"></stringProp>
          <boolProp name="SMTPSampler.use_eml">false</boolProp>
          <stringProp name="SMTPSampler.emlMessageToSend"></stringProp>
          <stringProp name="SMTPSampler.useAuth">true</stringProp>
          <stringProp name="SMTPSampler.password">Vinayaka420%</stringProp>
          <stringProp name="SMTPSampler.username">Amrinder_Brar@mednax.com</stringProp>
          <stringProp name="SMTPSampler.messageSizeStatistics">false</stringProp>
          <stringProp name="SMTPSampler.enableDebug">false</stringProp>
          <collectionProp name="SMTPSampler.headerFields"/>
        </SmtpSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SQL to SQL" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">500000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">test_pool1</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://cofindwdb01t;DatabaseName=FinCon_DM;integratedSecurity=true;authenticationScheme=JavaKerberos</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Vinayaka420%</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">100000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">AABrar</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request -1" enabled="true">
          <stringProp name="dataSource">test_pool1</stringProp>
          <stringProp name="query">/*select *
from INFORMATION_SCHEMA.COLUMNS
where TABLE_NAME=&apos;[FinCon_DM].[source_tables].[Employees]&apos;*/

select * from INFORMATION_SCHEMA.TABLES

/*SELECT TABLE_SCHEMA ,
       TABLE_NAME ,
       COLUMN_NAME ,
       ORDINAL_POSITION ,
       COLUMN_DEFAULT ,
       DATA_TYPE ,
       CHARACTER_MAXIMUM_LENGTH ,
       NUMERIC_PRECISION ,
       NUMERIC_PRECISION_RADIX ,
       NUMERIC_SCALE ,
       DATETIME_PRECISION
FROM   INFORMATION_SCHEMA.COLUMNS
where TABLE_SCHEMA in (&apos;dbo&apos;,&apos;meta&apos;)
and table_name in (select name from sys.tables)
order by TABLE_SCHEMA ,       TABLE_NAME ,ORDINAL_POSITION */</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">test_2</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">BodyData</stringProp>
            <stringProp name="RegexExtractor.regex">[\s\S]+</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>false</time>
                <latency>false</latency>
                <timestamp>false</timestamp>
                <success>false</success>
                <label>false</label>
                <code>false</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>true</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
          <stringProp name="BeanShellSampler.query">test_2 = vars.getObject(&quot;test_2&quot;)
result = new StringBuilder()

def randomRow = test_2.get(org.apache.commons.lang3.RandomUtils.nextInt(0,test_2.size()))

randomRow.each { k, v -&gt; 
    result.append(&quot;${k}&quot;).append(&quot;,&quot;)
}
result.append(System.getProperty(&quot;line.separator&quot;))

for (Object row : test_2 ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(&quot;test1.csv&quot;), result.toString(), &quot;UTF-8&quot;)</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">test_2 = vars.getObject(&quot;test_2&quot;)
result = new StringBuilder()

def randomRow = test_2.get(org.apache.commons.lang3.RandomUtils.nextInt(0,test_2.size()))

randomRow.each { k, v -&gt; 
    result.append(&quot;${k}&quot;).append(&quot;\t&quot;)
}
result.append(System.getProperty(&quot;line.separator&quot;))

for (Object row : test_2 ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(&quot;SQL-SQL1.csv&quot;), result.toString(), &quot;UTF-8&quot;)</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">500000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">test_pool2</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://cofindwdb01p;DatabaseName=FinCon_DM;integratedSecurity=true;authenticationScheme=JavaKerberos</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Vinayaka420%</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">100000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">AABrar</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - 2" enabled="true">
          <stringProp name="dataSource">test_pool2</stringProp>
          <stringProp name="query">/*select *
from INFORMATION_SCHEMA.COLUMNS
where TABLE_NAME=&apos;[FinCon_DM].[source_tables].[Employees]&apos;*/

select * from INFORMATION_SCHEMA.TABLES

/*SELECT TABLE_SCHEMA ,
       TABLE_NAME ,
       COLUMN_NAME ,
       ORDINAL_POSITION ,
       COLUMN_DEFAULT ,
       DATA_TYPE ,
       CHARACTER_MAXIMUM_LENGTH ,
       NUMERIC_PRECISION ,
       NUMERIC_PRECISION_RADIX ,
       NUMERIC_SCALE ,
       DATETIME_PRECISION
FROM   INFORMATION_SCHEMA.COLUMNS
where TABLE_SCHEMA in (&apos;dbo&apos;,&apos;meta&apos;)
and table_name in (select name from sys.tables)
order by TABLE_SCHEMA ,       TABLE_NAME ,ORDINAL_POSITION */</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">test_3</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="269430394">${BodyData}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>false</latency>
                <timestamp>false</timestamp>
                <success>false</success>
                <label>false</label>
                <code>false</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
          <stringProp name="BeanShellSampler.query">test_3 = vars.getObject(&quot;test_3&quot;)
result = new StringBuilder()

def randomRow = test_3.get(org.apache.commons.lang3.RandomUtils.nextInt(0,test_3.size()))

randomRow.each { k, v -&gt; 
    result.append(&quot;${k}&quot;).append(&quot;,&quot;)
}
result.append(System.getProperty(&quot;line.separator&quot;))

for (Object row : test_3 ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(&quot;test3.csv&quot;), result.toString(), &quot;UTF-8&quot;)</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">test_3 = vars.getObject(&quot;test_3&quot;)
result = new StringBuilder()

def randomRow = test_3.get(org.apache.commons.lang3.RandomUtils.nextInt(0,test_3.size()))

randomRow.each { k, v -&gt; 
    result.append(&quot;${k}&quot;).append(&quot;\t&quot;)
}
result.append(System.getProperty(&quot;line.separator&quot;))

for (Object row : test_3 ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(&quot;SQL-SQL2.csv&quot;), result.toString(), &quot;UTF-8&quot;)</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import org.apache.jmeter.assertions.AssertionResult;

AssertionResult[] results = prev.getAssertionResults();
StringBuilder body = new StringBuilder();
for (AssertionResult result : results) {
    body.append(result.getFailureMessage());
    body.append(System.getProperty(&quot;line.separator&quot;));
}
vars.put(&quot;body&quot;, body.toString());</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <SmtpSampler guiclass="SmtpSamplerGui" testclass="SmtpSampler" testname="SMTP Sampler" enabled="true">
          <stringProp name="SMTPSampler.server">smtp.office365.com</stringProp>
          <stringProp name="SMTPSampler.serverPort">587</stringProp>
          <stringProp name="SMTPSampler.mailFrom">saritha_Thota@mednax.com</stringProp>
          <stringProp name="SMTPSampler.replyTo"></stringProp>
          <stringProp name="SMTPSampler.receiverTo">amrinder_brar@mednax.com</stringProp>
          <stringProp name="SMTPSampler.receiverCC"></stringProp>
          <stringProp name="SMTPSampler.receiverBCC"></stringProp>
          <stringProp name="SMTPSampler.subject">Hi there</stringProp>
          <stringProp name="SMTPSampler.suppressSubject">false</stringProp>
          <stringProp name="SMTPSampler.include_timestamp">false</stringProp>
          <stringProp name="SMTPSampler.message">${body}</stringProp>
          <stringProp name="SMTPSampler.plainBody">false</stringProp>
          <stringProp name="SMTPSampler.attachFile"></stringProp>
          <stringProp name="SMTPSampler.useSSL">false</stringProp>
          <stringProp name="SMTPSampler.useStartTLS">true</stringProp>
          <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
          <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
          <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
          <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          <stringProp name="SMTPSampler.tlsProtocols"></stringProp>
          <boolProp name="SMTPSampler.use_eml">false</boolProp>
          <stringProp name="SMTPSampler.emlMessageToSend"></stringProp>
          <stringProp name="SMTPSampler.useAuth">true</stringProp>
          <stringProp name="SMTPSampler.password">Omsrisai32#</stringProp>
          <stringProp name="SMTPSampler.username">Saritha_Thota@mednax.com</stringProp>
          <stringProp name="SMTPSampler.messageSizeStatistics">false</stringProp>
          <stringProp name="SMTPSampler.enableDebug">false</stringProp>
          <collectionProp name="SMTPSampler.headerFields"/>
        </SmtpSampler>
        <hashTree/>
        <SmtpSampler guiclass="SmtpSamplerGui" testclass="SmtpSampler" testname="SMTP Sampler" enabled="false">
          <stringProp name="SMTPSampler.server">smtp.googlemail.com</stringProp>
          <stringProp name="SMTPSampler.serverPort">587</stringProp>
          <stringProp name="SMTPSampler.mailFrom">amrinder456@gmail.com</stringProp>
          <stringProp name="SMTPSampler.replyTo"></stringProp>
          <stringProp name="SMTPSampler.receiverTo">amrinder456@gmail.com;amrinder_brar@mednax.com</stringProp>
          <stringProp name="SMTPSampler.receiverCC"></stringProp>
          <stringProp name="SMTPSampler.receiverBCC"></stringProp>
          <stringProp name="SMTPSampler.subject">Hi there</stringProp>
          <stringProp name="SMTPSampler.suppressSubject">false</stringProp>
          <stringProp name="SMTPSampler.include_timestamp">false</stringProp>
          <stringProp name="SMTPSampler.message">${body}</stringProp>
          <stringProp name="SMTPSampler.plainBody">false</stringProp>
          <stringProp name="SMTPSampler.attachFile"></stringProp>
          <stringProp name="SMTPSampler.useSSL">false</stringProp>
          <stringProp name="SMTPSampler.useStartTLS">true</stringProp>
          <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
          <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
          <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
          <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          <stringProp name="SMTPSampler.tlsProtocols"></stringProp>
          <boolProp name="SMTPSampler.use_eml">false</boolProp>
          <stringProp name="SMTPSampler.emlMessageToSend"></stringProp>
          <stringProp name="SMTPSampler.useAuth">true</stringProp>
          <stringProp name="SMTPSampler.password">Vinayaka786</stringProp>
          <stringProp name="SMTPSampler.username">amrinder456@gmail.com</stringProp>
          <stringProp name="SMTPSampler.messageSizeStatistics">false</stringProp>
          <stringProp name="SMTPSampler.enableDebug">false</stringProp>
          <collectionProp name="SMTPSampler.headerFields"/>
        </SmtpSampler>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="false">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">test_pool</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://azprsvratsqlsvr01d.database.windows.net;DatabaseName=reserve_rate_reporting;authentication=ActiveDirectoryPassword</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Vinayaka420$</stringProp>
          <stringProp name="poolMax">8</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">Amrinder_Brar@mednax.com</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - 1" enabled="false">
          <stringProp name="dataSource">test_pool</stringProp>
          <stringProp name="query">





--DECLARE 
--@Ser_Date_yr int,
--@Ser_Date_mnt int,
--@div NVARCHAR(MAX),
--@om_div NVARCHAR(MAX),
--@om_reg NVARCHAR(MAX),
--@practype NVARCHAR(MAX),
--@prac NVARCHAR(MAX),
--@acct_unit NVARCHAR(MAX);


---- Initialize the variable
--SET @Ser_Date_yr = 2019				-- see line 83
--SET @Ser_Date_mnt = 11			    -- see line 84
--SET @div = &apos;PEDIATRIX&apos;				-- see line 103,153
--SET @om_div = &apos;EASTERN&apos;				-- see line 104,154
--SET @om_reg = &apos;NORTH&apos;					-- see line 105,155
--SET @practype = &apos;PERINATOLOGY&apos;				-- see line 106,156
--SET @prac = (&apos;GREATER NASHVILLE MFM PRAC,ROCKVILLE MFM PRACTICE&apos;)		-- see line 107,157
--SET @acct_unit = (&apos;44070301999&apos;)	-- see line 108,158


DROP TABLE IF EXISTS #z_dims
	select d.*
	into #z_dims
	from (
	   select distinct d.acct_unit,
	   max(d.period_id) m_pid 
	 --  max(d.dimallattrib_key) m_did
	   from [dbo].[Charge_Financial_Details] c
	   INNER JOIN 
	   dimallattrib d 
               ON c.dimallattrib_key = d.dimallattrib_key 
	--where c.charge_number = &apos;13032981&apos;
	--where billing_details_id = &apos;93849104&apos;
				   group by d.acct_unit
			)a
			 INNER JOIN 
			 dimallattrib d 
               ON a.acct_unit = d.acct_unit 
			   and m_pid = d.period_id
		--	   and m_did  = d.dimallattrib_key 



SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #Not_Allowed_base_allowed
SELECT Rtrim(zd.practice2)    practice2, 
cfd.acct_unit,
       CASE 
         WHEN division_id = 2 
              AND visitcharges_id IS NOT NULL THEN visitcharges_id 
         WHEN division_id = 1 
              AND ar_type_id = 1 THEN Ltrim(Rtrim(Str(charge_number))) 
         WHEN division_id = 1 
              AND ar_type_id = 2 
              AND source_system_id &lt;&gt; 2 THEN Ltrim( 
         Rtrim(Str(billing_details_id))) 
         WHEN ar_type_id = 2 
              AND source_system_id = 2 THEN 
         Ltrim(Rtrim(Str(Isnull(billing_details_id, 
         0)))) 
         + Isnull(cpt_modifier_code, &apos;00&apos;) 
         + Ltrim(Rtrim((Isnull(procedure_code, 0)))) 
         + Ltrim(Rtrim((Isnull(provider_code, 0)))) 
         + CONVERT(VARCHAR, service_date, 101) 
       END  uniquenum, 
       cfd.visitcharges_id, 
       cfd.charge_number, 
       cfd.billing_details_id, 
       cfd.procedure_code, 
       service_date          Actual_Service_Date, 
       Eomonth(service_date) service_date, 
       cfd.accounting_period, 
       pm.archive_period, 
       cfd.ar_units, 
       Isnull(cfd.allowed, 0)Allowed, 
       cfd.practice_code, 
       cfd.dimallattrib_key, 
       cfd.source_system_id, 
       CFD.ar_type_id, 
       cfd.cpt_modifier_code, 
       cfd.charge_financial_detail_id, 
       cfd.payer_financial_class_key, 
       CFD.ar_charges, 
       CFD.ca_provision, 
       CFD.ar_payments, 
       CFD.ar_patient_payments, 
       CFD.ar_contractual_adj, 
       CFD.ar_bad_debt_adj, 
       CFD.ar_other_adj 
INTO   #not_allowed_base_allowed 
FROM   charge_financial_details cfd 
       INNER JOIN period_master pm 
               ON cfd.period_id = pm.period_id 
       INNER JOIN dimallattrib d 
               ON cfd.dimallattrib_key = d.dimallattrib_key 
			   Inner Join #z_dims zd
			   on d.acct_unit = zd.acct_unit
WHERE  
       Year(cfd.service_date) &gt;= &apos;2016&apos; -- keep static
  --     AND Year(cfd.service_date) &lt;= Year(Getdate()) 
         and cfd.dimallattrib_key IS NOT NULL 

	   -- FILTER OPTIONS APPLIED HERE --

	    and Year(cfd.service_date) = &apos;2019&apos; --@Ser_Date_yr
		and ar_type_id = &apos;1&apos;
  --    and month(cfd.service_date) = &apos;11&apos; --@Ser_Date_mnt

--and zD.Division_ in (&apos;PEDIATRIX&apos;)-- (SELECT Value FROM STRING_SPLIT(@Div, &apos;,&apos;))
--and zD.Region in
   and zD.ZANSRPT_LV1  in (&apos;WESTERN&apos;)-- (SELECT Value FROM STRING_SPLIT(@OM_Div, &apos;,&apos;))
--	and zD.ZANSRPT_LV2 in (&apos;MIDWEST&apos;) --(SELECT Value FROM STRING_SPLIT(@OM_Reg, &apos;,&apos;))
--	and zD.PRACTYPE in (&apos;HEARING SCREEN&apos;) -- (SELECT Value FROM STRING_SPLIT(@PRACTYPE, &apos;,&apos;))
--and zD.PRACTICE2  like  (&apos;EXCELA WESTMORELAND HS PRAC&apos;) -- (SELECT Value FROM STRING_SPLIT(@Prac, &apos;,&apos;))
--and cfd.acct_unit = &apos;25090103999&apos; -- (SELECT Value FROM STRING_SPLIT(@acct_unit, &apos;,&apos;))
--	   and CASE 
--         WHEN division_id = 2 
--              AND visitcharges_id IS NOT NULL THEN visitcharges_id 
--         WHEN division_id = 1 
--              AND ar_type_id = 1 THEN Ltrim(Rtrim(Str(charge_number))) 
--         WHEN division_id = 1 
--              AND ar_type_id = 2 
--              AND source_system_id &lt;&gt; 2 THEN Ltrim( 
--         Rtrim(Str(billing_details_id))) 
--         WHEN ar_type_id = 2 
--              AND source_system_id = 2 THEN 
--         Ltrim(Rtrim(Str(Isnull(billing_details_id, 
--         0)))) 
--         + Isnull(cpt_modifier_code, &apos;00&apos;) 
--         + Ltrim(Rtrim((Isnull(procedure_code, 0)))) 
--         + Ltrim(Rtrim((Isnull(provider_code, 0)))) 
--         + CONVERT(VARCHAR, service_date, 101) 
--      END  in (
--&apos;2019120501560555400121382B76BC&apos;
--	  ) --&apos;93849104&apos;,&apos;17506869&apos;)




-- CFD2 START
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #cfd
SELECT Rtrim(zd.practice2)    practice2, 
cfd.acct_unit,
       CASE 
         WHEN division_id = 2 
              AND visitcharges_id IS NOT NULL THEN visitcharges_id 
         WHEN division_id = 1 
              AND ar_type_id = 1 THEN Ltrim(Rtrim(Str(charge_number))) 
         WHEN division_id = 1 
              AND ar_type_id = 2 
              AND source_system_id &lt;&gt; 2 THEN Ltrim( 
         Rtrim(Str(billing_details_id))) 
         WHEN ar_type_id = 2 
              AND source_system_id = 2 THEN 
         Ltrim(Rtrim(Str(Isnull(billing_details_id, 
         0)))) 
         + Isnull(cpt_modifier_code, &apos;00&apos;) 
         + Ltrim(Rtrim((Isnull(procedure_code, 0)))) 
         + Ltrim(Rtrim((Isnull(provider_code, 0)))) 
         + CONVERT(VARCHAR, service_date, 101) 
       END  uniquenum, 
       Eomonth(service_date) service_date, 
       cfd.accounting_period, 
       pm.archive_period, 
       cfd.ar_units, 
       Isnull(cfd.allowed, 0)Allowed, 
       cfd.practice_code, 
       CFD.ar_charges,     
       CFD.ar_contractual_adj, 
       CFD.ar_bad_debt_adj,
	   cpt_modifier_code,
	   charge_financial_detail_id,
	   cfd.dimallattrib_key dimkey,
	   zd.dimallattrib_key 
INTO   #cfd 
FROM   charge_financial_details cfd 
       INNER JOIN period_master pm 
               ON cfd.period_id = pm.period_id 
       INNER JOIN dimallattrib d 
               ON cfd.dimallattrib_key = d.dimallattrib_key 
			   Inner Join #z_dims zd
			   on d.acct_unit = zd.acct_unit
WHERE  
        Year(cfd.service_date) &gt;= 2016 
        AND Year(cfd.service_date) &lt;= Year(Getdate()) 
        and cfd.dimallattrib_key IS NOT NULL 


--and zD.Division_ in (&apos;PEDIATRIX&apos;)-- (SELECT Value FROM STRING_SPLIT(@Div, &apos;,&apos;))
  and zD.ZANSRPT_LV1  in (&apos;WESTERN&apos;)-- (SELECT Value FROM STRING_SPLIT(@OM_Div, &apos;,&apos;))
	--and zD.ZANSRPT_LV2 in (&apos;MOUNTAIN WEST&apos;) --(SELECT Value FROM STRING_SPLIT(@OM_Reg, &apos;,&apos;))
		--and zD.PRACTYPE in (&apos;PERINATOLOGY&apos;) -- (SELECT Value FROM STRING_SPLIT(@PRACTYPE, &apos;,&apos;))
--and zD.Division_ in (&apos;PEDIATRIX&apos;)-- (SELECT Value FROM STRING_SPLIT(@Div, &apos;,&apos;))
--   and zD.ZANSRPT_LV1  in (&apos;EASTERN&apos;)-- (SELECT Value FROM STRING_SPLIT(@OM_Div, &apos;,&apos;))
--and zD.ZANSRPT_LV2 in (&apos;MIDWEST&apos;) --(SELECT Value FROM STRING_SPLIT(@OM_Reg, &apos;,&apos;))
--	and zD.PRACTYPE in (&apos;HEARING SCREEN&apos;) -- (SELECT Value FROM STRING_SPLIT(@PRACTYPE, &apos;,&apos;))
--and zD.PRACTICE2  like  (&apos;EXCELA WESTMORELAND HS PRAC&apos;) -- (SELECT Value FROM STRING_SPLIT(@Prac, &apos;,&apos;))
--and zD.PRACTICE2  like  (&apos;DENVER CARDIOLOGY PRACTICE%&apos;) -- (SELECT Value FROM STRING_SPLIT(@Prac, &apos;,&apos;))
--and cfd.acct_unit = &apos;32040571999&apos; -- (SELECT Value FROM STRING_SPLIT(@acct_unit, &apos;,&apos;))
--	   and CASE 
--         WHEN division_id = 2 
--              AND visitcharges_id IS NOT NULL THEN visitcharges_id 
--         WHEN division_id = 1 
--              AND ar_type_id = 1 THEN Ltrim(Rtrim(Str(charge_number))) 
--         WHEN division_id = 1 
--              AND ar_type_id = 2 
--              AND source_system_id &lt;&gt; 2 THEN Ltrim( 
--         Rtrim(Str(billing_details_id))) 
--         WHEN ar_type_id = 2 
--              AND source_system_id = 2 THEN 
--         Ltrim(Rtrim(Str(Isnull(billing_details_id, 
--         0)))) 
--         + Isnull(cpt_modifier_code, &apos;00&apos;) 
--         + Ltrim(Rtrim((Isnull(procedure_code, 0)))) 
--         + Ltrim(Rtrim((Isnull(provider_code, 0)))) 
--         + CONVERT(VARCHAR, service_date, 101) 
--      END  in (
--&apos;2019120501560555400121382B76BC&apos;
--	  ) --&apos;93849104&apos;,&apos;17506869&apos;)







	   
-- CFD2 END

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #Not_Allowed_get_min_period
SELECT --cfd.practice2, 
       cfd.uniquenum, 
       cfd.practice_code, 
       cfd.cpt_modifier_code, 
     --  payer_financial_class_key, 
       Min(cfd.archive_period) archive_PERIOD
	--   zd.acct_unit	 
INTO   #not_allowed_get_min_period 
--FROM   #not_allowed_base_allowed  -- changed 1/29
FROM #cfd cfd
inner join #z_dims zd
on cfd.acct_unit = zd.acct_unit
GROUP  BY cfd.uniquenum, 
        cfd.practice_code, 
        --  cfd.practice2, 
          cfd.cpt_modifier_code
	--	  zd.acct_unit

		  

 drop table if exists #zach_getdims
	  select --a.*,	  
	  a.uniquenum,
	  a.practice_code,
      a.cpt_modifier_code,
      max(a.archive_PERIOD) archive_PERIOD,
      b.dimallattrib_key
	  into #zach_getdims
	  from #Not_Allowed_get_min_period a
	  inner join 
	  	(  select uniquenum,practice_code, max(dimallattrib_key) dimallattrib_key from #Not_Allowed_base_allowed 
	   -- where uniquenum = &apos;17430777&apos;
		group by uniquenum, practice_code)b
		on a.uniquenum = b.uniquenum
		and a.practice_code = b.practice_code
		group by 
		a.uniquenum,
	    a.practice_code,
        a.cpt_modifier_code,    
        b.dimallattrib_key

drop table if exists #zach_getdims2
select zd.*,d.practice2,d.acct_unit 
into #zach_getdims2
from #zach_getdims zd
       INNER JOIN dimallattrib d 
               ON zd.dimallattrib_key = d.dimallattrib_key 




SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
 drop table if exists #Not_Allowed_GETMIN_A

SELECT DISTINCT T.uniquenum, 
				--t.practice2,
				t.acct_unit,
                t.practice_code, 
                t.archive_period, 
                 mi.allowed                   Allowed_Initial, 
			   
                mi.cpt_modifier_code         CPT_Modifier_Code_Initial, 
                mi.payer_financial_class_key Payer_Financial_Class_Key_Initial 
INTO   #not_allowed_getmin_a 
FROM    #zach_getdims2 t 
       OUTER apply(SELECT c.payer_code,                     
                          c.contract_key, 
                          c.payer_financial_class_key, 
                          c.acct_unit, 
                          c.allowed, 
                          c.procedure_code, 
                          c.cpt_modifier_code,
						  t.dimallattrib_key							
           --        FROM   #not_allowed_base_allowed p   --changed 1/29
				   FROM #cfd p
                          INNER JOIN dbo.charge_financial_details c 
                                  ON p.charge_financial_detail_id = 
                                     c.charge_financial_detail_id 
						--Inner Join	 #Not_Allowed_get_min_period m
						--on p.uniquenum = m.uniquenum 
						--and p.practice_code = m.practice_code
						--and p.archive_period = m.archive_period
						--and p.acct_unit = m.acct_unit
                          LEFT JOIN dbo.period_master pm 
                                 ON pm.period_id = c.period_id                  
                   WHERE  c.practice_code = t.practice_code                 
                          AND p.uniquenum = t.uniquenum 
                          AND p.practice_code = t.practice_code 
                          AND p.archive_period = t.archive_period
					--	  AND p.dimkey = t.dimallattrib_key--_Min 					
                  ) mi 






SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #Not_Allowed_GETMIN_B

SELECT A.uniquenum, 
  --    a.practice2,
       A.practice_code, 
	   a.acct_unit,
       A.archive_period, 
       A.allowed_initial, 
       A.cpt_modifier_code_initial, 
       a.payer_financial_class_key_initial 
INTO   #not_allowed_getmin_b 
FROM   #not_allowed_getmin_a A 
       INNER JOIN (SELECT A.uniquenum, 
	   a.acct_unit,
                          A.practice_code, 
                          Min(A.archive_period)ARCHIVE_PERIOD 
                   FROM   #not_allowed_getmin_a A 
                   GROUP  BY A.uniquenum, 
                             A.practice_code,
							  a.acct_unit) B 
               ON A.uniquenum = B.uniquenum 
                  AND A.practice_code = B.practice_code 
                  AND A.archive_period = B.archive_period 
				  and  a.acct_unit = b.acct_unit
 


SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #Not_Allowed_base_allowed_a
SELECT a.* 
INTO   #not_allowed_base_allowed_a 
FROM   #not_allowed_base_allowed a 
       INNER JOIN #zach_getdims2 m 
               ON a.uniquenum = m.uniquenum 
                  AND a.practice_code = m.practice_code 
               --   AND a.archive_period = m.archive_period 
				  and a.acct_unit = m.acct_unit




drop table if exists #Not_Allowed_base_allowed_amount_A
SELECT A.practice2, 
a.acct_unit,
       A.uniquenum, 
       A.practice_code, 
       A.service_date, 
       a.accounting_period, 
       a.archive_period, 
       Sum(CASE 
             WHEN Round(A.ar_units, 0) &gt;= 1 THEN COALESCE(B.allowed_initial, 0) 
             WHEN Round(A.ar_units, 0) &lt;= -1 
                  AND A.source_system_id = 2 THEN COALESCE(B.allowed_initial, 
                                                  ( Isnull(a.allowed, 0) )) 
             WHEN Round(A.ar_units, 0) &lt;= -1 
                  AND A.source_system_id = 1 THEN COALESCE(B.allowed_initial, 
                                                  ( Isnull(a.allowed, 0) )) *- 1 
             ELSE 0 
           END) Allowed 
INTO   #not_allowed_base_allowed_amount_a 
FROM   
--#not_allowed_base_allowed A 
 #not_allowed_base_allowed_a A
       LEFT JOIN #not_allowed_getmin_b B 
              ON A.uniquenum = B.uniquenum 
                 AND A.practice_code = B.practice_code 
                 AND Isnull(A.cpt_modifier_code, 0) = 
                     Isnull(B.cpt_modifier_code_initial, 0) 
                 AND Isnull(A.payer_financial_class_key, 0) = 
                     Isnull(B.payer_financial_class_key_initial, 0) 
					 
GROUP  BY A.practice2, 
          A.uniquenum, 
          A.service_date, 
          A.practice_code, 
          a.accounting_period, 
          a.archive_period,
		  a.acct_unit



drop table if exists #Not_Allowed_base_allowed_amount_b
SELECT practice2, 
acct_unit,
       service_date, 
       accounting_period, 
       archive_period, 
	   uniquenum,
	   practice_code,
       Sum(z.ar_charges)         AR_Charges, 
       Sum(z.ca_provision)       CA_Provision, 
       Sum(z.ar_payments)        AR_Payments, 
       Sum(z.ar_patient_payments)AR_Patient_Payments, 
       Sum(z.ar_contractual_adj) AR_Contractual_Adj, 
       Sum(z.ar_bad_debt_adj)    AR_Bad_Debt_Adj, 
       Sum(z.ar_other_adj)       AR_Other_Adj, 
	   Sum(z.ar_units)			 AR_Units,
       Sum(z.allowed)            ALLOWED 
INTO   #not_allowed_base_allowed_amount_b 
FROM   (SELECT b.practice2, 
b.acct_unit,
               b.uniquenum, 
               b.practice_code,
               B.service_date, 
               a.accounting_period, 
               a.archive_period, 
               Sum(b.ar_charges)         AR_Charges, 
               Sum(b.ca_provision)       CA_Provision, 
               Sum(b.ar_payments)        AR_Payments, 
               Sum(b.ar_patient_payments)AR_Patient_Payments, 
               Sum(b.ar_contractual_adj) AR_Contractual_Adj, 
               Sum(b.ar_bad_debt_adj)    AR_Bad_Debt_Adj, 
               Sum(b.ar_other_adj)       AR_Other_Adj, 
			   Sum(b.ar_units) AR_Units, -- zach added
               a.allowed 
        FROM   #not_allowed_base_allowed B 
               LEFT JOIN (SELECT a.practice2, 
			   a.acct_unit,
                                 a.practice_code, 
                                 a.uniquenum, 
                                 a.archive_period, 
                                 a.accounting_period, 
                                 Sum(A.allowed)Allowed 
                          FROM   #not_allowed_base_allowed_amount_a A 
                          GROUP  BY a.practice2, 
						  a.acct_unit,
                                    a.practice_code, 
                                    a.uniquenum, 
                                    A.allowed, 
                                    a.archive_period, 
                                    a.accounting_period)A 
                      ON a.uniquenum = b.uniquenum 
                         AND a.practice_code = b.practice_code 
                         AND a.practice2 = b.practice2 
                         AND a.accounting_period = b.accounting_period 
                         AND a.archive_period = b.archive_period 
						 AND a.acct_unit = b.acct_unit
        GROUP  BY b.practice2, 
		b.acct_unit,
                  b.uniquenum, 
                  b.practice_code, 
                  a.allowed, 
                  B.service_date, 
                  a.accounting_period, 
                  a.archive_period)z 
GROUP  BY z.practice2, 
acct_unit,
          z.accounting_period, 
          z.archive_period, 
          z.service_date,
		  z.uniquenum,
		  practice_code




drop table if exists #Not_Allowed_base_allowed_amount_C
SELECT practice2, 
acct_unit,
       accounting_period, 
       archive_period, 
       service_date, 
	   uniquenum,
	   practice_code,
       Sum(ar_charges)         AR_Charges, 
       Sum(ca_provision)       CA_Provision, 
       Sum(ar_payments)        AR_Payments, 
       Sum(ar_patient_payments)AR_Patient_Payments, 
       Sum(ar_contractual_adj) AR_Contractual_Adj, 
       Sum(ar_bad_debt_adj)    AR_Bad_Debt_Adj, 
       Sum(ar_other_adj)       AR_Other_Adj,
	   Sum(ar_units)		   AR_units -- zach added
INTO   #not_allowed_base_allowed_amount_c 
FROM   #not_allowed_base_allowed_amount_b 
GROUP  BY practice2, 
          accounting_period, 
          archive_period, 
          service_date,
		  uniquenum,
		  practice_code,
		  acct_unit




drop table if exists #Not_Allowed_base_allowed_amount_D
SELECT-- b.practice2, 
b.acct_unit,
	  b.uniquenum,
	   max(service_date) service_date,
	   b.practice_code,
       Sum(ar_charges)         AR_Charges, 
       Sum(ca_provision)       CA_Provision, 
       Sum(ar_payments)        AR_Payments, 
       Sum(ar_patient_payments)AR_Patient_Payments, 
       Sum(ar_contractual_adj) AR_Contractual_Adj, 
       Sum(ar_bad_debt_adj)    AR_Bad_Debt_Adj, 
       Sum(ar_other_adj)       AR_Other_Adj  
INTO   #not_allowed_base_allowed_amount_d 
FROM   #not_allowed_base_allowed_amount_c c
 LEFT JOIN #not_allowed_getmin_b B 
              ON c.uniquenum = B.uniquenum 
                 AND c.practice_code = B.practice_code 
GROUP  BY --b.practice2,
b.uniquenum,b.practice_code,b.acct_unit--service_date






--Zach Test


SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #_Allowed_base_allowed_units_a
SELECT A.uniquenum, 
       A.practice_code, 
       a.practice2 , 
	   b.acct_unit,
       a.cpt_modifier_code, 
       ar_units, 
       a.archive_period,
	   a.service_date,
	   sum(AR_Contractual_Adj) AR_Contractual_Adj,
sum(AR_Charges)  AR_Charges
INTO   #_allowed_base_allowed_units_a
FROM   #not_allowed_base_allowed a
left join #Not_Allowed_GETMIN_B b
on A.uniquenum = b.uniquenum
and a.practice_code = b.practice_code
group by
A.uniquenum, 
       A.practice_code, 
       a.practice2 , 
	   b.acct_unit,
       a.cpt_modifier_code, 
       ar_units, 
       a.archive_period,
	   a.service_date




-- for allowed
DROP TABLE IF EXISTS #_allowed_base_allowed_amount_a 
SELECT    a.practice2, 
          a.uniquenum, 
          max(a.service_date) service_date, 
		  a.practice_code,
		  b.acct_unit,	
	--	  a.cpt_modifier_code,	
          sum( 
          CASE 
                    WHEN round(a.ar_units,0) &gt;= 1 THEN COALESCE(b.allowed_initial,0) 
                    WHEN round(a.ar_units,0) &lt;= -1 
                    AND       a.source_system_id = 2 THEN COALESCE(b.allowed_initial,0) 
                    WHEN round(a.ar_units,0) &lt;= -1 
                    AND       a.source_system_id = 1 THEN COALESCE(b.allowed_initial,0)*-1 
                    ELSE 0 
          END ) allowed 
INTO      #_allowed_base_allowed_amount_a 
FROM      #not_allowed_base_allowed a 
LEFT JOIN #Not_Allowed_GETMIN_B  b 
ON        a.uniquenum = b.uniquenum 
AND       a.practice_code = b.practice_code 
--AND       isnull(a.cpt_modifier_code,0) = isnull(b.cpt_modifier_code_initial,0) 
--And a.acct_unit = b.acct_unit
GROUP BY  a.practice2,
a.practice_code, 
          a.uniquenum,     
		  b.acct_unit
	--	  a.cpt_modifier_code
	--	  ,a.service_date
		 
--select * from		 #not_allowed_base_allowed
--select * from		 #Not_Allowed_GETMIN_B 
--select * from #_allowed_base_allowed_amount_a 


DROP TABLE IF EXISTS #_allowed_base_allowed_amount_b 
SELECT  -- practice2,
practice_code,
         uniquenum,
		 acct_unit,
         sum(allowed)allowed,
		 service_date
into #_allowed_base_allowed_amount_b 
FROM     #_allowed_base_allowed_amount_a 
GROUP BY --practice2,
practice_code,uniquenum,service_date,acct_unit
ORDER BY --practice2,
practice_code,uniquenum,service_date,acct_unit



DROP TABLE IF EXISTS #_ar_units
select 
max(service_date) service_date,
uniquenum, 
practice_code,
acct_unit,
sum(ar_units) ar_units, 
sum(AR_Contractual_Adj) AR_Contractual_Adj,
sum(AR_Charges)  AR_Charges
into #_ar_units
from  
#_Allowed_base_allowed_units_a
--#not_allowed_base_allowed 
group by 
--service_date, 
uniquenum, practice_code,acct_unit
order by --service_date, 
uniquenum, practice_code,acct_unit






DROP TABLE IF EXISTS #_allowed_payer
select 
service_date,
uniquenum, 
practice_code,
acct_unit,
ar_units,
case
              when (AR_Units) &gt; 0 and AR_Contractual_Adj != 0 then (round(AR_Charges,2) - AR_Contractual_Adj)
              when (AR_Units) &lt; 0 and AR_Contractual_Adj != 0 then (round(AR_Charges,2) - AR_Contractual_Adj)*-1
              else 0
       end Allowed_Payer
into #_allowed_payer
from #_ar_units


DROP TABLE IF EXISTS #_master1
SELECT 
	--  nal.practice2,
	  nal.acct_unit,
     nal.service_date,
	   nal.practice_code,
	   nal.UniqueNum,
       Sum(allowed)allowed,
	   Sum(allowed_payer) allowed_payer,
	   Sum(ar_charges)         AR_Charges, 
       Sum(ca_provision)       CA_Provision, 
       Sum(ar_payments)        AR_Payments, 
       Sum(ar_patient_payments)AR_Patient_Payments, 
       Sum(ar_contractual_adj) AR_Contractual_Adj, 
       Sum(ar_bad_debt_adj)    AR_Bad_Debt_Adj, 
       Sum(ar_other_adj)       AR_Other_Adj,
	   sum(AR_Payments) - sum(AR_Patient_Payments) AR_Ins_Payments,
	   sum(ar_units)		 AR_Units
	   into #_master1
 FROM #Not_Allowed_base_allowed_amount_D nal
left join #_allowed_base_allowed_amount_b al
on nal.uniquenum = al.uniquenum
and nal.practice_code = al.practice_code
and nal.service_date = al.service_date
and nal.acct_unit = al.acct_unit
left join #_allowed_payer ap
on nal.uniquenum = ap.uniquenum
and nal.service_date = ap.service_date
and isnull(nal.practice_code,0) = isnull(ap.practice_code,0)
and nal.acct_unit = ap.acct_unit
group by --nal.practice2,
nal.practice_code,nal.service_date,nal.UniqueNum,nal.acct_unit
order by --nal.practice2,
nal.practice_code,nal.service_date,nal.UniqueNum,nal.acct_unit





--select * from #Not_Allowed_base_allowed --

--select * from #Not_Allowed_get_min_period --

--select * from #Not_Allowed_GETMIN_A
--where acct_unit = &apos;15120204999&apos;
--select * from #Not_Allowed_GETMIN_B 
-- where acct_unit = &apos;15120204999&apos;
--select * from #Not_Allowed_base_allowed_a -- ok
--where acct_unit = &apos;15120204999&apos;
----select * from #Not_Allowed_base_allowed_amount_A
----where acct_unit = &apos;14090101999    &apos;

----select * from #Not_Allowed_base_allowed_amount_b -- ok
----where acct_unit = &apos;14090101999    &apos;
----select * from #Not_Allowed_base_allowed_amount_C -- ok
----where acct_unit = &apos;14090101999    &apos;
----select * from #Not_Allowed_base_allowed_amount_D -- ok
----where acct_unit = &apos;14090101999    &apos;
--select * from #_Allowed_base_allowed_units_a 
------where acct_unit = &apos;14090101999    &apos;
--select * from #_allowed_base_allowed_amount_a 
------where acct_unit = &apos;14090101999    &apos;
--select * from  #_allowed_base_allowed_amount_b 
------where acct_unit = &apos;14090101999    &apos;
--select * from #_ar_units
------where acct_unit = &apos;14090101999    &apos;
--select * from #_allowed_payer
------where acct_unit = &apos;14090101999    &apos;
----select * from #_master1 


----select * from #z_dims

----select * from #_flag_allow
------where acct_unit =&apos;15120304999&apos;
----select * from #_flag_Adj 
------where acct_unit =&apos;15120304999&apos;
------select * from #_master2
----select * from #_master3
----where acct_unit =&apos;15120304999&apos;



-- Flag Allowed
DROP TABLE IF EXISTS #_flag_allow
SELECT *, 
       CASE 
         WHEN allowed_initial IS NULL THEN 2 
         ELSE 1 
       END Flag_Allowed 
INTO   #_flag_allow 
FROM   #not_allowed_getmin_b 


-- Flag_Adjudicated
DROP TABLE IF EXISTS #_flag_Adj
SELECT *, 
       CASE 
         WHEN ar_charges &gt; 0 
              AND ( ar_contractual_adj &gt; 0 
                     OR ar_bad_debt_adj &gt; 0 ) THEN 1 
         ELSE 2 
       END Flag_Adjudicated 
INTO   #_flag_adj 
FROM   #not_allowed_base_allowed_amount_d 




DROP TABLE IF EXISTS #_master2
select  distinct
 m1.*,isnull(CPT_Modifier_Code_Initial,0)CPT_Modifier_Code_Initial,allowed_initial,Flag_Allowed, Flag_Adjudicated 
into #_master2
from
#_master1 m1
left join #_flag_allow fal
on m1.uniquenum = fal.uniquenum 
and m1.practice_code = fal.practice_code
and  m1.acct_unit =  fal.acct_unit
left join #_flag_Adj fad
on m1.uniquenum = fad.uniquenum 
and m1.service_date = fad.service_date
and m1.practice_code = fad.practice_code
and  m1.acct_unit =  fad.acct_unit


-- Final Output

DROP TABLE IF EXISTS #_master3
Select
--practice2,
--acct_unit,
----service_date,
--practice_code,
--UniqueNum,
sum( allowed ) as allowed,
sum( allowed_payer ) as allowed_payer,
sum( AR_Bad_Debt_Adj ) as AR_Bad_Debt_Adj,
sum( CA_Provision ) as CA_Provision,
sum( AR_Charges ) as AR_Charges,
sum( AR_Contractual_Adj ) as AR_Contractual_Adj,
sum(case                
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and Allowed_Payer = 0 and Allowed != 0 then iif(Allowed - AR_Patient_Payments &lt; 0,0,Allowed - AR_Patient_Payments)
else 0
end) AR_Inferred_Avoidable_Adjustment,
sum(case
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and AR_Patient_Payments = 0 and Allowed_Payer = 0 then 0
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt; 0 and Allowed_Payer = 0 then AR_Patient_Payments
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt;= 0 and Allowed_Payer &gt; Allowed then iif((Allowed_Payer - AR_Ins_Payments) &lt; 0,0,(Allowed_Payer - AR_Ins_Payments))
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt;= 0 and Allowed_Payer &lt;= Allowed then iif((Allowed - AR_Ins_Payments) &lt; 0,0,(Allowed - AR_Ins_Payments))
	when Flag_Allowed = 1 and Flag_Adjudicated = 2 and AR_Patient_Payments &gt; 0 then AR_Patient_Payments
	when Flag_Allowed = 1 and AR_Patient_Payments &lt; 0 then 0
	when Flag_Allowed = 2 then 0
		else round(AR_Patient_Payments,2)
end) AR_Inferred_Pat_Pymt_From_BDA,
sum( AR_Ins_Payments ) as AR_Ins_Payments,
sum( AR_Other_Adj ) as AR_Other_Adj,
sum(case when 
(case
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and AR_Patient_Payments = 0 and Allowed_Payer = 0 then 0
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt; 0 and Allowed_Payer = 0 then AR_Patient_Payments
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt;= 0 and Allowed_Payer &gt; Allowed then iif((Allowed_Payer - AR_Ins_Payments) &lt; 0,0,(Allowed_Payer - AR_Ins_Payments))
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt;= 0 and Allowed_Payer &lt;= Allowed then iif((Allowed - AR_Ins_Payments) &lt; 0,0,(Allowed - AR_Ins_Payments))
	when Flag_Allowed = 1 and Flag_Adjudicated = 2 and AR_Patient_Payments &gt; 0 then AR_Patient_Payments
	when Flag_Allowed = 1 and AR_Patient_Payments &lt; 0 then 0
	when Flag_Allowed = 2 then 0
		else round(AR_Patient_Payments,2)
end)
 &gt; 0 then 1 else 0 end) Pat_Pymt_Count,
sum( AR_Patient_Payments ) as AR_Patient_Payments,
 sum( AR_Payments ) as AR_Payments,
 sum( AR_Units ) as AR_Units
--,CPT_Modifier_Code_Initial,
----allowed_initial,
--Flag_Allowed,
--Flag_Adjudicated
 into #_master3
FROM  #_master2
--where acct_unit = &apos;64200212999&apos;
--group by 
--practice2
--acct_unit
--,service_date
--,practice_code
--,UniqueNum
--,CPT_Modifier_Code_Initial
--,allowed_initial
--,Flag_Allowed
--,Flag_Adjudicated



select distinct
--zD.Division_,
--zD.ZANSRPT_LV1,
--zD.ZANSRPT_LV2,
--zD.PRACTYPE,
--zd.practice2,
m3.*
 from #_master3 m3
--left join #z_dims zd on m3.practice2 = zd.practice2
--on m3.acct_unit = zd.acct_unit
----where m3.acct_unit = &apos;25090103999&apos;
----where uniquenum = &apos;13032981&apos;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">test_1</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">BodyData</stringProp>
            <stringProp name="RegexExtractor.regex">[\s\S]+</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">test_1 = vars.getObject(&quot;test_1&quot;)
result = new StringBuilder()

def randomRow = test_1.get(org.apache.commons.lang3.RandomUtils.nextInt(0,test_1.size()))

randomRow.each { k, v -&gt; 
    result.append(&quot;${k}&quot;).append(&quot;,&quot;)
}
result.append(System.getProperty(&quot;line.separator&quot;))

for (Object row : test_1 ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(&quot;test1.csv&quot;), result.toString(), &quot;UTF-8&quot;)</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
          <stringProp name="FileSaver.filename"></stringProp>
          <boolProp name="FileSaver.errorsonly">false</boolProp>
          <boolProp name="FileSaver.successonly">false</boolProp>
          <boolProp name="FileSaver.skipsuffix">false</boolProp>
          <boolProp name="FileSaver.skipautonumber">false</boolProp>
        </ResultSaver>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>false</timestamp>
              <success>false</success>
              <label>false</label>
              <code>false</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Azure to SQL" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">C:/Users/AABrar/Desktop/test.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">database</stringProp>
        </CSVDataSet>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </LoopController>
        <hashTree/>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="false">
          <stringProp name="ForeachController.inputVal"></stringProp>
          <stringProp name="ForeachController.returnVal">database_1</stringProp>
          <boolProp name="ForeachController.useSeparator">false</boolProp>
          <stringProp name="ForeachController.startIndex">database</stringProp>
        </ForeachController>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="false">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${database}&quot; != &quot;&lt;EOF&gt;&quot;,)}</stringProp>
        </WhileController>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">500000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">test_pool</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://azprsvratsqlsvr01t.database.windows.net;DatabaseName=reserve_rate_reporting;authentication=ActiveDirectoryPassword</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Vinayaka420%</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">Amrinder_Brar@mednax.com</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - 1" enabled="true">
          <stringProp name="dataSource">test_pool</stringProp>
          <stringProp name="query">/****** Script for SelectTopNRows command from SSMS  ******/
SELECT TOP (1000) [fyyear]
      ,[qtr]
      ,[qtr_name]
      ,[period]
      ,[period_name]
      ,[first_of_month]
      ,[month_end]
      ,[first_of_month_prior3]
      ,[first_of_month_prior6]
      ,[month_end_prior6]
      ,[first_of_month_prior12]
      ,[days_in_month]
      ,[periodkey]
      ,[Days_In_Last_3_Months]
  FROM [dbo].[dimPeriods]</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">test_5</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">BodyData</stringProp>
            <stringProp name="RegexExtractor.regex">[\s\S]+</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">test_5 = vars.getObject(&quot;test_5&quot;)
result = new StringBuilder()

def randomRow = test_5.get(org.apache.commons.lang3.RandomUtils.nextInt(0,test_5.size()))

randomRow.each { k, v -&gt; 
    result.append(&quot;${k}&quot;).append(&quot;,&quot;)
}
result.append(System.getProperty(&quot;line.separator&quot;))

for (Object row : test_5 ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(&quot;AzuretoSQL1.csv&quot;), result.toString(), &quot;UTF-8&quot;)</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">test_5 = vars.getObject(&quot;test_5&quot;)
result = new StringBuilder()

for (Object row : test_5 ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(&quot;test3.csv&quot;), result.toString(), &quot;UTF-8&quot;)</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">test_pool2</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://cofindwdb01t;DatabaseName=acct_datamart;integratedSecurity=true;authenticationScheme=JavaKerberos</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Vinayaka420%</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">AABrar</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - 2" enabled="true">
          <stringProp name="dataSource">test_pool2</stringProp>
          <stringProp name="query">/****** Script for SelectTopNRows command from SSMS  ******/
SELECT TOP (1000) [fyyear]
      ,[qtr]
      ,[qtr_name]
      ,[period]
      ,[period_name]
      ,[first_of_month]
      ,[month_end]
      ,[first_of_month_prior3]
      ,[first_of_month_prior6]
      ,[month_end_prior6]
      ,[first_of_month_prior12]
      ,[days_in_month]
      ,[periodkey]
      ,[Days_In_Last_3_Months]
  FROM [acct_datamart].[dbo].[dimPeriods]</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">test_3</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="269430394">${BodyData}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>false</latency>
                <timestamp>false</timestamp>
                <success>false</success>
                <label>false</label>
                <code>false</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">test_3 = vars.getObject(&quot;test_3&quot;)
result = new StringBuilder()

def randomRow = test_3.get(org.apache.commons.lang3.RandomUtils.nextInt(0,test_3.size()))

randomRow.each { k, v -&gt; 
    result.append(&quot;${k}&quot;).append(&quot;,&quot;)
}
result.append(System.getProperty(&quot;line.separator&quot;))

for (Object row : test_3 ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(&quot;AzuretoSQL2.csv&quot;), result.toString(), &quot;UTF-8&quot;)




</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import org.apache.jmeter.assertions.AssertionResult;

AssertionResult[] results = prev.getAssertionResults();
StringBuilder body = new StringBuilder();
for (AssertionResult result : results) {
    body.append(result.getFailureMessage());
    body.append(System.getProperty(&quot;line.separator&quot;));
}
vars.put(&quot;body&quot;, body.toString());</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <SmtpSampler guiclass="SmtpSamplerGui" testclass="SmtpSampler" testname="SMTP Sampler" enabled="true">
          <stringProp name="SMTPSampler.server">smtp.office365.com</stringProp>
          <stringProp name="SMTPSampler.serverPort">587</stringProp>
          <stringProp name="SMTPSampler.mailFrom">amrinder_brar@mednax.com</stringProp>
          <stringProp name="SMTPSampler.replyTo"></stringProp>
          <stringProp name="SMTPSampler.receiverTo">amrinder_brar@mednax.com</stringProp>
          <stringProp name="SMTPSampler.receiverCC"></stringProp>
          <stringProp name="SMTPSampler.receiverBCC"></stringProp>
          <stringProp name="SMTPSampler.subject">Hi there</stringProp>
          <stringProp name="SMTPSampler.suppressSubject">false</stringProp>
          <stringProp name="SMTPSampler.include_timestamp">false</stringProp>
          <stringProp name="SMTPSampler.message">${body}</stringProp>
          <stringProp name="SMTPSampler.plainBody">false</stringProp>
          <stringProp name="SMTPSampler.attachFile"></stringProp>
          <stringProp name="SMTPSampler.useSSL">false</stringProp>
          <stringProp name="SMTPSampler.useStartTLS">true</stringProp>
          <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
          <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
          <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
          <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          <stringProp name="SMTPSampler.tlsProtocols"></stringProp>
          <boolProp name="SMTPSampler.use_eml">false</boolProp>
          <stringProp name="SMTPSampler.emlMessageToSend"></stringProp>
          <stringProp name="SMTPSampler.useAuth">true</stringProp>
          <stringProp name="SMTPSampler.password">Vinayaka420%</stringProp>
          <stringProp name="SMTPSampler.username">Amrinder_Brar@mednax.com</stringProp>
          <stringProp name="SMTPSampler.messageSizeStatistics">false</stringProp>
          <stringProp name="SMTPSampler.enableDebug">false</stringProp>
          <collectionProp name="SMTPSampler.headerFields"/>
        </SmtpSampler>
        <hashTree/>
        <SmtpSampler guiclass="SmtpSamplerGui" testclass="SmtpSampler" testname="SMTP Sampler" enabled="false">
          <stringProp name="SMTPSampler.server">smtp.googlemail.com</stringProp>
          <stringProp name="SMTPSampler.serverPort">587</stringProp>
          <stringProp name="SMTPSampler.mailFrom">amrinder456@gmail.com</stringProp>
          <stringProp name="SMTPSampler.replyTo"></stringProp>
          <stringProp name="SMTPSampler.receiverTo">amrinder456@gmail.com;amrinder_brar@mednax.com</stringProp>
          <stringProp name="SMTPSampler.receiverCC"></stringProp>
          <stringProp name="SMTPSampler.receiverBCC"></stringProp>
          <stringProp name="SMTPSampler.subject">Hi there</stringProp>
          <stringProp name="SMTPSampler.suppressSubject">false</stringProp>
          <stringProp name="SMTPSampler.include_timestamp">false</stringProp>
          <stringProp name="SMTPSampler.message">${body}</stringProp>
          <stringProp name="SMTPSampler.plainBody">false</stringProp>
          <stringProp name="SMTPSampler.attachFile"></stringProp>
          <stringProp name="SMTPSampler.useSSL">false</stringProp>
          <stringProp name="SMTPSampler.useStartTLS">true</stringProp>
          <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
          <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
          <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
          <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          <stringProp name="SMTPSampler.tlsProtocols"></stringProp>
          <boolProp name="SMTPSampler.use_eml">false</boolProp>
          <stringProp name="SMTPSampler.emlMessageToSend"></stringProp>
          <stringProp name="SMTPSampler.useAuth">true</stringProp>
          <stringProp name="SMTPSampler.password">Vinayaka786</stringProp>
          <stringProp name="SMTPSampler.username">amrinder456@gmail.com</stringProp>
          <stringProp name="SMTPSampler.messageSizeStatistics">false</stringProp>
          <stringProp name="SMTPSampler.enableDebug">false</stringProp>
          <collectionProp name="SMTPSampler.headerFields"/>
        </SmtpSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">C:\Users\AABrar\Desktop\Script1.ps1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Allowed</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)&lt;.Value&gt;.FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;1&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Allowed_Payer</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;1&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;2&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Bad_Debt_ADJ</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;2&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;3&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CA Provision</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;3&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;4&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Charges</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;4&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;5&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">AR_Contractual_Adj</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;5&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;6&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Inferred_Avoidable_Adjustment</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;6&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;7&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Inferred_Pat_Pymt_From_BDA</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;7&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;8&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Ins_Payments</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;8&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;9&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Other_Adj</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;9&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;10&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Pat_Pymt Count</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;10&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;11&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$2$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Patient_Payments</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;11&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;12&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Payments</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;12&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;13&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Units</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;13&quot;&gt;&lt;Value xsi:type=&quot;xsd:double&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>false</timestamp>
              <success>false</success>
              <label>false</label>
              <code>false</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
            </value>
          </objProp>
          <stringProp name="filename">C:\Users\AABrar\Desktop\JMeter\apache-jmeter-5.2.1\bin\Cube2.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">test_pool</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://azprsvratsqlsvr01d.database.windows.net;DatabaseName=reserve_rate_reporting;authentication=ActiveDirectoryPassword</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Vinayaka420$</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">Amrinder_Brar@mednax.com</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - 1" enabled="true">
          <stringProp name="dataSource">test_pool</stringProp>
          <stringProp name="query">--DECLARE 
--@Ser_Date_yr int,
--@Ser_Date_mnt int,
--@div NVARCHAR(MAX),
--@om_div NVARCHAR(MAX),
--@om_reg NVARCHAR(MAX),
--@practype NVARCHAR(MAX),
--@prac NVARCHAR(MAX),
--@acct_unit NVARCHAR(MAX);


---- Initialize the variable
--SET @Ser_Date_yr = 2019				-- see line 83
--SET @Ser_Date_mnt = 11			    -- see line 84
--SET @div = &apos;PEDIATRIX&apos;				-- see line 103,153
--SET @om_div = &apos;EASTERN&apos;				-- see line 104,154
--SET @om_reg = &apos;NORTH&apos;					-- see line 105,155
--SET @practype = &apos;PERINATOLOGY&apos;				-- see line 106,156
--SET @prac = (&apos;GREATER NASHVILLE MFM PRAC,ROCKVILLE MFM PRACTICE&apos;)		-- see line 107,157
--SET @acct_unit = (&apos;44070301999&apos;)	-- see line 108,158


DROP TABLE IF EXISTS #z_dims
	select d.*
	into #z_dims
	from (
	   select distinct d.acct_unit,
	   max(d.period_id) m_pid 
	 --  max(d.dimallattrib_key) m_did
	   from [dbo].[Charge_Financial_Details] c
	   INNER JOIN 
	   dimallattrib d 
               ON c.dimallattrib_key = d.dimallattrib_key 
	--where c.charge_number = &apos;13032981&apos;
	--where billing_details_id = &apos;93849104&apos;
				   group by d.acct_unit
			)a
			 INNER JOIN 
			 dimallattrib d 
               ON a.acct_unit = d.acct_unit 
			   and m_pid = d.period_id
		--	   and m_did  = d.dimallattrib_key 



SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #Not_Allowed_base_allowed
SELECT Rtrim(zd.practice2)    practice2, 
cfd.acct_unit,
       CASE 
         WHEN division_id = 2 
              AND visitcharges_id IS NOT NULL THEN visitcharges_id 
         WHEN division_id = 1 
              AND ar_type_id = 1 THEN Ltrim(Rtrim(Str(charge_number))) 
         WHEN division_id = 1 
              AND ar_type_id = 2 
              AND source_system_id &lt;&gt; 2 THEN Ltrim( 
         Rtrim(Str(billing_details_id))) 
         WHEN ar_type_id = 2 
              AND source_system_id = 2 THEN 
         Ltrim(Rtrim(Str(Isnull(billing_details_id, 
         0)))) 
         + Isnull(cpt_modifier_code, &apos;00&apos;) 
         + Ltrim(Rtrim((Isnull(procedure_code, 0)))) 
         + Ltrim(Rtrim((Isnull(provider_code, 0)))) 
         + CONVERT(VARCHAR, service_date, 101) 
       END  uniquenum, 
       cfd.visitcharges_id, 
       cfd.charge_number, 
       cfd.billing_details_id, 
       cfd.procedure_code, 
       service_date          Actual_Service_Date, 
       Eomonth(service_date) service_date, 
       cfd.accounting_period, 
       pm.archive_period, 
       cfd.ar_units, 
       Isnull(cfd.allowed, 0)Allowed, 
       cfd.practice_code, 
       cfd.dimallattrib_key, 
       cfd.source_system_id, 
       CFD.ar_type_id, 
       cfd.cpt_modifier_code, 
       cfd.charge_financial_detail_id, 
       cfd.payer_financial_class_key, 
       CFD.ar_charges, 
       CFD.ca_provision, 
       CFD.ar_payments, 
       CFD.ar_patient_payments, 
       CFD.ar_contractual_adj, 
       CFD.ar_bad_debt_adj, 
       CFD.ar_other_adj 
INTO   #not_allowed_base_allowed 
FROM   charge_financial_details cfd 
       INNER JOIN period_master pm 
               ON cfd.period_id = pm.period_id 
       INNER JOIN dimallattrib d 
               ON cfd.dimallattrib_key = d.dimallattrib_key 
			   Inner Join #z_dims zd
			   on d.acct_unit = zd.acct_unit
WHERE  
       Year(cfd.service_date) &gt;= &apos;2016&apos; -- keep static
  --     AND Year(cfd.service_date) &lt;= Year(Getdate()) 
         and cfd.dimallattrib_key IS NOT NULL 

	   -- FILTER OPTIONS APPLIED HERE --

	    and Year(cfd.service_date) = &apos;2019&apos; --@Ser_Date_yr
		and ar_type_id = &apos;1&apos;
  --    and month(cfd.service_date) = &apos;11&apos; --@Ser_Date_mnt

--and zD.Division_ in (&apos;PEDIATRIX&apos;)-- (SELECT Value FROM STRING_SPLIT(@Div, &apos;,&apos;))
--and zD.Region in
   and zD.ZANSRPT_LV1  in (&apos;WESTERN&apos;)-- (SELECT Value FROM STRING_SPLIT(@OM_Div, &apos;,&apos;))
--	and zD.ZANSRPT_LV2 in (&apos;MIDWEST&apos;) --(SELECT Value FROM STRING_SPLIT(@OM_Reg, &apos;,&apos;))
--	and zD.PRACTYPE in (&apos;HEARING SCREEN&apos;) -- (SELECT Value FROM STRING_SPLIT(@PRACTYPE, &apos;,&apos;))
--and zD.PRACTICE2  like  (&apos;EXCELA WESTMORELAND HS PRAC&apos;) -- (SELECT Value FROM STRING_SPLIT(@Prac, &apos;,&apos;))
--and cfd.acct_unit = &apos;25090103999&apos; -- (SELECT Value FROM STRING_SPLIT(@acct_unit, &apos;,&apos;))
--	   and CASE 
--         WHEN division_id = 2 
--              AND visitcharges_id IS NOT NULL THEN visitcharges_id 
--         WHEN division_id = 1 
--              AND ar_type_id = 1 THEN Ltrim(Rtrim(Str(charge_number))) 
--         WHEN division_id = 1 
--              AND ar_type_id = 2 
--              AND source_system_id &lt;&gt; 2 THEN Ltrim( 
--         Rtrim(Str(billing_details_id))) 
--         WHEN ar_type_id = 2 
--              AND source_system_id = 2 THEN 
--         Ltrim(Rtrim(Str(Isnull(billing_details_id, 
--         0)))) 
--         + Isnull(cpt_modifier_code, &apos;00&apos;) 
--         + Ltrim(Rtrim((Isnull(procedure_code, 0)))) 
--         + Ltrim(Rtrim((Isnull(provider_code, 0)))) 
--         + CONVERT(VARCHAR, service_date, 101) 
--      END  in (
--&apos;2019120501560555400121382B76BC&apos;
--	  ) --&apos;93849104&apos;,&apos;17506869&apos;)




-- CFD2 START
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #cfd
SELECT Rtrim(zd.practice2)    practice2, 
cfd.acct_unit,
       CASE 
         WHEN division_id = 2 
              AND visitcharges_id IS NOT NULL THEN visitcharges_id 
         WHEN division_id = 1 
              AND ar_type_id = 1 THEN Ltrim(Rtrim(Str(charge_number))) 
         WHEN division_id = 1 
              AND ar_type_id = 2 
              AND source_system_id &lt;&gt; 2 THEN Ltrim( 
         Rtrim(Str(billing_details_id))) 
         WHEN ar_type_id = 2 
              AND source_system_id = 2 THEN 
         Ltrim(Rtrim(Str(Isnull(billing_details_id, 
         0)))) 
         + Isnull(cpt_modifier_code, &apos;00&apos;) 
         + Ltrim(Rtrim((Isnull(procedure_code, 0)))) 
         + Ltrim(Rtrim((Isnull(provider_code, 0)))) 
         + CONVERT(VARCHAR, service_date, 101) 
       END  uniquenum, 
       Eomonth(service_date) service_date, 
       cfd.accounting_period, 
       pm.archive_period, 
       cfd.ar_units, 
       Isnull(cfd.allowed, 0)Allowed, 
       cfd.practice_code, 
       CFD.ar_charges,     
       CFD.ar_contractual_adj, 
       CFD.ar_bad_debt_adj,
	   cpt_modifier_code,
	   charge_financial_detail_id,
	   cfd.dimallattrib_key dimkey,
	   zd.dimallattrib_key 
INTO   #cfd 
FROM   charge_financial_details cfd 
       INNER JOIN period_master pm 
               ON cfd.period_id = pm.period_id 
       INNER JOIN dimallattrib d 
               ON cfd.dimallattrib_key = d.dimallattrib_key 
			   Inner Join #z_dims zd
			   on d.acct_unit = zd.acct_unit
WHERE  
        Year(cfd.service_date) &gt;= 2016 
        AND Year(cfd.service_date) &lt;= Year(Getdate()) 
        and cfd.dimallattrib_key IS NOT NULL 


--and zD.Division_ in (&apos;PEDIATRIX&apos;)-- (SELECT Value FROM STRING_SPLIT(@Div, &apos;,&apos;))
  and zD.ZANSRPT_LV1  in (&apos;WESTERN&apos;)-- (SELECT Value FROM STRING_SPLIT(@OM_Div, &apos;,&apos;))
	--and zD.ZANSRPT_LV2 in (&apos;MOUNTAIN WEST&apos;) --(SELECT Value FROM STRING_SPLIT(@OM_Reg, &apos;,&apos;))
		--and zD.PRACTYPE in (&apos;PERINATOLOGY&apos;) -- (SELECT Value FROM STRING_SPLIT(@PRACTYPE, &apos;,&apos;))
--and zD.Division_ in (&apos;PEDIATRIX&apos;)-- (SELECT Value FROM STRING_SPLIT(@Div, &apos;,&apos;))
--   and zD.ZANSRPT_LV1  in (&apos;EASTERN&apos;)-- (SELECT Value FROM STRING_SPLIT(@OM_Div, &apos;,&apos;))
--and zD.ZANSRPT_LV2 in (&apos;MIDWEST&apos;) --(SELECT Value FROM STRING_SPLIT(@OM_Reg, &apos;,&apos;))
--	and zD.PRACTYPE in (&apos;HEARING SCREEN&apos;) -- (SELECT Value FROM STRING_SPLIT(@PRACTYPE, &apos;,&apos;))
--and zD.PRACTICE2  like  (&apos;EXCELA WESTMORELAND HS PRAC&apos;) -- (SELECT Value FROM STRING_SPLIT(@Prac, &apos;,&apos;))
--and zD.PRACTICE2  like  (&apos;DENVER CARDIOLOGY PRACTICE%&apos;) -- (SELECT Value FROM STRING_SPLIT(@Prac, &apos;,&apos;))
--and cfd.acct_unit = &apos;32040571999&apos; -- (SELECT Value FROM STRING_SPLIT(@acct_unit, &apos;,&apos;))
--	   and CASE 
--         WHEN division_id = 2 
--              AND visitcharges_id IS NOT NULL THEN visitcharges_id 
--         WHEN division_id = 1 
--              AND ar_type_id = 1 THEN Ltrim(Rtrim(Str(charge_number))) 
--         WHEN division_id = 1 
--              AND ar_type_id = 2 
--              AND source_system_id &lt;&gt; 2 THEN Ltrim( 
--         Rtrim(Str(billing_details_id))) 
--         WHEN ar_type_id = 2 
--              AND source_system_id = 2 THEN 
--         Ltrim(Rtrim(Str(Isnull(billing_details_id, 
--         0)))) 
--         + Isnull(cpt_modifier_code, &apos;00&apos;) 
--         + Ltrim(Rtrim((Isnull(procedure_code, 0)))) 
--         + Ltrim(Rtrim((Isnull(provider_code, 0)))) 
--         + CONVERT(VARCHAR, service_date, 101) 
--      END  in (
--&apos;2019120501560555400121382B76BC&apos;
--	  ) --&apos;93849104&apos;,&apos;17506869&apos;)







	   
-- CFD2 END

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #Not_Allowed_get_min_period
SELECT --cfd.practice2, 
       cfd.uniquenum, 
       cfd.practice_code, 
       cfd.cpt_modifier_code, 
     --  payer_financial_class_key, 
       Min(cfd.archive_period) archive_PERIOD
	--   zd.acct_unit	 
INTO   #not_allowed_get_min_period 
--FROM   #not_allowed_base_allowed  -- changed 1/29
FROM #cfd cfd
inner join #z_dims zd
on cfd.acct_unit = zd.acct_unit
GROUP  BY cfd.uniquenum, 
        cfd.practice_code, 
        --  cfd.practice2, 
          cfd.cpt_modifier_code
	--	  zd.acct_unit

		  

 drop table if exists #zach_getdims
	  select --a.*,	  
	  a.uniquenum,
	  a.practice_code,
      a.cpt_modifier_code,
      max(a.archive_PERIOD) archive_PERIOD,
      b.dimallattrib_key
	  into #zach_getdims
	  from #Not_Allowed_get_min_period a
	  inner join 
	  	(  select uniquenum,practice_code, max(dimallattrib_key) dimallattrib_key from #Not_Allowed_base_allowed 
	   -- where uniquenum = &apos;17430777&apos;
		group by uniquenum, practice_code)b
		on a.uniquenum = b.uniquenum
		and a.practice_code = b.practice_code
		group by 
		a.uniquenum,
	    a.practice_code,
        a.cpt_modifier_code,    
        b.dimallattrib_key

drop table if exists #zach_getdims2
select zd.*,d.practice2,d.acct_unit 
into #zach_getdims2
from #zach_getdims zd
       INNER JOIN dimallattrib d 
               ON zd.dimallattrib_key = d.dimallattrib_key 




SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
 drop table if exists #Not_Allowed_GETMIN_A

SELECT DISTINCT T.uniquenum, 
				--t.practice2,
				t.acct_unit,
                t.practice_code, 
                t.archive_period, 
                 mi.allowed                   Allowed_Initial, 
			   
                mi.cpt_modifier_code         CPT_Modifier_Code_Initial, 
                mi.payer_financial_class_key Payer_Financial_Class_Key_Initial 
INTO   #not_allowed_getmin_a 
FROM    #zach_getdims2 t 
       OUTER apply(SELECT c.payer_code,                     
                          c.contract_key, 
                          c.payer_financial_class_key, 
                          c.acct_unit, 
                          c.allowed, 
                          c.procedure_code, 
                          c.cpt_modifier_code,
						  t.dimallattrib_key							
           --        FROM   #not_allowed_base_allowed p   --changed 1/29
				   FROM #cfd p
                          INNER JOIN dbo.charge_financial_details c 
                                  ON p.charge_financial_detail_id = 
                                     c.charge_financial_detail_id 
						--Inner Join	 #Not_Allowed_get_min_period m
						--on p.uniquenum = m.uniquenum 
						--and p.practice_code = m.practice_code
						--and p.archive_period = m.archive_period
						--and p.acct_unit = m.acct_unit
                          LEFT JOIN dbo.period_master pm 
                                 ON pm.period_id = c.period_id                  
                   WHERE  c.practice_code = t.practice_code                 
                          AND p.uniquenum = t.uniquenum 
                          AND p.practice_code = t.practice_code 
                          AND p.archive_period = t.archive_period
					--	  AND p.dimkey = t.dimallattrib_key--_Min 					
                  ) mi 






SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #Not_Allowed_GETMIN_B

SELECT A.uniquenum, 
  --    a.practice2,
       A.practice_code, 
	   a.acct_unit,
       A.archive_period, 
       A.allowed_initial, 
       A.cpt_modifier_code_initial, 
       a.payer_financial_class_key_initial 
INTO   #not_allowed_getmin_b 
FROM   #not_allowed_getmin_a A 
       INNER JOIN (SELECT A.uniquenum, 
	   a.acct_unit,
                          A.practice_code, 
                          Min(A.archive_period)ARCHIVE_PERIOD 
                   FROM   #not_allowed_getmin_a A 
                   GROUP  BY A.uniquenum, 
                             A.practice_code,
							  a.acct_unit) B 
               ON A.uniquenum = B.uniquenum 
                  AND A.practice_code = B.practice_code 
                  AND A.archive_period = B.archive_period 
				  and  a.acct_unit = b.acct_unit
 


SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #Not_Allowed_base_allowed_a
SELECT a.* 
INTO   #not_allowed_base_allowed_a 
FROM   #not_allowed_base_allowed a 
       INNER JOIN #zach_getdims2 m 
               ON a.uniquenum = m.uniquenum 
                  AND a.practice_code = m.practice_code 
               --   AND a.archive_period = m.archive_period 
				  and a.acct_unit = m.acct_unit




drop table if exists #Not_Allowed_base_allowed_amount_A
SELECT A.practice2, 
a.acct_unit,
       A.uniquenum, 
       A.practice_code, 
       A.service_date, 
       a.accounting_period, 
       a.archive_period, 
       Sum(CASE 
             WHEN Round(A.ar_units, 0) &gt;= 1 THEN COALESCE(B.allowed_initial, 0) 
             WHEN Round(A.ar_units, 0) &lt;= -1 
                  AND A.source_system_id = 2 THEN COALESCE(B.allowed_initial, 
                                                  ( Isnull(a.allowed, 0) )) 
             WHEN Round(A.ar_units, 0) &lt;= -1 
                  AND A.source_system_id = 1 THEN COALESCE(B.allowed_initial, 
                                                  ( Isnull(a.allowed, 0) )) *- 1 
             ELSE 0 
           END) Allowed 
INTO   #not_allowed_base_allowed_amount_a 
FROM   
--#not_allowed_base_allowed A 
 #not_allowed_base_allowed_a A
       LEFT JOIN #not_allowed_getmin_b B 
              ON A.uniquenum = B.uniquenum 
                 AND A.practice_code = B.practice_code 
                 AND Isnull(A.cpt_modifier_code, 0) = 
                     Isnull(B.cpt_modifier_code_initial, 0) 
                 AND Isnull(A.payer_financial_class_key, 0) = 
                     Isnull(B.payer_financial_class_key_initial, 0) 
					 
GROUP  BY A.practice2, 
          A.uniquenum, 
          A.service_date, 
          A.practice_code, 
          a.accounting_period, 
          a.archive_period,
		  a.acct_unit



drop table if exists #Not_Allowed_base_allowed_amount_b
SELECT practice2, 
acct_unit,
       service_date, 
       accounting_period, 
       archive_period, 
	   uniquenum,
	   practice_code,
       Sum(z.ar_charges)         AR_Charges, 
       Sum(z.ca_provision)       CA_Provision, 
       Sum(z.ar_payments)        AR_Payments, 
       Sum(z.ar_patient_payments)AR_Patient_Payments, 
       Sum(z.ar_contractual_adj) AR_Contractual_Adj, 
       Sum(z.ar_bad_debt_adj)    AR_Bad_Debt_Adj, 
       Sum(z.ar_other_adj)       AR_Other_Adj, 
	   Sum(z.ar_units)			 AR_Units,
       Sum(z.allowed)            ALLOWED 
INTO   #not_allowed_base_allowed_amount_b 
FROM   (SELECT b.practice2, 
b.acct_unit,
               b.uniquenum, 
               b.practice_code,
               B.service_date, 
               a.accounting_period, 
               a.archive_period, 
               Sum(b.ar_charges)         AR_Charges, 
               Sum(b.ca_provision)       CA_Provision, 
               Sum(b.ar_payments)        AR_Payments, 
               Sum(b.ar_patient_payments)AR_Patient_Payments, 
               Sum(b.ar_contractual_adj) AR_Contractual_Adj, 
               Sum(b.ar_bad_debt_adj)    AR_Bad_Debt_Adj, 
               Sum(b.ar_other_adj)       AR_Other_Adj, 
			   Sum(b.ar_units) AR_Units, -- zach added
               a.allowed 
        FROM   #not_allowed_base_allowed B 
               LEFT JOIN (SELECT a.practice2, 
			   a.acct_unit,
                                 a.practice_code, 
                                 a.uniquenum, 
                                 a.archive_period, 
                                 a.accounting_period, 
                                 Sum(A.allowed)Allowed 
                          FROM   #not_allowed_base_allowed_amount_a A 
                          GROUP  BY a.practice2, 
						  a.acct_unit,
                                    a.practice_code, 
                                    a.uniquenum, 
                                    A.allowed, 
                                    a.archive_period, 
                                    a.accounting_period)A 
                      ON a.uniquenum = b.uniquenum 
                         AND a.practice_code = b.practice_code 
                         AND a.practice2 = b.practice2 
                         AND a.accounting_period = b.accounting_period 
                         AND a.archive_period = b.archive_period 
						 AND a.acct_unit = b.acct_unit
        GROUP  BY b.practice2, 
		b.acct_unit,
                  b.uniquenum, 
                  b.practice_code, 
                  a.allowed, 
                  B.service_date, 
                  a.accounting_period, 
                  a.archive_period)z 
GROUP  BY z.practice2, 
acct_unit,
          z.accounting_period, 
          z.archive_period, 
          z.service_date,
		  z.uniquenum,
		  practice_code




drop table if exists #Not_Allowed_base_allowed_amount_C
SELECT practice2, 
acct_unit,
       accounting_period, 
       archive_period, 
       service_date, 
	   uniquenum,
	   practice_code,
       Sum(ar_charges)         AR_Charges, 
       Sum(ca_provision)       CA_Provision, 
       Sum(ar_payments)        AR_Payments, 
       Sum(ar_patient_payments)AR_Patient_Payments, 
       Sum(ar_contractual_adj) AR_Contractual_Adj, 
       Sum(ar_bad_debt_adj)    AR_Bad_Debt_Adj, 
       Sum(ar_other_adj)       AR_Other_Adj,
	   Sum(ar_units)		   AR_units -- zach added
INTO   #not_allowed_base_allowed_amount_c 
FROM   #not_allowed_base_allowed_amount_b 
GROUP  BY practice2, 
          accounting_period, 
          archive_period, 
          service_date,
		  uniquenum,
		  practice_code,
		  acct_unit




drop table if exists #Not_Allowed_base_allowed_amount_D
SELECT-- b.practice2, 
b.acct_unit,
	  b.uniquenum,
	   max(service_date) service_date,
	   b.practice_code,
       Sum(ar_charges)         AR_Charges, 
       Sum(ca_provision)       CA_Provision, 
       Sum(ar_payments)        AR_Payments, 
       Sum(ar_patient_payments)AR_Patient_Payments, 
       Sum(ar_contractual_adj) AR_Contractual_Adj, 
       Sum(ar_bad_debt_adj)    AR_Bad_Debt_Adj, 
       Sum(ar_other_adj)       AR_Other_Adj  
INTO   #not_allowed_base_allowed_amount_d 
FROM   #not_allowed_base_allowed_amount_c c
 LEFT JOIN #not_allowed_getmin_b B 
              ON c.uniquenum = B.uniquenum 
                 AND c.practice_code = B.practice_code 
GROUP  BY --b.practice2,
b.uniquenum,b.practice_code,b.acct_unit--service_date






--Zach Test


SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #_Allowed_base_allowed_units_a
SELECT A.uniquenum, 
       A.practice_code, 
       a.practice2 , 
	   b.acct_unit,
       a.cpt_modifier_code, 
       ar_units, 
       a.archive_period,
	   a.service_date,
	   sum(AR_Contractual_Adj) AR_Contractual_Adj,
sum(AR_Charges)  AR_Charges
INTO   #_allowed_base_allowed_units_a
FROM   #not_allowed_base_allowed a
left join #Not_Allowed_GETMIN_B b
on A.uniquenum = b.uniquenum
and a.practice_code = b.practice_code
group by
A.uniquenum, 
       A.practice_code, 
       a.practice2 , 
	   b.acct_unit,
       a.cpt_modifier_code, 
       ar_units, 
       a.archive_period,
	   a.service_date




-- for allowed
DROP TABLE IF EXISTS #_allowed_base_allowed_amount_a 
SELECT    a.practice2, 
          a.uniquenum, 
          max(a.service_date) service_date, 
		  a.practice_code,
		  b.acct_unit,	
	--	  a.cpt_modifier_code,	
          sum( 
          CASE 
                    WHEN round(a.ar_units,0) &gt;= 1 THEN COALESCE(b.allowed_initial,0) 
                    WHEN round(a.ar_units,0) &lt;= -1 
                    AND       a.source_system_id = 2 THEN COALESCE(b.allowed_initial,0) 
                    WHEN round(a.ar_units,0) &lt;= -1 
                    AND       a.source_system_id = 1 THEN COALESCE(b.allowed_initial,0)*-1 
                    ELSE 0 
          END ) allowed 
INTO      #_allowed_base_allowed_amount_a 
FROM      #not_allowed_base_allowed a 
LEFT JOIN #Not_Allowed_GETMIN_B  b 
ON        a.uniquenum = b.uniquenum 
AND       a.practice_code = b.practice_code 
--AND       isnull(a.cpt_modifier_code,0) = isnull(b.cpt_modifier_code_initial,0) 
--And a.acct_unit = b.acct_unit
GROUP BY  a.practice2,
a.practice_code, 
          a.uniquenum,     
		  b.acct_unit
	--	  a.cpt_modifier_code
	--	  ,a.service_date
		 
--select * from		 #not_allowed_base_allowed
--select * from		 #Not_Allowed_GETMIN_B 
--select * from #_allowed_base_allowed_amount_a 


DROP TABLE IF EXISTS #_allowed_base_allowed_amount_b 
SELECT  -- practice2,
practice_code,
         uniquenum,
		 acct_unit,
         sum(allowed)allowed,
		 service_date
into #_allowed_base_allowed_amount_b 
FROM     #_allowed_base_allowed_amount_a 
GROUP BY --practice2,
practice_code,uniquenum,service_date,acct_unit
ORDER BY --practice2,
practice_code,uniquenum,service_date,acct_unit



DROP TABLE IF EXISTS #_ar_units
select 
max(service_date) service_date,
uniquenum, 
practice_code,
acct_unit,
sum(ar_units) ar_units, 
sum(AR_Contractual_Adj) AR_Contractual_Adj,
sum(AR_Charges)  AR_Charges
into #_ar_units
from  
#_Allowed_base_allowed_units_a
--#not_allowed_base_allowed 
group by 
--service_date, 
uniquenum, practice_code,acct_unit
order by --service_date, 
uniquenum, practice_code,acct_unit






DROP TABLE IF EXISTS #_allowed_payer
select 
service_date,
uniquenum, 
practice_code,
acct_unit,
ar_units,
case
              when (AR_Units) &gt; 0 and AR_Contractual_Adj != 0 then (round(AR_Charges,2) - AR_Contractual_Adj)
              when (AR_Units) &lt; 0 and AR_Contractual_Adj != 0 then (round(AR_Charges,2) - AR_Contractual_Adj)*-1
              else 0
       end Allowed_Payer
into #_allowed_payer
from #_ar_units


DROP TABLE IF EXISTS #_master1
SELECT 
	--  nal.practice2,
	  nal.acct_unit,
     nal.service_date,
	   nal.practice_code,
	   nal.UniqueNum,
       Sum(allowed)allowed,
	   Sum(allowed_payer) allowed_payer,
	   Sum(ar_charges)         AR_Charges, 
       Sum(ca_provision)       CA_Provision, 
       Sum(ar_payments)        AR_Payments, 
       Sum(ar_patient_payments)AR_Patient_Payments, 
       Sum(ar_contractual_adj) AR_Contractual_Adj, 
       Sum(ar_bad_debt_adj)    AR_Bad_Debt_Adj, 
       Sum(ar_other_adj)       AR_Other_Adj,
	   sum(AR_Payments) - sum(AR_Patient_Payments) AR_Ins_Payments,
	   sum(ar_units)		 AR_Units
	   into #_master1
 FROM #Not_Allowed_base_allowed_amount_D nal
left join #_allowed_base_allowed_amount_b al
on nal.uniquenum = al.uniquenum
and nal.practice_code = al.practice_code
and nal.service_date = al.service_date
and nal.acct_unit = al.acct_unit
left join #_allowed_payer ap
on nal.uniquenum = ap.uniquenum
and nal.service_date = ap.service_date
and isnull(nal.practice_code,0) = isnull(ap.practice_code,0)
and nal.acct_unit = ap.acct_unit
group by --nal.practice2,
nal.practice_code,nal.service_date,nal.UniqueNum,nal.acct_unit
order by --nal.practice2,
nal.practice_code,nal.service_date,nal.UniqueNum,nal.acct_unit





--select * from #Not_Allowed_base_allowed --

--select * from #Not_Allowed_get_min_period --

--select * from #Not_Allowed_GETMIN_A
--where acct_unit = &apos;15120204999&apos;
--select * from #Not_Allowed_GETMIN_B 
-- where acct_unit = &apos;15120204999&apos;
--select * from #Not_Allowed_base_allowed_a -- ok
--where acct_unit = &apos;15120204999&apos;
----select * from #Not_Allowed_base_allowed_amount_A
----where acct_unit = &apos;14090101999    &apos;

----select * from #Not_Allowed_base_allowed_amount_b -- ok
----where acct_unit = &apos;14090101999    &apos;
----select * from #Not_Allowed_base_allowed_amount_C -- ok
----where acct_unit = &apos;14090101999    &apos;
----select * from #Not_Allowed_base_allowed_amount_D -- ok
----where acct_unit = &apos;14090101999    &apos;
--select * from #_Allowed_base_allowed_units_a 
------where acct_unit = &apos;14090101999    &apos;
--select * from #_allowed_base_allowed_amount_a 
------where acct_unit = &apos;14090101999    &apos;
--select * from  #_allowed_base_allowed_amount_b 
------where acct_unit = &apos;14090101999    &apos;
--select * from #_ar_units
------where acct_unit = &apos;14090101999    &apos;
--select * from #_allowed_payer
------where acct_unit = &apos;14090101999    &apos;
----select * from #_master1 


----select * from #z_dims

----select * from #_flag_allow
------where acct_unit =&apos;15120304999&apos;
----select * from #_flag_Adj 
------where acct_unit =&apos;15120304999&apos;
------select * from #_master2
----select * from #_master3
----where acct_unit =&apos;15120304999&apos;



-- Flag Allowed
DROP TABLE IF EXISTS #_flag_allow
SELECT *, 
       CASE 
         WHEN allowed_initial IS NULL THEN 2 
         ELSE 1 
       END Flag_Allowed 
INTO   #_flag_allow 
FROM   #not_allowed_getmin_b 


-- Flag_Adjudicated
DROP TABLE IF EXISTS #_flag_Adj
SELECT *, 
       CASE 
         WHEN ar_charges &gt; 0 
              AND ( ar_contractual_adj &gt; 0 
                     OR ar_bad_debt_adj &gt; 0 ) THEN 1 
         ELSE 2 
       END Flag_Adjudicated 
INTO   #_flag_adj 
FROM   #not_allowed_base_allowed_amount_d 




DROP TABLE IF EXISTS #_master2
select  distinct
 m1.*,isnull(CPT_Modifier_Code_Initial,0)CPT_Modifier_Code_Initial,allowed_initial,Flag_Allowed, Flag_Adjudicated 
into #_master2
from
#_master1 m1
left join #_flag_allow fal
on m1.uniquenum = fal.uniquenum 
and m1.practice_code = fal.practice_code
and  m1.acct_unit =  fal.acct_unit
left join #_flag_Adj fad
on m1.uniquenum = fad.uniquenum 
and m1.service_date = fad.service_date
and m1.practice_code = fad.practice_code
and  m1.acct_unit =  fad.acct_unit


-- Final Output

DROP TABLE IF EXISTS #_master3
Select
--practice2,
--acct_unit,
----service_date,
--practice_code,
--UniqueNum,
sum( allowed ) as allowed,
sum( allowed_payer ) as allowed_payer,
sum( AR_Bad_Debt_Adj ) as AR_Bad_Debt_Adj,
sum( CA_Provision ) as CA_Provision,
sum( AR_Charges ) as AR_Charges,
sum( AR_Contractual_Adj ) as AR_Contractual_Adj,
sum(case                
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and Allowed_Payer = 0 and Allowed != 0 then iif(Allowed - AR_Patient_Payments &lt; 0,0,Allowed - AR_Patient_Payments)
else 0
end) AR_Inferred_Avoidable_Adjustment,
sum(case
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and AR_Patient_Payments = 0 and Allowed_Payer = 0 then 0
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt; 0 and Allowed_Payer = 0 then AR_Patient_Payments
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt;= 0 and Allowed_Payer &gt; Allowed then iif((Allowed_Payer - AR_Ins_Payments) &lt; 0,0,(Allowed_Payer - AR_Ins_Payments))
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt;= 0 and Allowed_Payer &lt;= Allowed then iif((Allowed - AR_Ins_Payments) &lt; 0,0,(Allowed - AR_Ins_Payments))
	when Flag_Allowed = 1 and Flag_Adjudicated = 2 and AR_Patient_Payments &gt; 0 then AR_Patient_Payments
	when Flag_Allowed = 1 and AR_Patient_Payments &lt; 0 then 0
	when Flag_Allowed = 2 then 0
		else round(AR_Patient_Payments,2)
end) AR_Inferred_Pat_Pymt_From_BDA,
sum( AR_Ins_Payments ) as AR_Ins_Payments,
sum( AR_Other_Adj ) as AR_Other_Adj,
sum(case when 
(case
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and AR_Patient_Payments = 0 and Allowed_Payer = 0 then 0
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt; 0 and Allowed_Payer = 0 then AR_Patient_Payments
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt;= 0 and Allowed_Payer &gt; Allowed then iif((Allowed_Payer - AR_Ins_Payments) &lt; 0,0,(Allowed_Payer - AR_Ins_Payments))
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt;= 0 and Allowed_Payer &lt;= Allowed then iif((Allowed - AR_Ins_Payments) &lt; 0,0,(Allowed - AR_Ins_Payments))
	when Flag_Allowed = 1 and Flag_Adjudicated = 2 and AR_Patient_Payments &gt; 0 then AR_Patient_Payments
	when Flag_Allowed = 1 and AR_Patient_Payments &lt; 0 then 0
	when Flag_Allowed = 2 then 0
		else round(AR_Patient_Payments,2)
end)
 &gt; 0 then 1 else 0 end) Pat_Pymt_Count,
sum( AR_Patient_Payments ) as AR_Patient_Payments,
 sum( AR_Payments ) as AR_Payments,
 sum( AR_Units ) as AR_Units
--,CPT_Modifier_Code_Initial,
----allowed_initial,
--Flag_Allowed,
--Flag_Adjudicated
 into #_master3
FROM  #_master2
--where acct_unit = &apos;64200212999&apos;
--group by 
--practice2
--acct_unit
--,service_date
--,practice_code
--,UniqueNum
--,CPT_Modifier_Code_Initial
--,allowed_initial
--,Flag_Allowed
--,Flag_Adjudicated



select distinct
--zD.Division_,
--zD.ZANSRPT_LV1,
--zD.ZANSRPT_LV2,
--zD.PRACTYPE,
--zd.practice2,
m3.*
 from #_master3 m3
--left join #z_dims zd on m3.practice2 = zd.practice2
--on m3.acct_unit = zd.acct_unit
----where m3.acct_unit = &apos;25090103999&apos;
----where uniquenum = &apos;13032981&apos;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">test_1</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">BodyData</stringProp>
            <stringProp name="RegexExtractor.regex">[\s\S]+</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">test_1 = vars.getObject(&quot;test_1&quot;)
result = new StringBuilder()

def randomRow = test_1.get(org.apache.commons.lang3.RandomUtils.nextInt(0,test_1.size()))

randomRow.each { k, v -&gt; 
    result.append(&quot;${k}&quot;).append(&quot;,&quot;)
}
result.append(System.getProperty(&quot;line.separator&quot;))

for (Object row : test_1 ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(&quot;test1.csv&quot;), result.toString(), &quot;UTF-8&quot;)</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler - 2" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">C:\Users\AABrar\Desktop\Script2.ps1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Allowed</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)&lt;.Value&gt;.FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;1&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Allowed_Payer</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;1&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;2&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Bad_Debt_ADJ</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;2&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;3&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CA Provision</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;3&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;4&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Charges</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;4&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;5&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">AR_Contractual_Adj</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;5&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;6&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Inferred_Avoidable_Adjustment</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;6&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;7&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Inferred_Pat_Pymt_From_BDA</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;7&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;8&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Ins_Payments</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;8&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;9&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Other_Adj</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;9&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;10&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Pat_Pymt Count</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;10&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;11&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$2$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Patient_Payments</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;11&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;12&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Payments</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;12&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;13&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Units</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;13&quot;&gt;&lt;Value xsi:type=&quot;xsd:double&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>false</timestamp>
              <success>false</success>
              <label>false</label>
              <code>false</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
            </value>
          </objProp>
          <stringProp name="filename">C:\Users\AABrar\Desktop\JMeter\apache-jmeter-5.2.1\bin\Cube3.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">test_pool</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://azprsvratsqlsvr01d.database.windows.net;DatabaseName=reserve_rate_reporting;authentication=ActiveDirectoryPassword</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Vinayaka420$</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">Amrinder_Brar@mednax.com</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - 1" enabled="true">
          <stringProp name="dataSource">test_pool</stringProp>
          <stringProp name="query">





--DECLARE 
--@Ser_Date_yr int,
--@Ser_Date_mnt int,
--@div NVARCHAR(MAX),
--@om_div NVARCHAR(MAX),
--@om_reg NVARCHAR(MAX),
--@practype NVARCHAR(MAX),
--@prac NVARCHAR(MAX),
--@acct_unit NVARCHAR(MAX);


---- Initialize the variable
--SET @Ser_Date_yr = 2019				-- see line 83
--SET @Ser_Date_mnt = 11			    -- see line 84
--SET @div = &apos;PEDIATRIX&apos;				-- see line 103,153
--SET @om_div = &apos;EASTERN&apos;				-- see line 104,154
--SET @om_reg = &apos;NORTH&apos;					-- see line 105,155
--SET @practype = &apos;PERINATOLOGY&apos;				-- see line 106,156
--SET @prac = (&apos;GREATER NASHVILLE MFM PRAC,ROCKVILLE MFM PRACTICE&apos;)		-- see line 107,157
--SET @acct_unit = (&apos;44070301999&apos;)	-- see line 108,158


DROP TABLE IF EXISTS #z_dims
	select d.*
	into #z_dims
	from (
	   select distinct d.acct_unit,
	   max(d.period_id) m_pid 
	 --  max(d.dimallattrib_key) m_did
	   from [dbo].[Charge_Financial_Details] c
	   INNER JOIN 
	   dimallattrib d 
               ON c.dimallattrib_key = d.dimallattrib_key 
	--where c.charge_number = &apos;13032981&apos;
	--where billing_details_id = &apos;93849104&apos;
				   group by d.acct_unit
			)a
			 INNER JOIN 
			 dimallattrib d 
               ON a.acct_unit = d.acct_unit 
			   and m_pid = d.period_id
		--	   and m_did  = d.dimallattrib_key 



SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #Not_Allowed_base_allowed
SELECT Rtrim(zd.practice2)    practice2, 
cfd.acct_unit,
       CASE 
         WHEN division_id = 2 
              AND visitcharges_id IS NOT NULL THEN visitcharges_id 
         WHEN division_id = 1 
              AND ar_type_id = 1 THEN Ltrim(Rtrim(Str(charge_number))) 
         WHEN division_id = 1 
              AND ar_type_id = 2 
              AND source_system_id &lt;&gt; 2 THEN Ltrim( 
         Rtrim(Str(billing_details_id))) 
         WHEN ar_type_id = 2 
              AND source_system_id = 2 THEN 
         Ltrim(Rtrim(Str(Isnull(billing_details_id, 
         0)))) 
         + Isnull(cpt_modifier_code, &apos;00&apos;) 
         + Ltrim(Rtrim((Isnull(procedure_code, 0)))) 
         + Ltrim(Rtrim((Isnull(provider_code, 0)))) 
         + CONVERT(VARCHAR, service_date, 101) 
       END  uniquenum, 
       cfd.visitcharges_id, 
       cfd.charge_number, 
       cfd.billing_details_id, 
       cfd.procedure_code, 
       service_date          Actual_Service_Date, 
       Eomonth(service_date) service_date, 
       cfd.accounting_period, 
       pm.archive_period, 
       cfd.ar_units, 
       Isnull(cfd.allowed, 0)Allowed, 
       cfd.practice_code, 
       cfd.dimallattrib_key, 
       cfd.source_system_id, 
       CFD.ar_type_id, 
       cfd.cpt_modifier_code, 
       cfd.charge_financial_detail_id, 
       cfd.payer_financial_class_key, 
       CFD.ar_charges, 
       CFD.ca_provision, 
       CFD.ar_payments, 
       CFD.ar_patient_payments, 
       CFD.ar_contractual_adj, 
       CFD.ar_bad_debt_adj, 
       CFD.ar_other_adj 
INTO   #not_allowed_base_allowed 
FROM   charge_financial_details cfd 
       INNER JOIN period_master pm 
               ON cfd.period_id = pm.period_id 
       INNER JOIN dimallattrib d 
               ON cfd.dimallattrib_key = d.dimallattrib_key 
			   Inner Join #z_dims zd
			   on d.acct_unit = zd.acct_unit
WHERE  
       Year(cfd.service_date) &gt;= &apos;2016&apos; -- keep static
  --     AND Year(cfd.service_date) &lt;= Year(Getdate()) 
         and cfd.dimallattrib_key IS NOT NULL 

	   -- FILTER OPTIONS APPLIED HERE --

	    and Year(cfd.service_date) = &apos;2019&apos; --@Ser_Date_yr
		and ar_type_id = &apos;1&apos;
  --    and month(cfd.service_date) = &apos;11&apos; --@Ser_Date_mnt

--and zD.Division_ in (&apos;PEDIATRIX&apos;)-- (SELECT Value FROM STRING_SPLIT(@Div, &apos;,&apos;))
--and zD.Region in
 --  and zD.ZANSRPT_LV1  in (&apos;EASTERN&apos;)-- (SELECT Value FROM STRING_SPLIT(@OM_Div, &apos;,&apos;))
	and zD.ZANSRPT_LV2 in (&apos;MIDWEST&apos;) --(SELECT Value FROM STRING_SPLIT(@OM_Reg, &apos;,&apos;))
--	and zD.PRACTYPE in (&apos;HEARING SCREEN&apos;) -- (SELECT Value FROM STRING_SPLIT(@PRACTYPE, &apos;,&apos;))
--and zD.PRACTICE2  like  (&apos;EXCELA WESTMORELAND HS PRAC&apos;) -- (SELECT Value FROM STRING_SPLIT(@Prac, &apos;,&apos;))
--and cfd.acct_unit = &apos;25090103999&apos; -- (SELECT Value FROM STRING_SPLIT(@acct_unit, &apos;,&apos;))
--	   and CASE 
--         WHEN division_id = 2 
--              AND visitcharges_id IS NOT NULL THEN visitcharges_id 
--         WHEN division_id = 1 
--              AND ar_type_id = 1 THEN Ltrim(Rtrim(Str(charge_number))) 
--         WHEN division_id = 1 
--              AND ar_type_id = 2 
--              AND source_system_id &lt;&gt; 2 THEN Ltrim( 
--         Rtrim(Str(billing_details_id))) 
--         WHEN ar_type_id = 2 
--              AND source_system_id = 2 THEN 
--         Ltrim(Rtrim(Str(Isnull(billing_details_id, 
--         0)))) 
--         + Isnull(cpt_modifier_code, &apos;00&apos;) 
--         + Ltrim(Rtrim((Isnull(procedure_code, 0)))) 
--         + Ltrim(Rtrim((Isnull(provider_code, 0)))) 
--         + CONVERT(VARCHAR, service_date, 101) 
--      END  in (
--&apos;2019120501560555400121382B76BC&apos;
--	  ) --&apos;93849104&apos;,&apos;17506869&apos;)




-- CFD2 START
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #cfd
SELECT Rtrim(zd.practice2)    practice2, 
cfd.acct_unit,
       CASE 
         WHEN division_id = 2 
              AND visitcharges_id IS NOT NULL THEN visitcharges_id 
         WHEN division_id = 1 
              AND ar_type_id = 1 THEN Ltrim(Rtrim(Str(charge_number))) 
         WHEN division_id = 1 
              AND ar_type_id = 2 
              AND source_system_id &lt;&gt; 2 THEN Ltrim( 
         Rtrim(Str(billing_details_id))) 
         WHEN ar_type_id = 2 
              AND source_system_id = 2 THEN 
         Ltrim(Rtrim(Str(Isnull(billing_details_id, 
         0)))) 
         + Isnull(cpt_modifier_code, &apos;00&apos;) 
         + Ltrim(Rtrim((Isnull(procedure_code, 0)))) 
         + Ltrim(Rtrim((Isnull(provider_code, 0)))) 
         + CONVERT(VARCHAR, service_date, 101) 
       END  uniquenum, 
       Eomonth(service_date) service_date, 
       cfd.accounting_period, 
       pm.archive_period, 
       cfd.ar_units, 
       Isnull(cfd.allowed, 0)Allowed, 
       cfd.practice_code, 
       CFD.ar_charges,     
       CFD.ar_contractual_adj, 
       CFD.ar_bad_debt_adj,
	   cpt_modifier_code,
	   charge_financial_detail_id,
	   cfd.dimallattrib_key dimkey,
	   zd.dimallattrib_key 
INTO   #cfd 
FROM   charge_financial_details cfd 
       INNER JOIN period_master pm 
               ON cfd.period_id = pm.period_id 
       INNER JOIN dimallattrib d 
               ON cfd.dimallattrib_key = d.dimallattrib_key 
			   Inner Join #z_dims zd
			   on d.acct_unit = zd.acct_unit
WHERE  
        Year(cfd.service_date) &gt;= 2016 
        AND Year(cfd.service_date) &lt;= Year(Getdate()) 
        and cfd.dimallattrib_key IS NOT NULL 


--and zD.Division_ in (&apos;PEDIATRIX&apos;)-- (SELECT Value FROM STRING_SPLIT(@Div, &apos;,&apos;))
 --  and zD.ZANSRPT_LV1  in (&apos;EASTERN&apos;)-- (SELECT Value FROM STRING_SPLIT(@OM_Div, &apos;,&apos;))
	--and zD.ZANSRPT_LV2 in (&apos;MOUNTAIN WEST&apos;) --(SELECT Value FROM STRING_SPLIT(@OM_Reg, &apos;,&apos;))
		--and zD.PRACTYPE in (&apos;PERINATOLOGY&apos;) -- (SELECT Value FROM STRING_SPLIT(@PRACTYPE, &apos;,&apos;))
--and zD.Division_ in (&apos;PEDIATRIX&apos;)-- (SELECT Value FROM STRING_SPLIT(@Div, &apos;,&apos;))
--   and zD.ZANSRPT_LV1  in (&apos;EASTERN&apos;)-- (SELECT Value FROM STRING_SPLIT(@OM_Div, &apos;,&apos;))
and zD.ZANSRPT_LV2 in (&apos;MIDWEST&apos;) --(SELECT Value FROM STRING_SPLIT(@OM_Reg, &apos;,&apos;))
--	and zD.PRACTYPE in (&apos;HEARING SCREEN&apos;) -- (SELECT Value FROM STRING_SPLIT(@PRACTYPE, &apos;,&apos;))
--and zD.PRACTICE2  like  (&apos;EXCELA WESTMORELAND HS PRAC&apos;) -- (SELECT Value FROM STRING_SPLIT(@Prac, &apos;,&apos;))
--and zD.PRACTICE2  like  (&apos;DENVER CARDIOLOGY PRACTICE%&apos;) -- (SELECT Value FROM STRING_SPLIT(@Prac, &apos;,&apos;))
--and cfd.acct_unit = &apos;32040571999&apos; -- (SELECT Value FROM STRING_SPLIT(@acct_unit, &apos;,&apos;))
--	   and CASE 
--         WHEN division_id = 2 
--              AND visitcharges_id IS NOT NULL THEN visitcharges_id 
--         WHEN division_id = 1 
--              AND ar_type_id = 1 THEN Ltrim(Rtrim(Str(charge_number))) 
--         WHEN division_id = 1 
--              AND ar_type_id = 2 
--              AND source_system_id &lt;&gt; 2 THEN Ltrim( 
--         Rtrim(Str(billing_details_id))) 
--         WHEN ar_type_id = 2 
--              AND source_system_id = 2 THEN 
--         Ltrim(Rtrim(Str(Isnull(billing_details_id, 
--         0)))) 
--         + Isnull(cpt_modifier_code, &apos;00&apos;) 
--         + Ltrim(Rtrim((Isnull(procedure_code, 0)))) 
--         + Ltrim(Rtrim((Isnull(provider_code, 0)))) 
--         + CONVERT(VARCHAR, service_date, 101) 
--      END  in (
--&apos;2019120501560555400121382B76BC&apos;
--	  ) --&apos;93849104&apos;,&apos;17506869&apos;)







	   
-- CFD2 END

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #Not_Allowed_get_min_period
SELECT --cfd.practice2, 
       cfd.uniquenum, 
       cfd.practice_code, 
       cfd.cpt_modifier_code, 
     --  payer_financial_class_key, 
       Min(cfd.archive_period) archive_PERIOD
	--   zd.acct_unit	 
INTO   #not_allowed_get_min_period 
--FROM   #not_allowed_base_allowed  -- changed 1/29
FROM #cfd cfd
inner join #z_dims zd
on cfd.acct_unit = zd.acct_unit
GROUP  BY cfd.uniquenum, 
        cfd.practice_code, 
        --  cfd.practice2, 
          cfd.cpt_modifier_code
	--	  zd.acct_unit

		  

 drop table if exists #zach_getdims
	  select --a.*,	  
	  a.uniquenum,
	  a.practice_code,
      a.cpt_modifier_code,
      max(a.archive_PERIOD) archive_PERIOD,
      b.dimallattrib_key
	  into #zach_getdims
	  from #Not_Allowed_get_min_period a
	  inner join 
	  	(  select uniquenum,practice_code, max(dimallattrib_key) dimallattrib_key from #Not_Allowed_base_allowed 
	   -- where uniquenum = &apos;17430777&apos;
		group by uniquenum, practice_code)b
		on a.uniquenum = b.uniquenum
		and a.practice_code = b.practice_code
		group by 
		a.uniquenum,
	    a.practice_code,
        a.cpt_modifier_code,    
        b.dimallattrib_key

drop table if exists #zach_getdims2
select zd.*,d.practice2,d.acct_unit 
into #zach_getdims2
from #zach_getdims zd
       INNER JOIN dimallattrib d 
               ON zd.dimallattrib_key = d.dimallattrib_key 




SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
 drop table if exists #Not_Allowed_GETMIN_A

SELECT DISTINCT T.uniquenum, 
				--t.practice2,
				t.acct_unit,
                t.practice_code, 
                t.archive_period, 
                 mi.allowed                   Allowed_Initial, 
			   
                mi.cpt_modifier_code         CPT_Modifier_Code_Initial, 
                mi.payer_financial_class_key Payer_Financial_Class_Key_Initial 
INTO   #not_allowed_getmin_a 
FROM    #zach_getdims2 t 
       OUTER apply(SELECT c.payer_code,                     
                          c.contract_key, 
                          c.payer_financial_class_key, 
                          c.acct_unit, 
                          c.allowed, 
                          c.procedure_code, 
                          c.cpt_modifier_code,
						  t.dimallattrib_key							
           --        FROM   #not_allowed_base_allowed p   --changed 1/29
				   FROM #cfd p
                          INNER JOIN dbo.charge_financial_details c 
                                  ON p.charge_financial_detail_id = 
                                     c.charge_financial_detail_id 
						--Inner Join	 #Not_Allowed_get_min_period m
						--on p.uniquenum = m.uniquenum 
						--and p.practice_code = m.practice_code
						--and p.archive_period = m.archive_period
						--and p.acct_unit = m.acct_unit
                          LEFT JOIN dbo.period_master pm 
                                 ON pm.period_id = c.period_id                  
                   WHERE  c.practice_code = t.practice_code                 
                          AND p.uniquenum = t.uniquenum 
                          AND p.practice_code = t.practice_code 
                          AND p.archive_period = t.archive_period
					--	  AND p.dimkey = t.dimallattrib_key--_Min 					
                  ) mi 






SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #Not_Allowed_GETMIN_B

SELECT A.uniquenum, 
  --    a.practice2,
       A.practice_code, 
	   a.acct_unit,
       A.archive_period, 
       A.allowed_initial, 
       A.cpt_modifier_code_initial, 
       a.payer_financial_class_key_initial 
INTO   #not_allowed_getmin_b 
FROM   #not_allowed_getmin_a A 
       INNER JOIN (SELECT A.uniquenum, 
	   a.acct_unit,
                          A.practice_code, 
                          Min(A.archive_period)ARCHIVE_PERIOD 
                   FROM   #not_allowed_getmin_a A 
                   GROUP  BY A.uniquenum, 
                             A.practice_code,
							  a.acct_unit) B 
               ON A.uniquenum = B.uniquenum 
                  AND A.practice_code = B.practice_code 
                  AND A.archive_period = B.archive_period 
				  and  a.acct_unit = b.acct_unit
 


SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #Not_Allowed_base_allowed_a
SELECT a.* 
INTO   #not_allowed_base_allowed_a 
FROM   #not_allowed_base_allowed a 
       INNER JOIN #zach_getdims2 m 
               ON a.uniquenum = m.uniquenum 
                  AND a.practice_code = m.practice_code 
               --   AND a.archive_period = m.archive_period 
				  and a.acct_unit = m.acct_unit




drop table if exists #Not_Allowed_base_allowed_amount_A
SELECT A.practice2, 
a.acct_unit,
       A.uniquenum, 
       A.practice_code, 
       A.service_date, 
       a.accounting_period, 
       a.archive_period, 
       Sum(CASE 
             WHEN Round(A.ar_units, 0) &gt;= 1 THEN COALESCE(B.allowed_initial, 0) 
             WHEN Round(A.ar_units, 0) &lt;= -1 
                  AND A.source_system_id = 2 THEN COALESCE(B.allowed_initial, 
                                                  ( Isnull(a.allowed, 0) )) 
             WHEN Round(A.ar_units, 0) &lt;= -1 
                  AND A.source_system_id = 1 THEN COALESCE(B.allowed_initial, 
                                                  ( Isnull(a.allowed, 0) )) *- 1 
             ELSE 0 
           END) Allowed 
INTO   #not_allowed_base_allowed_amount_a 
FROM   
--#not_allowed_base_allowed A 
 #not_allowed_base_allowed_a A
       LEFT JOIN #not_allowed_getmin_b B 
              ON A.uniquenum = B.uniquenum 
                 AND A.practice_code = B.practice_code 
                 AND Isnull(A.cpt_modifier_code, 0) = 
                     Isnull(B.cpt_modifier_code_initial, 0) 
                 AND Isnull(A.payer_financial_class_key, 0) = 
                     Isnull(B.payer_financial_class_key_initial, 0) 
					 
GROUP  BY A.practice2, 
          A.uniquenum, 
          A.service_date, 
          A.practice_code, 
          a.accounting_period, 
          a.archive_period,
		  a.acct_unit



drop table if exists #Not_Allowed_base_allowed_amount_b
SELECT practice2, 
acct_unit,
       service_date, 
       accounting_period, 
       archive_period, 
	   uniquenum,
	   practice_code,
       Sum(z.ar_charges)         AR_Charges, 
       Sum(z.ca_provision)       CA_Provision, 
       Sum(z.ar_payments)        AR_Payments, 
       Sum(z.ar_patient_payments)AR_Patient_Payments, 
       Sum(z.ar_contractual_adj) AR_Contractual_Adj, 
       Sum(z.ar_bad_debt_adj)    AR_Bad_Debt_Adj, 
       Sum(z.ar_other_adj)       AR_Other_Adj, 
	   Sum(z.ar_units)			 AR_Units,
       Sum(z.allowed)            ALLOWED 
INTO   #not_allowed_base_allowed_amount_b 
FROM   (SELECT b.practice2, 
b.acct_unit,
               b.uniquenum, 
               b.practice_code,
               B.service_date, 
               a.accounting_period, 
               a.archive_period, 
               Sum(b.ar_charges)         AR_Charges, 
               Sum(b.ca_provision)       CA_Provision, 
               Sum(b.ar_payments)        AR_Payments, 
               Sum(b.ar_patient_payments)AR_Patient_Payments, 
               Sum(b.ar_contractual_adj) AR_Contractual_Adj, 
               Sum(b.ar_bad_debt_adj)    AR_Bad_Debt_Adj, 
               Sum(b.ar_other_adj)       AR_Other_Adj, 
			   Sum(b.ar_units) AR_Units, -- zach added
               a.allowed 
        FROM   #not_allowed_base_allowed B 
               LEFT JOIN (SELECT a.practice2, 
			   a.acct_unit,
                                 a.practice_code, 
                                 a.uniquenum, 
                                 a.archive_period, 
                                 a.accounting_period, 
                                 Sum(A.allowed)Allowed 
                          FROM   #not_allowed_base_allowed_amount_a A 
                          GROUP  BY a.practice2, 
						  a.acct_unit,
                                    a.practice_code, 
                                    a.uniquenum, 
                                    A.allowed, 
                                    a.archive_period, 
                                    a.accounting_period)A 
                      ON a.uniquenum = b.uniquenum 
                         AND a.practice_code = b.practice_code 
                         AND a.practice2 = b.practice2 
                         AND a.accounting_period = b.accounting_period 
                         AND a.archive_period = b.archive_period 
						 AND a.acct_unit = b.acct_unit
        GROUP  BY b.practice2, 
		b.acct_unit,
                  b.uniquenum, 
                  b.practice_code, 
                  a.allowed, 
                  B.service_date, 
                  a.accounting_period, 
                  a.archive_period)z 
GROUP  BY z.practice2, 
acct_unit,
          z.accounting_period, 
          z.archive_period, 
          z.service_date,
		  z.uniquenum,
		  practice_code




drop table if exists #Not_Allowed_base_allowed_amount_C
SELECT practice2, 
acct_unit,
       accounting_period, 
       archive_period, 
       service_date, 
	   uniquenum,
	   practice_code,
       Sum(ar_charges)         AR_Charges, 
       Sum(ca_provision)       CA_Provision, 
       Sum(ar_payments)        AR_Payments, 
       Sum(ar_patient_payments)AR_Patient_Payments, 
       Sum(ar_contractual_adj) AR_Contractual_Adj, 
       Sum(ar_bad_debt_adj)    AR_Bad_Debt_Adj, 
       Sum(ar_other_adj)       AR_Other_Adj,
	   Sum(ar_units)		   AR_units -- zach added
INTO   #not_allowed_base_allowed_amount_c 
FROM   #not_allowed_base_allowed_amount_b 
GROUP  BY practice2, 
          accounting_period, 
          archive_period, 
          service_date,
		  uniquenum,
		  practice_code,
		  acct_unit




drop table if exists #Not_Allowed_base_allowed_amount_D
SELECT-- b.practice2, 
b.acct_unit,
	  b.uniquenum,
	   max(service_date) service_date,
	   b.practice_code,
       Sum(ar_charges)         AR_Charges, 
       Sum(ca_provision)       CA_Provision, 
       Sum(ar_payments)        AR_Payments, 
       Sum(ar_patient_payments)AR_Patient_Payments, 
       Sum(ar_contractual_adj) AR_Contractual_Adj, 
       Sum(ar_bad_debt_adj)    AR_Bad_Debt_Adj, 
       Sum(ar_other_adj)       AR_Other_Adj  
INTO   #not_allowed_base_allowed_amount_d 
FROM   #not_allowed_base_allowed_amount_c c
 LEFT JOIN #not_allowed_getmin_b B 
              ON c.uniquenum = B.uniquenum 
                 AND c.practice_code = B.practice_code 
GROUP  BY --b.practice2,
b.uniquenum,b.practice_code,b.acct_unit--service_date






--Zach Test


SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #_Allowed_base_allowed_units_a
SELECT A.uniquenum, 
       A.practice_code, 
       a.practice2 , 
	   b.acct_unit,
       a.cpt_modifier_code, 
       ar_units, 
       a.archive_period,
	   a.service_date,
	   sum(AR_Contractual_Adj) AR_Contractual_Adj,
sum(AR_Charges)  AR_Charges
INTO   #_allowed_base_allowed_units_a
FROM   #not_allowed_base_allowed a
left join #Not_Allowed_GETMIN_B b
on A.uniquenum = b.uniquenum
and a.practice_code = b.practice_code
group by
A.uniquenum, 
       A.practice_code, 
       a.practice2 , 
	   b.acct_unit,
       a.cpt_modifier_code, 
       ar_units, 
       a.archive_period,
	   a.service_date




-- for allowed
DROP TABLE IF EXISTS #_allowed_base_allowed_amount_a 
SELECT    a.practice2, 
          a.uniquenum, 
          max(a.service_date) service_date, 
		  a.practice_code,
		  b.acct_unit,	
	--	  a.cpt_modifier_code,	
          sum( 
          CASE 
                    WHEN round(a.ar_units,0) &gt;= 1 THEN COALESCE(b.allowed_initial,0) 
                    WHEN round(a.ar_units,0) &lt;= -1 
                    AND       a.source_system_id = 2 THEN COALESCE(b.allowed_initial,0) 
                    WHEN round(a.ar_units,0) &lt;= -1 
                    AND       a.source_system_id = 1 THEN COALESCE(b.allowed_initial,0)*-1 
                    ELSE 0 
          END ) allowed 
INTO      #_allowed_base_allowed_amount_a 
FROM      #not_allowed_base_allowed a 
LEFT JOIN #Not_Allowed_GETMIN_B  b 
ON        a.uniquenum = b.uniquenum 
AND       a.practice_code = b.practice_code 
--AND       isnull(a.cpt_modifier_code,0) = isnull(b.cpt_modifier_code_initial,0) 
--And a.acct_unit = b.acct_unit
GROUP BY  a.practice2,
a.practice_code, 
          a.uniquenum,     
		  b.acct_unit
	--	  a.cpt_modifier_code
	--	  ,a.service_date
		 
--select * from		 #not_allowed_base_allowed
--select * from		 #Not_Allowed_GETMIN_B 
--select * from #_allowed_base_allowed_amount_a 


DROP TABLE IF EXISTS #_allowed_base_allowed_amount_b 
SELECT  -- practice2,
practice_code,
         uniquenum,
		 acct_unit,
         sum(allowed)allowed,
		 service_date
into #_allowed_base_allowed_amount_b 
FROM     #_allowed_base_allowed_amount_a 
GROUP BY --practice2,
practice_code,uniquenum,service_date,acct_unit
ORDER BY --practice2,
practice_code,uniquenum,service_date,acct_unit



DROP TABLE IF EXISTS #_ar_units
select 
max(service_date) service_date,
uniquenum, 
practice_code,
acct_unit,
sum(ar_units) ar_units, 
sum(AR_Contractual_Adj) AR_Contractual_Adj,
sum(AR_Charges)  AR_Charges
into #_ar_units
from  
#_Allowed_base_allowed_units_a
--#not_allowed_base_allowed 
group by 
--service_date, 
uniquenum, practice_code,acct_unit
order by --service_date, 
uniquenum, practice_code,acct_unit






DROP TABLE IF EXISTS #_allowed_payer
select 
service_date,
uniquenum, 
practice_code,
acct_unit,
ar_units,
case
              when (AR_Units) &gt; 0 and AR_Contractual_Adj != 0 then (round(AR_Charges,2) - AR_Contractual_Adj)
              when (AR_Units) &lt; 0 and AR_Contractual_Adj != 0 then (round(AR_Charges,2) - AR_Contractual_Adj)*-1
              else 0
       end Allowed_Payer
into #_allowed_payer
from #_ar_units


DROP TABLE IF EXISTS #_master1
SELECT 
	--  nal.practice2,
	  nal.acct_unit,
     nal.service_date,
	   nal.practice_code,
	   nal.UniqueNum,
       Sum(allowed)allowed,
	   Sum(allowed_payer) allowed_payer,
	   Sum(ar_charges)         AR_Charges, 
       Sum(ca_provision)       CA_Provision, 
       Sum(ar_payments)        AR_Payments, 
       Sum(ar_patient_payments)AR_Patient_Payments, 
       Sum(ar_contractual_adj) AR_Contractual_Adj, 
       Sum(ar_bad_debt_adj)    AR_Bad_Debt_Adj, 
       Sum(ar_other_adj)       AR_Other_Adj,
	   sum(AR_Payments) - sum(AR_Patient_Payments) AR_Ins_Payments,
	   sum(ar_units)		 AR_Units
	   into #_master1
 FROM #Not_Allowed_base_allowed_amount_D nal
left join #_allowed_base_allowed_amount_b al
on nal.uniquenum = al.uniquenum
and nal.practice_code = al.practice_code
and nal.service_date = al.service_date
and nal.acct_unit = al.acct_unit
left join #_allowed_payer ap
on nal.uniquenum = ap.uniquenum
and nal.service_date = ap.service_date
and isnull(nal.practice_code,0) = isnull(ap.practice_code,0)
and nal.acct_unit = ap.acct_unit
group by --nal.practice2,
nal.practice_code,nal.service_date,nal.UniqueNum,nal.acct_unit
order by --nal.practice2,
nal.practice_code,nal.service_date,nal.UniqueNum,nal.acct_unit





--select * from #Not_Allowed_base_allowed --

--select * from #Not_Allowed_get_min_period --

--select * from #Not_Allowed_GETMIN_A
--where acct_unit = &apos;15120204999&apos;
--select * from #Not_Allowed_GETMIN_B 
-- where acct_unit = &apos;15120204999&apos;
--select * from #Not_Allowed_base_allowed_a -- ok
--where acct_unit = &apos;15120204999&apos;
----select * from #Not_Allowed_base_allowed_amount_A
----where acct_unit = &apos;14090101999    &apos;

----select * from #Not_Allowed_base_allowed_amount_b -- ok
----where acct_unit = &apos;14090101999    &apos;
----select * from #Not_Allowed_base_allowed_amount_C -- ok
----where acct_unit = &apos;14090101999    &apos;
----select * from #Not_Allowed_base_allowed_amount_D -- ok
----where acct_unit = &apos;14090101999    &apos;
--select * from #_Allowed_base_allowed_units_a 
------where acct_unit = &apos;14090101999    &apos;
--select * from #_allowed_base_allowed_amount_a 
------where acct_unit = &apos;14090101999    &apos;
--select * from  #_allowed_base_allowed_amount_b 
------where acct_unit = &apos;14090101999    &apos;
--select * from #_ar_units
------where acct_unit = &apos;14090101999    &apos;
--select * from #_allowed_payer
------where acct_unit = &apos;14090101999    &apos;
----select * from #_master1 


----select * from #z_dims

----select * from #_flag_allow
------where acct_unit =&apos;15120304999&apos;
----select * from #_flag_Adj 
------where acct_unit =&apos;15120304999&apos;
------select * from #_master2
----select * from #_master3
----where acct_unit =&apos;15120304999&apos;



-- Flag Allowed
DROP TABLE IF EXISTS #_flag_allow
SELECT *, 
       CASE 
         WHEN allowed_initial IS NULL THEN 2 
         ELSE 1 
       END Flag_Allowed 
INTO   #_flag_allow 
FROM   #not_allowed_getmin_b 


-- Flag_Adjudicated
DROP TABLE IF EXISTS #_flag_Adj
SELECT *, 
       CASE 
         WHEN ar_charges &gt; 0 
              AND ( ar_contractual_adj &gt; 0 
                     OR ar_bad_debt_adj &gt; 0 ) THEN 1 
         ELSE 2 
       END Flag_Adjudicated 
INTO   #_flag_adj 
FROM   #not_allowed_base_allowed_amount_d 




DROP TABLE IF EXISTS #_master2
select  distinct
 m1.*,isnull(CPT_Modifier_Code_Initial,0)CPT_Modifier_Code_Initial,allowed_initial,Flag_Allowed, Flag_Adjudicated 
into #_master2
from
#_master1 m1
left join #_flag_allow fal
on m1.uniquenum = fal.uniquenum 
and m1.practice_code = fal.practice_code
and  m1.acct_unit =  fal.acct_unit
left join #_flag_Adj fad
on m1.uniquenum = fad.uniquenum 
and m1.service_date = fad.service_date
and m1.practice_code = fad.practice_code
and  m1.acct_unit =  fad.acct_unit


-- Final Output

DROP TABLE IF EXISTS #_master3
Select
--practice2,
--acct_unit,
----service_date,
--practice_code,
--UniqueNum,
sum( allowed ) as allowed,
sum( allowed_payer ) as allowed_payer,
sum( AR_Bad_Debt_Adj ) as AR_Bad_Debt_Adj,
sum( CA_Provision ) as CA_Provision,
sum( AR_Charges ) as AR_Charges,
sum( AR_Contractual_Adj ) as AR_Contractual_Adj,
sum(case                
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and Allowed_Payer = 0 and Allowed != 0 then iif(Allowed - AR_Patient_Payments &lt; 0,0,Allowed - AR_Patient_Payments)
else 0
end) AR_Inferred_Avoidable_Adjustment,
sum(case
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and AR_Patient_Payments = 0 and Allowed_Payer = 0 then 0
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt; 0 and Allowed_Payer = 0 then AR_Patient_Payments
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt;= 0 and Allowed_Payer &gt; Allowed then iif((Allowed_Payer - AR_Ins_Payments) &lt; 0,0,(Allowed_Payer - AR_Ins_Payments))
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt;= 0 and Allowed_Payer &lt;= Allowed then iif((Allowed - AR_Ins_Payments) &lt; 0,0,(Allowed - AR_Ins_Payments))
	when Flag_Allowed = 1 and Flag_Adjudicated = 2 and AR_Patient_Payments &gt; 0 then AR_Patient_Payments
	when Flag_Allowed = 1 and AR_Patient_Payments &lt; 0 then 0
	when Flag_Allowed = 2 then 0
		else round(AR_Patient_Payments,2)
end) AR_Inferred_Pat_Pymt_From_BDA,
sum( AR_Ins_Payments ) as AR_Ins_Payments,
sum( AR_Other_Adj ) as AR_Other_Adj,
sum(case when 
(case
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and AR_Patient_Payments = 0 and Allowed_Payer = 0 then 0
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt; 0 and Allowed_Payer = 0 then AR_Patient_Payments
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt;= 0 and Allowed_Payer &gt; Allowed then iif((Allowed_Payer - AR_Ins_Payments) &lt; 0,0,(Allowed_Payer - AR_Ins_Payments))
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt;= 0 and Allowed_Payer &lt;= Allowed then iif((Allowed - AR_Ins_Payments) &lt; 0,0,(Allowed - AR_Ins_Payments))
	when Flag_Allowed = 1 and Flag_Adjudicated = 2 and AR_Patient_Payments &gt; 0 then AR_Patient_Payments
	when Flag_Allowed = 1 and AR_Patient_Payments &lt; 0 then 0
	when Flag_Allowed = 2 then 0
		else round(AR_Patient_Payments,2)
end)
 &gt; 0 then 1 else 0 end) Pat_Pymt_Count,
sum( AR_Patient_Payments ) as AR_Patient_Payments,
 sum( AR_Payments ) as AR_Payments,
 sum( AR_Units ) as AR_Units
--,CPT_Modifier_Code_Initial,
----allowed_initial,
--Flag_Allowed,
--Flag_Adjudicated
 into #_master3
FROM  #_master2
--where acct_unit = &apos;64200212999&apos;
--group by 
--practice2
--acct_unit
--,service_date
--,practice_code
--,UniqueNum
--,CPT_Modifier_Code_Initial
--,allowed_initial
--,Flag_Allowed
--,Flag_Adjudicated



select distinct
--zD.Division_,
--zD.ZANSRPT_LV1,
--zD.ZANSRPT_LV2,
--zD.PRACTYPE,
--zd.practice2,
m3.*
 from #_master3 m3
--left join #z_dims zd on m3.practice2 = zd.practice2
--on m3.acct_unit = zd.acct_unit
----where m3.acct_unit = &apos;25090103999&apos;
----where uniquenum = &apos;13032981&apos;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">test_2</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">BodyData</stringProp>
            <stringProp name="RegexExtractor.regex">[\s\S]+</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">test_2 = vars.getObject(&quot;test_2&quot;)
result = new StringBuilder()

def randomRow = test_2.get(org.apache.commons.lang3.RandomUtils.nextInt(0,test_2.size()))

randomRow.each { k, v -&gt; 
    result.append(&quot;${k}&quot;).append(&quot;,&quot;)
}
result.append(System.getProperty(&quot;line.separator&quot;))

for (Object row : test_2 ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(&quot;test2.csv&quot;), result.toString(), &quot;UTF-8&quot;)</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler-3 " enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">C:\Users\AABrar\Desktop\Script3.ps1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Allowed</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)&lt;.Value&gt;.FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;1&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Allowed_Payer</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;1&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;2&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Bad_Debt_ADJ</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;2&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;3&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CA Provision</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;3&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;4&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Charges</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;4&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;5&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">AR_Contractual_Adj</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;5&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;6&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Inferred_Avoidable_Adjustment</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;6&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;7&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Inferred_Pat_Pymt_From_BDA</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;7&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;8&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Ins_Payments</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;8&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;9&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Other_Adj</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;9&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;10&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Pat_Pymt Count</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;10&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;11&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$2$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Patient_Payments</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;11&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;12&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Payments</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;12&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;13&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Units</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;13&quot;&gt;&lt;Value xsi:type=&quot;xsd:double&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>false</time>
                <latency>false</latency>
                <timestamp>false</timestamp>
                <success>false</success>
                <label>false</label>
                <code>false</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename">C:\Users\AABrar\Desktop\JMeter\apache-jmeter-5.2.1\bin\Cube4.csv</stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">test_pool</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://azprsvratsqlsvr01d.database.windows.net;DatabaseName=reserve_rate_reporting;authentication=ActiveDirectoryPassword</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Vinayaka420$</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">Amrinder_Brar@mednax.com</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - 1" enabled="true">
          <stringProp name="dataSource">test_pool</stringProp>
          <stringProp name="query">





--DECLARE 
--@Ser_Date_yr int,
--@Ser_Date_mnt int,
--@div NVARCHAR(MAX),
--@om_div NVARCHAR(MAX),
--@om_reg NVARCHAR(MAX),
--@practype NVARCHAR(MAX),
--@prac NVARCHAR(MAX),
--@acct_unit NVARCHAR(MAX);


---- Initialize the variable
--SET @Ser_Date_yr = 2019				-- see line 83
--SET @Ser_Date_mnt = 11			    -- see line 84
--SET @div = &apos;PEDIATRIX&apos;				-- see line 103,153
--SET @om_div = &apos;EASTERN&apos;				-- see line 104,154
--SET @om_reg = &apos;NORTH&apos;					-- see line 105,155
--SET @practype = &apos;PERINATOLOGY&apos;				-- see line 106,156
--SET @prac = (&apos;GREATER NASHVILLE MFM PRAC,ROCKVILLE MFM PRACTICE&apos;)		-- see line 107,157
--SET @acct_unit = (&apos;44070301999&apos;)	-- see line 108,158


DROP TABLE IF EXISTS #z_dims
	select d.*
	into #z_dims
	from (
	   select distinct d.acct_unit,
	   max(d.period_id) m_pid 
	 --  max(d.dimallattrib_key) m_did
	   from [dbo].[Charge_Financial_Details] c
	   INNER JOIN 
	   dimallattrib d 
               ON c.dimallattrib_key = d.dimallattrib_key 
	--where c.charge_number = &apos;13032981&apos;
	--where billing_details_id = &apos;93849104&apos;
				   group by d.acct_unit
			)a
			 INNER JOIN 
			 dimallattrib d 
               ON a.acct_unit = d.acct_unit 
			   and m_pid = d.period_id
		--	   and m_did  = d.dimallattrib_key 



SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #Not_Allowed_base_allowed
SELECT Rtrim(zd.practice2)    practice2, 
cfd.acct_unit,
       CASE 
         WHEN division_id = 2 
              AND visitcharges_id IS NOT NULL THEN visitcharges_id 
         WHEN division_id = 1 
              AND ar_type_id = 1 THEN Ltrim(Rtrim(Str(charge_number))) 
         WHEN division_id = 1 
              AND ar_type_id = 2 
              AND source_system_id &lt;&gt; 2 THEN Ltrim( 
         Rtrim(Str(billing_details_id))) 
         WHEN ar_type_id = 2 
              AND source_system_id = 2 THEN 
         Ltrim(Rtrim(Str(Isnull(billing_details_id, 
         0)))) 
         + Isnull(cpt_modifier_code, &apos;00&apos;) 
         + Ltrim(Rtrim((Isnull(procedure_code, 0)))) 
         + Ltrim(Rtrim((Isnull(provider_code, 0)))) 
         + CONVERT(VARCHAR, service_date, 101) 
       END  uniquenum, 
       cfd.visitcharges_id, 
       cfd.charge_number, 
       cfd.billing_details_id, 
       cfd.procedure_code, 
       service_date          Actual_Service_Date, 
       Eomonth(service_date) service_date, 
       cfd.accounting_period, 
       pm.archive_period, 
       cfd.ar_units, 
       Isnull(cfd.allowed, 0)Allowed, 
       cfd.practice_code, 
       cfd.dimallattrib_key, 
       cfd.source_system_id, 
       CFD.ar_type_id, 
       cfd.cpt_modifier_code, 
       cfd.charge_financial_detail_id, 
       cfd.payer_financial_class_key, 
       CFD.ar_charges, 
       CFD.ca_provision, 
       CFD.ar_payments, 
       CFD.ar_patient_payments, 
       CFD.ar_contractual_adj, 
       CFD.ar_bad_debt_adj, 
       CFD.ar_other_adj 
INTO   #not_allowed_base_allowed 
FROM   charge_financial_details cfd 
       INNER JOIN period_master pm 
               ON cfd.period_id = pm.period_id 
       INNER JOIN dimallattrib d 
               ON cfd.dimallattrib_key = d.dimallattrib_key 
			   Inner Join #z_dims zd
			   on d.acct_unit = zd.acct_unit
WHERE  
       Year(cfd.service_date) &gt;= &apos;2016&apos; -- keep static
  --     AND Year(cfd.service_date) &lt;= Year(Getdate()) 
         and cfd.dimallattrib_key IS NOT NULL 

	   -- FILTER OPTIONS APPLIED HERE --

	    and Year(cfd.service_date) = &apos;2019&apos; --@Ser_Date_yr
		and ar_type_id = &apos;1&apos;
  --    and month(cfd.service_date) = &apos;11&apos; --@Ser_Date_mnt

--and zD.Division_ in (&apos;PEDIATRIX&apos;)-- (SELECT Value FROM STRING_SPLIT(@Div, &apos;,&apos;))
--and zD.Region in
 --  and zD.ZANSRPT_LV1  in (&apos;EASTERN&apos;)-- (SELECT Value FROM STRING_SPLIT(@OM_Div, &apos;,&apos;))
	and zD.ZANSRPT_LV2 in (&apos;NORTH&apos;) --(SELECT Value FROM STRING_SPLIT(@OM_Reg, &apos;,&apos;))
--	and zD.PRACTYPE in (&apos;HEARING SCREEN&apos;) -- (SELECT Value FROM STRING_SPLIT(@PRACTYPE, &apos;,&apos;))
--and zD.PRACTICE2  like  (&apos;EXCELA WESTMORELAND HS PRAC&apos;) -- (SELECT Value FROM STRING_SPLIT(@Prac, &apos;,&apos;))
--and cfd.acct_unit = &apos;25090103999&apos; -- (SELECT Value FROM STRING_SPLIT(@acct_unit, &apos;,&apos;))
--	   and CASE 
--         WHEN division_id = 2 
--              AND visitcharges_id IS NOT NULL THEN visitcharges_id 
--         WHEN division_id = 1 
--              AND ar_type_id = 1 THEN Ltrim(Rtrim(Str(charge_number))) 
--         WHEN division_id = 1 
--              AND ar_type_id = 2 
--              AND source_system_id &lt;&gt; 2 THEN Ltrim( 
--         Rtrim(Str(billing_details_id))) 
--         WHEN ar_type_id = 2 
--              AND source_system_id = 2 THEN 
--         Ltrim(Rtrim(Str(Isnull(billing_details_id, 
--         0)))) 
--         + Isnull(cpt_modifier_code, &apos;00&apos;) 
--         + Ltrim(Rtrim((Isnull(procedure_code, 0)))) 
--         + Ltrim(Rtrim((Isnull(provider_code, 0)))) 
--         + CONVERT(VARCHAR, service_date, 101) 
--      END  in (
--&apos;2019120501560555400121382B76BC&apos;
--	  ) --&apos;93849104&apos;,&apos;17506869&apos;)




-- CFD2 START
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #cfd
SELECT Rtrim(zd.practice2)    practice2, 
cfd.acct_unit,
       CASE 
         WHEN division_id = 2 
              AND visitcharges_id IS NOT NULL THEN visitcharges_id 
         WHEN division_id = 1 
              AND ar_type_id = 1 THEN Ltrim(Rtrim(Str(charge_number))) 
         WHEN division_id = 1 
              AND ar_type_id = 2 
              AND source_system_id &lt;&gt; 2 THEN Ltrim( 
         Rtrim(Str(billing_details_id))) 
         WHEN ar_type_id = 2 
              AND source_system_id = 2 THEN 
         Ltrim(Rtrim(Str(Isnull(billing_details_id, 
         0)))) 
         + Isnull(cpt_modifier_code, &apos;00&apos;) 
         + Ltrim(Rtrim((Isnull(procedure_code, 0)))) 
         + Ltrim(Rtrim((Isnull(provider_code, 0)))) 
         + CONVERT(VARCHAR, service_date, 101) 
       END  uniquenum, 
       Eomonth(service_date) service_date, 
       cfd.accounting_period, 
       pm.archive_period, 
       cfd.ar_units, 
       Isnull(cfd.allowed, 0)Allowed, 
       cfd.practice_code, 
       CFD.ar_charges,     
       CFD.ar_contractual_adj, 
       CFD.ar_bad_debt_adj,
	   cpt_modifier_code,
	   charge_financial_detail_id,
	   cfd.dimallattrib_key dimkey,
	   zd.dimallattrib_key 
INTO   #cfd 
FROM   charge_financial_details cfd 
       INNER JOIN period_master pm 
               ON cfd.period_id = pm.period_id 
       INNER JOIN dimallattrib d 
               ON cfd.dimallattrib_key = d.dimallattrib_key 
			   Inner Join #z_dims zd
			   on d.acct_unit = zd.acct_unit
WHERE  
        Year(cfd.service_date) &gt;= 2016 
        AND Year(cfd.service_date) &lt;= Year(Getdate()) 
        and cfd.dimallattrib_key IS NOT NULL 


--and zD.Division_ in (&apos;PEDIATRIX&apos;)-- (SELECT Value FROM STRING_SPLIT(@Div, &apos;,&apos;))
 --  and zD.ZANSRPT_LV1  in (&apos;EASTERN&apos;)-- (SELECT Value FROM STRING_SPLIT(@OM_Div, &apos;,&apos;))
	--and zD.ZANSRPT_LV2 in (&apos;MOUNTAIN WEST&apos;) --(SELECT Value FROM STRING_SPLIT(@OM_Reg, &apos;,&apos;))
		--and zD.PRACTYPE in (&apos;PERINATOLOGY&apos;) -- (SELECT Value FROM STRING_SPLIT(@PRACTYPE, &apos;,&apos;))
--and zD.Division_ in (&apos;PEDIATRIX&apos;)-- (SELECT Value FROM STRING_SPLIT(@Div, &apos;,&apos;))
--   and zD.ZANSRPT_LV1  in (&apos;EASTERN&apos;)-- (SELECT Value FROM STRING_SPLIT(@OM_Div, &apos;,&apos;))
and zD.ZANSRPT_LV2 in (&apos;NORTH&apos;) --(SELECT Value FROM STRING_SPLIT(@OM_Reg, &apos;,&apos;))
--	and zD.PRACTYPE in (&apos;HEARING SCREEN&apos;) -- (SELECT Value FROM STRING_SPLIT(@PRACTYPE, &apos;,&apos;))
--and zD.PRACTICE2  like  (&apos;EXCELA WESTMORELAND HS PRAC&apos;) -- (SELECT Value FROM STRING_SPLIT(@Prac, &apos;,&apos;))
--and zD.PRACTICE2  like  (&apos;DENVER CARDIOLOGY PRACTICE%&apos;) -- (SELECT Value FROM STRING_SPLIT(@Prac, &apos;,&apos;))
--and cfd.acct_unit = &apos;32040571999&apos; -- (SELECT Value FROM STRING_SPLIT(@acct_unit, &apos;,&apos;))
--	   and CASE 
--         WHEN division_id = 2 
--              AND visitcharges_id IS NOT NULL THEN visitcharges_id 
--         WHEN division_id = 1 
--              AND ar_type_id = 1 THEN Ltrim(Rtrim(Str(charge_number))) 
--         WHEN division_id = 1 
--              AND ar_type_id = 2 
--              AND source_system_id &lt;&gt; 2 THEN Ltrim( 
--         Rtrim(Str(billing_details_id))) 
--         WHEN ar_type_id = 2 
--              AND source_system_id = 2 THEN 
--         Ltrim(Rtrim(Str(Isnull(billing_details_id, 
--         0)))) 
--         + Isnull(cpt_modifier_code, &apos;00&apos;) 
--         + Ltrim(Rtrim((Isnull(procedure_code, 0)))) 
--         + Ltrim(Rtrim((Isnull(provider_code, 0)))) 
--         + CONVERT(VARCHAR, service_date, 101) 
--      END  in (
--&apos;2019120501560555400121382B76BC&apos;
--	  ) --&apos;93849104&apos;,&apos;17506869&apos;)







	   
-- CFD2 END

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #Not_Allowed_get_min_period
SELECT --cfd.practice2, 
       cfd.uniquenum, 
       cfd.practice_code, 
       cfd.cpt_modifier_code, 
     --  payer_financial_class_key, 
       Min(cfd.archive_period) archive_PERIOD
	--   zd.acct_unit	 
INTO   #not_allowed_get_min_period 
--FROM   #not_allowed_base_allowed  -- changed 1/29
FROM #cfd cfd
inner join #z_dims zd
on cfd.acct_unit = zd.acct_unit
GROUP  BY cfd.uniquenum, 
        cfd.practice_code, 
        --  cfd.practice2, 
          cfd.cpt_modifier_code
	--	  zd.acct_unit

		  

 drop table if exists #zach_getdims
	  select --a.*,	  
	  a.uniquenum,
	  a.practice_code,
      a.cpt_modifier_code,
      max(a.archive_PERIOD) archive_PERIOD,
      b.dimallattrib_key
	  into #zach_getdims
	  from #Not_Allowed_get_min_period a
	  inner join 
	  	(  select uniquenum,practice_code, max(dimallattrib_key) dimallattrib_key from #Not_Allowed_base_allowed 
	   -- where uniquenum = &apos;17430777&apos;
		group by uniquenum, practice_code)b
		on a.uniquenum = b.uniquenum
		and a.practice_code = b.practice_code
		group by 
		a.uniquenum,
	    a.practice_code,
        a.cpt_modifier_code,    
        b.dimallattrib_key

drop table if exists #zach_getdims2
select zd.*,d.practice2,d.acct_unit 
into #zach_getdims2
from #zach_getdims zd
       INNER JOIN dimallattrib d 
               ON zd.dimallattrib_key = d.dimallattrib_key 




SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
 drop table if exists #Not_Allowed_GETMIN_A

SELECT DISTINCT T.uniquenum, 
				--t.practice2,
				t.acct_unit,
                t.practice_code, 
                t.archive_period, 
                 mi.allowed                   Allowed_Initial, 
			   
                mi.cpt_modifier_code         CPT_Modifier_Code_Initial, 
                mi.payer_financial_class_key Payer_Financial_Class_Key_Initial 
INTO   #not_allowed_getmin_a 
FROM    #zach_getdims2 t 
       OUTER apply(SELECT c.payer_code,                     
                          c.contract_key, 
                          c.payer_financial_class_key, 
                          c.acct_unit, 
                          c.allowed, 
                          c.procedure_code, 
                          c.cpt_modifier_code,
						  t.dimallattrib_key							
           --        FROM   #not_allowed_base_allowed p   --changed 1/29
				   FROM #cfd p
                          INNER JOIN dbo.charge_financial_details c 
                                  ON p.charge_financial_detail_id = 
                                     c.charge_financial_detail_id 
						--Inner Join	 #Not_Allowed_get_min_period m
						--on p.uniquenum = m.uniquenum 
						--and p.practice_code = m.practice_code
						--and p.archive_period = m.archive_period
						--and p.acct_unit = m.acct_unit
                          LEFT JOIN dbo.period_master pm 
                                 ON pm.period_id = c.period_id                  
                   WHERE  c.practice_code = t.practice_code                 
                          AND p.uniquenum = t.uniquenum 
                          AND p.practice_code = t.practice_code 
                          AND p.archive_period = t.archive_period
					--	  AND p.dimkey = t.dimallattrib_key--_Min 					
                  ) mi 






SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #Not_Allowed_GETMIN_B

SELECT A.uniquenum, 
  --    a.practice2,
       A.practice_code, 
	   a.acct_unit,
       A.archive_period, 
       A.allowed_initial, 
       A.cpt_modifier_code_initial, 
       a.payer_financial_class_key_initial 
INTO   #not_allowed_getmin_b 
FROM   #not_allowed_getmin_a A 
       INNER JOIN (SELECT A.uniquenum, 
	   a.acct_unit,
                          A.practice_code, 
                          Min(A.archive_period)ARCHIVE_PERIOD 
                   FROM   #not_allowed_getmin_a A 
                   GROUP  BY A.uniquenum, 
                             A.practice_code,
							  a.acct_unit) B 
               ON A.uniquenum = B.uniquenum 
                  AND A.practice_code = B.practice_code 
                  AND A.archive_period = B.archive_period 
				  and  a.acct_unit = b.acct_unit
 


SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #Not_Allowed_base_allowed_a
SELECT a.* 
INTO   #not_allowed_base_allowed_a 
FROM   #not_allowed_base_allowed a 
       INNER JOIN #zach_getdims2 m 
               ON a.uniquenum = m.uniquenum 
                  AND a.practice_code = m.practice_code 
               --   AND a.archive_period = m.archive_period 
				  and a.acct_unit = m.acct_unit




drop table if exists #Not_Allowed_base_allowed_amount_A
SELECT A.practice2, 
a.acct_unit,
       A.uniquenum, 
       A.practice_code, 
       A.service_date, 
       a.accounting_period, 
       a.archive_period, 
       Sum(CASE 
             WHEN Round(A.ar_units, 0) &gt;= 1 THEN COALESCE(B.allowed_initial, 0) 
             WHEN Round(A.ar_units, 0) &lt;= -1 
                  AND A.source_system_id = 2 THEN COALESCE(B.allowed_initial, 
                                                  ( Isnull(a.allowed, 0) )) 
             WHEN Round(A.ar_units, 0) &lt;= -1 
                  AND A.source_system_id = 1 THEN COALESCE(B.allowed_initial, 
                                                  ( Isnull(a.allowed, 0) )) *- 1 
             ELSE 0 
           END) Allowed 
INTO   #not_allowed_base_allowed_amount_a 
FROM   
--#not_allowed_base_allowed A 
 #not_allowed_base_allowed_a A
       LEFT JOIN #not_allowed_getmin_b B 
              ON A.uniquenum = B.uniquenum 
                 AND A.practice_code = B.practice_code 
                 AND Isnull(A.cpt_modifier_code, 0) = 
                     Isnull(B.cpt_modifier_code_initial, 0) 
                 AND Isnull(A.payer_financial_class_key, 0) = 
                     Isnull(B.payer_financial_class_key_initial, 0) 
					 
GROUP  BY A.practice2, 
          A.uniquenum, 
          A.service_date, 
          A.practice_code, 
          a.accounting_period, 
          a.archive_period,
		  a.acct_unit



drop table if exists #Not_Allowed_base_allowed_amount_b
SELECT practice2, 
acct_unit,
       service_date, 
       accounting_period, 
       archive_period, 
	   uniquenum,
	   practice_code,
       Sum(z.ar_charges)         AR_Charges, 
       Sum(z.ca_provision)       CA_Provision, 
       Sum(z.ar_payments)        AR_Payments, 
       Sum(z.ar_patient_payments)AR_Patient_Payments, 
       Sum(z.ar_contractual_adj) AR_Contractual_Adj, 
       Sum(z.ar_bad_debt_adj)    AR_Bad_Debt_Adj, 
       Sum(z.ar_other_adj)       AR_Other_Adj, 
	   Sum(z.ar_units)			 AR_Units,
       Sum(z.allowed)            ALLOWED 
INTO   #not_allowed_base_allowed_amount_b 
FROM   (SELECT b.practice2, 
b.acct_unit,
               b.uniquenum, 
               b.practice_code,
               B.service_date, 
               a.accounting_period, 
               a.archive_period, 
               Sum(b.ar_charges)         AR_Charges, 
               Sum(b.ca_provision)       CA_Provision, 
               Sum(b.ar_payments)        AR_Payments, 
               Sum(b.ar_patient_payments)AR_Patient_Payments, 
               Sum(b.ar_contractual_adj) AR_Contractual_Adj, 
               Sum(b.ar_bad_debt_adj)    AR_Bad_Debt_Adj, 
               Sum(b.ar_other_adj)       AR_Other_Adj, 
			   Sum(b.ar_units) AR_Units, -- zach added
               a.allowed 
        FROM   #not_allowed_base_allowed B 
               LEFT JOIN (SELECT a.practice2, 
			   a.acct_unit,
                                 a.practice_code, 
                                 a.uniquenum, 
                                 a.archive_period, 
                                 a.accounting_period, 
                                 Sum(A.allowed)Allowed 
                          FROM   #not_allowed_base_allowed_amount_a A 
                          GROUP  BY a.practice2, 
						  a.acct_unit,
                                    a.practice_code, 
                                    a.uniquenum, 
                                    A.allowed, 
                                    a.archive_period, 
                                    a.accounting_period)A 
                      ON a.uniquenum = b.uniquenum 
                         AND a.practice_code = b.practice_code 
                         AND a.practice2 = b.practice2 
                         AND a.accounting_period = b.accounting_period 
                         AND a.archive_period = b.archive_period 
						 AND a.acct_unit = b.acct_unit
        GROUP  BY b.practice2, 
		b.acct_unit,
                  b.uniquenum, 
                  b.practice_code, 
                  a.allowed, 
                  B.service_date, 
                  a.accounting_period, 
                  a.archive_period)z 
GROUP  BY z.practice2, 
acct_unit,
          z.accounting_period, 
          z.archive_period, 
          z.service_date,
		  z.uniquenum,
		  practice_code




drop table if exists #Not_Allowed_base_allowed_amount_C
SELECT practice2, 
acct_unit,
       accounting_period, 
       archive_period, 
       service_date, 
	   uniquenum,
	   practice_code,
       Sum(ar_charges)         AR_Charges, 
       Sum(ca_provision)       CA_Provision, 
       Sum(ar_payments)        AR_Payments, 
       Sum(ar_patient_payments)AR_Patient_Payments, 
       Sum(ar_contractual_adj) AR_Contractual_Adj, 
       Sum(ar_bad_debt_adj)    AR_Bad_Debt_Adj, 
       Sum(ar_other_adj)       AR_Other_Adj,
	   Sum(ar_units)		   AR_units -- zach added
INTO   #not_allowed_base_allowed_amount_c 
FROM   #not_allowed_base_allowed_amount_b 
GROUP  BY practice2, 
          accounting_period, 
          archive_period, 
          service_date,
		  uniquenum,
		  practice_code,
		  acct_unit




drop table if exists #Not_Allowed_base_allowed_amount_D
SELECT-- b.practice2, 
b.acct_unit,
	  b.uniquenum,
	   max(service_date) service_date,
	   b.practice_code,
       Sum(ar_charges)         AR_Charges, 
       Sum(ca_provision)       CA_Provision, 
       Sum(ar_payments)        AR_Payments, 
       Sum(ar_patient_payments)AR_Patient_Payments, 
       Sum(ar_contractual_adj) AR_Contractual_Adj, 
       Sum(ar_bad_debt_adj)    AR_Bad_Debt_Adj, 
       Sum(ar_other_adj)       AR_Other_Adj  
INTO   #not_allowed_base_allowed_amount_d 
FROM   #not_allowed_base_allowed_amount_c c
 LEFT JOIN #not_allowed_getmin_b B 
              ON c.uniquenum = B.uniquenum 
                 AND c.practice_code = B.practice_code 
GROUP  BY --b.practice2,
b.uniquenum,b.practice_code,b.acct_unit--service_date






--Zach Test


SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #_Allowed_base_allowed_units_a
SELECT A.uniquenum, 
       A.practice_code, 
       a.practice2 , 
	   b.acct_unit,
       a.cpt_modifier_code, 
       ar_units, 
       a.archive_period,
	   a.service_date,
	   sum(AR_Contractual_Adj) AR_Contractual_Adj,
sum(AR_Charges)  AR_Charges
INTO   #_allowed_base_allowed_units_a
FROM   #not_allowed_base_allowed a
left join #Not_Allowed_GETMIN_B b
on A.uniquenum = b.uniquenum
and a.practice_code = b.practice_code
group by
A.uniquenum, 
       A.practice_code, 
       a.practice2 , 
	   b.acct_unit,
       a.cpt_modifier_code, 
       ar_units, 
       a.archive_period,
	   a.service_date




-- for allowed
DROP TABLE IF EXISTS #_allowed_base_allowed_amount_a 
SELECT    a.practice2, 
          a.uniquenum, 
          max(a.service_date) service_date, 
		  a.practice_code,
		  b.acct_unit,	
	--	  a.cpt_modifier_code,	
          sum( 
          CASE 
                    WHEN round(a.ar_units,0) &gt;= 1 THEN COALESCE(b.allowed_initial,0) 
                    WHEN round(a.ar_units,0) &lt;= -1 
                    AND       a.source_system_id = 2 THEN COALESCE(b.allowed_initial,0) 
                    WHEN round(a.ar_units,0) &lt;= -1 
                    AND       a.source_system_id = 1 THEN COALESCE(b.allowed_initial,0)*-1 
                    ELSE 0 
          END ) allowed 
INTO      #_allowed_base_allowed_amount_a 
FROM      #not_allowed_base_allowed a 
LEFT JOIN #Not_Allowed_GETMIN_B  b 
ON        a.uniquenum = b.uniquenum 
AND       a.practice_code = b.practice_code 
--AND       isnull(a.cpt_modifier_code,0) = isnull(b.cpt_modifier_code_initial,0) 
--And a.acct_unit = b.acct_unit
GROUP BY  a.practice2,
a.practice_code, 
          a.uniquenum,     
		  b.acct_unit
	--	  a.cpt_modifier_code
	--	  ,a.service_date
		 
--select * from		 #not_allowed_base_allowed
--select * from		 #Not_Allowed_GETMIN_B 
--select * from #_allowed_base_allowed_amount_a 


DROP TABLE IF EXISTS #_allowed_base_allowed_amount_b 
SELECT  -- practice2,
practice_code,
         uniquenum,
		 acct_unit,
         sum(allowed)allowed,
		 service_date
into #_allowed_base_allowed_amount_b 
FROM     #_allowed_base_allowed_amount_a 
GROUP BY --practice2,
practice_code,uniquenum,service_date,acct_unit
ORDER BY --practice2,
practice_code,uniquenum,service_date,acct_unit



DROP TABLE IF EXISTS #_ar_units
select 
max(service_date) service_date,
uniquenum, 
practice_code,
acct_unit,
sum(ar_units) ar_units, 
sum(AR_Contractual_Adj) AR_Contractual_Adj,
sum(AR_Charges)  AR_Charges
into #_ar_units
from  
#_Allowed_base_allowed_units_a
--#not_allowed_base_allowed 
group by 
--service_date, 
uniquenum, practice_code,acct_unit
order by --service_date, 
uniquenum, practice_code,acct_unit






DROP TABLE IF EXISTS #_allowed_payer
select 
service_date,
uniquenum, 
practice_code,
acct_unit,
ar_units,
case
              when (AR_Units) &gt; 0 and AR_Contractual_Adj != 0 then (round(AR_Charges,2) - AR_Contractual_Adj)
              when (AR_Units) &lt; 0 and AR_Contractual_Adj != 0 then (round(AR_Charges,2) - AR_Contractual_Adj)*-1
              else 0
       end Allowed_Payer
into #_allowed_payer
from #_ar_units


DROP TABLE IF EXISTS #_master1
SELECT 
	--  nal.practice2,
	  nal.acct_unit,
     nal.service_date,
	   nal.practice_code,
	   nal.UniqueNum,
       Sum(allowed)allowed,
	   Sum(allowed_payer) allowed_payer,
	   Sum(ar_charges)         AR_Charges, 
       Sum(ca_provision)       CA_Provision, 
       Sum(ar_payments)        AR_Payments, 
       Sum(ar_patient_payments)AR_Patient_Payments, 
       Sum(ar_contractual_adj) AR_Contractual_Adj, 
       Sum(ar_bad_debt_adj)    AR_Bad_Debt_Adj, 
       Sum(ar_other_adj)       AR_Other_Adj,
	   sum(AR_Payments) - sum(AR_Patient_Payments) AR_Ins_Payments,
	   sum(ar_units)		 AR_Units
	   into #_master1
 FROM #Not_Allowed_base_allowed_amount_D nal
left join #_allowed_base_allowed_amount_b al
on nal.uniquenum = al.uniquenum
and nal.practice_code = al.practice_code
and nal.service_date = al.service_date
and nal.acct_unit = al.acct_unit
left join #_allowed_payer ap
on nal.uniquenum = ap.uniquenum
and nal.service_date = ap.service_date
and isnull(nal.practice_code,0) = isnull(ap.practice_code,0)
and nal.acct_unit = ap.acct_unit
group by --nal.practice2,
nal.practice_code,nal.service_date,nal.UniqueNum,nal.acct_unit
order by --nal.practice2,
nal.practice_code,nal.service_date,nal.UniqueNum,nal.acct_unit





--select * from #Not_Allowed_base_allowed --

--select * from #Not_Allowed_get_min_period --

--select * from #Not_Allowed_GETMIN_A
--where acct_unit = &apos;15120204999&apos;
--select * from #Not_Allowed_GETMIN_B 
-- where acct_unit = &apos;15120204999&apos;
--select * from #Not_Allowed_base_allowed_a -- ok
--where acct_unit = &apos;15120204999&apos;
----select * from #Not_Allowed_base_allowed_amount_A
----where acct_unit = &apos;14090101999    &apos;

----select * from #Not_Allowed_base_allowed_amount_b -- ok
----where acct_unit = &apos;14090101999    &apos;
----select * from #Not_Allowed_base_allowed_amount_C -- ok
----where acct_unit = &apos;14090101999    &apos;
----select * from #Not_Allowed_base_allowed_amount_D -- ok
----where acct_unit = &apos;14090101999    &apos;
--select * from #_Allowed_base_allowed_units_a 
------where acct_unit = &apos;14090101999    &apos;
--select * from #_allowed_base_allowed_amount_a 
------where acct_unit = &apos;14090101999    &apos;
--select * from  #_allowed_base_allowed_amount_b 
------where acct_unit = &apos;14090101999    &apos;
--select * from #_ar_units
------where acct_unit = &apos;14090101999    &apos;
--select * from #_allowed_payer
------where acct_unit = &apos;14090101999    &apos;
----select * from #_master1 


----select * from #z_dims

----select * from #_flag_allow
------where acct_unit =&apos;15120304999&apos;
----select * from #_flag_Adj 
------where acct_unit =&apos;15120304999&apos;
------select * from #_master2
----select * from #_master3
----where acct_unit =&apos;15120304999&apos;



-- Flag Allowed
DROP TABLE IF EXISTS #_flag_allow
SELECT *, 
       CASE 
         WHEN allowed_initial IS NULL THEN 2 
         ELSE 1 
       END Flag_Allowed 
INTO   #_flag_allow 
FROM   #not_allowed_getmin_b 


-- Flag_Adjudicated
DROP TABLE IF EXISTS #_flag_Adj
SELECT *, 
       CASE 
         WHEN ar_charges &gt; 0 
              AND ( ar_contractual_adj &gt; 0 
                     OR ar_bad_debt_adj &gt; 0 ) THEN 1 
         ELSE 2 
       END Flag_Adjudicated 
INTO   #_flag_adj 
FROM   #not_allowed_base_allowed_amount_d 




DROP TABLE IF EXISTS #_master2
select  distinct
 m1.*,isnull(CPT_Modifier_Code_Initial,0)CPT_Modifier_Code_Initial,allowed_initial,Flag_Allowed, Flag_Adjudicated 
into #_master2
from
#_master1 m1
left join #_flag_allow fal
on m1.uniquenum = fal.uniquenum 
and m1.practice_code = fal.practice_code
and  m1.acct_unit =  fal.acct_unit
left join #_flag_Adj fad
on m1.uniquenum = fad.uniquenum 
and m1.service_date = fad.service_date
and m1.practice_code = fad.practice_code
and  m1.acct_unit =  fad.acct_unit


-- Final Output

DROP TABLE IF EXISTS #_master3
Select
--practice2,
--acct_unit,
----service_date,
--practice_code,
--UniqueNum,
sum( allowed ) as allowed,
sum( allowed_payer ) as allowed_payer,
sum( AR_Bad_Debt_Adj ) as AR_Bad_Debt_Adj,
sum( CA_Provision ) as CA_Provision,
sum( AR_Charges ) as AR_Charges,
sum( AR_Contractual_Adj ) as AR_Contractual_Adj,
sum(case                
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and Allowed_Payer = 0 and Allowed != 0 then iif(Allowed - AR_Patient_Payments &lt; 0,0,Allowed - AR_Patient_Payments)
else 0
end) AR_Inferred_Avoidable_Adjustment,
sum(case
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and AR_Patient_Payments = 0 and Allowed_Payer = 0 then 0
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt; 0 and Allowed_Payer = 0 then AR_Patient_Payments
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt;= 0 and Allowed_Payer &gt; Allowed then iif((Allowed_Payer - AR_Ins_Payments) &lt; 0,0,(Allowed_Payer - AR_Ins_Payments))
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt;= 0 and Allowed_Payer &lt;= Allowed then iif((Allowed - AR_Ins_Payments) &lt; 0,0,(Allowed - AR_Ins_Payments))
	when Flag_Allowed = 1 and Flag_Adjudicated = 2 and AR_Patient_Payments &gt; 0 then AR_Patient_Payments
	when Flag_Allowed = 1 and AR_Patient_Payments &lt; 0 then 0
	when Flag_Allowed = 2 then 0
		else round(AR_Patient_Payments,2)
end) AR_Inferred_Pat_Pymt_From_BDA,
sum( AR_Ins_Payments ) as AR_Ins_Payments,
sum( AR_Other_Adj ) as AR_Other_Adj,
sum(case when 
(case
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and AR_Patient_Payments = 0 and Allowed_Payer = 0 then 0
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt; 0 and Allowed_Payer = 0 then AR_Patient_Payments
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt;= 0 and Allowed_Payer &gt; Allowed then iif((Allowed_Payer - AR_Ins_Payments) &lt; 0,0,(Allowed_Payer - AR_Ins_Payments))
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt;= 0 and Allowed_Payer &lt;= Allowed then iif((Allowed - AR_Ins_Payments) &lt; 0,0,(Allowed - AR_Ins_Payments))
	when Flag_Allowed = 1 and Flag_Adjudicated = 2 and AR_Patient_Payments &gt; 0 then AR_Patient_Payments
	when Flag_Allowed = 1 and AR_Patient_Payments &lt; 0 then 0
	when Flag_Allowed = 2 then 0
		else round(AR_Patient_Payments,2)
end)
 &gt; 0 then 1 else 0 end) Pat_Pymt_Count,
sum( AR_Patient_Payments ) as AR_Patient_Payments,
 sum( AR_Payments ) as AR_Payments,
 sum( AR_Units ) as AR_Units
--,CPT_Modifier_Code_Initial,
----allowed_initial,
--Flag_Allowed,
--Flag_Adjudicated
 into #_master3
FROM  #_master2
--where acct_unit = &apos;64200212999&apos;
--group by 
--practice2
--acct_unit
--,service_date
--,practice_code
--,UniqueNum
--,CPT_Modifier_Code_Initial
--,allowed_initial
--,Flag_Allowed
--,Flag_Adjudicated



select distinct
--zD.Division_,
--zD.ZANSRPT_LV1,
--zD.ZANSRPT_LV2,
--zD.PRACTYPE,
--zd.practice2,
m3.*
 from #_master3 m3
--left join #z_dims zd on m3.practice2 = zd.practice2
--on m3.acct_unit = zd.acct_unit
----where m3.acct_unit = &apos;25090103999&apos;
----where uniquenum = &apos;13032981&apos;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">test_3</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">BodyData</stringProp>
            <stringProp name="RegexExtractor.regex">[\s\S]+</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">test_3 = vars.getObject(&quot;test_3&quot;)
result = new StringBuilder()

def randomRow = test_3.get(org.apache.commons.lang3.RandomUtils.nextInt(0,test_3.size()))

randomRow.each { k, v -&gt; 
    result.append(&quot;${k}&quot;).append(&quot;,&quot;)
}
result.append(System.getProperty(&quot;line.separator&quot;))

for (Object row : test_3 ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(&quot;test3.csv&quot;), result.toString(), &quot;UTF-8&quot;)</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Load Test - Analysis Server" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">120</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
          <stringProp name="filename">C:/Users/AABrar/Desktop/JMeter/apache-jmeter-5.2.1/bin/ConfigSheet.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">Username,Password</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Cube Scenario - 1 (1 Division, 1 Year)" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">C:\Users\AABrar\Desktop\Script1.ps1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Allowed</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)&lt;.Value&gt;.FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;1&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Allowed_Payer</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;1&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;2&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Bad_Debt_ADJ</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;2&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;3&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CA Provision</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;3&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;4&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Charges</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;4&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;5&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">AR_Contractual_Adj</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;5&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;6&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Inferred_Avoidable_Adjustment</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;6&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;7&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Inferred_Pat_Pymt_From_BDA</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;7&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;8&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Ins_Payments</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;8&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;9&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Other_Adj</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;9&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;10&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Pat_Pymt Count</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;10&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;11&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$2$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Patient_Payments</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;11&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;12&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Payments</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;12&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;13&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Units</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;13&quot;&gt;&lt;Value xsi:type=&quot;xsd:double&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>false</time>
                <latency>false</latency>
                <timestamp>false</timestamp>
                <success>false</success>
                <label>false</label>
                <code>false</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename">C:\Users\AABrar\Desktop\JMeter\apache-jmeter-5.2.1\bin\Eastern2019Cube.csv</stringProp>
          </ResultCollector>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">300</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Cube Scenario - 2 (1 OM Region, 1 Year)" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">C:\Users\AABrar\Desktop\Script111.ps1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Allowed</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)&lt;.Value&gt;.FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;1&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Allowed_Payer</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;1&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;2&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Bad_Debt_ADJ</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;2&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;3&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CA Provision</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;3&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;4&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Charges</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;4&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;5&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">AR_Contractual_Adj</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;5&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;6&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Inferred_Avoidable_Adjustment</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;6&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;7&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Inferred_Pat_Pymt_From_BDA</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;7&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;8&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Ins_Payments</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;8&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;9&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Other_Adj</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;9&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;10&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Pat_Pymt Count</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;10&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;11&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$2$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Patient_Payments</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;11&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;12&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Payments</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;12&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;13&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Units</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;13&quot;&gt;&lt;Value xsi:type=&quot;xsd:double&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">300</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Cube Scenario - 3 (Acc Unit)" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">C:\Users\AABrar\Desktop\Script222.ps1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Allowed</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)&lt;.Value&gt;.FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;1&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Allowed_Payer</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;1&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;2&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Bad_Debt_ADJ</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;2&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;3&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CA Provision</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;3&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;4&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Charges</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;4&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;5&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">AR_Contractual_Adj</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;5&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;6&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Inferred_Avoidable_Adjustment</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;6&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;7&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Inferred_Pat_Pymt_From_BDA</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;7&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;8&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Ins_Payments</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;8&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;9&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Other_Adj</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;9&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;10&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Pat_Pymt Count</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;10&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;11&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$2$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Patient_Payments</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;11&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;12&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Payments</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;12&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;13&quot;.</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Units</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;13&quot;&gt;&lt;Value xsi:type=&quot;xsd:double&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">300</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Cube Scenario - 4 (Unique Numbers)" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">C:\Users\AABrar\Desktop\Script333.ps1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">allowed</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)&lt;.Value&gt;.FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;1&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">300</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">300</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">300</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">counter</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script"></stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script"></stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script"></stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script"></stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script"></stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script"></stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script"></stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script"></stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script"></stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script"></stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script"></stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script"></stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script"></stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script"></stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script"></stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler -1" enabled="true">
            <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
            <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
            <stringProp name="SystemSampler.command">cmd</stringProp>
            <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">/c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">C:\Users\AABrar\Desktop\Script0.ps1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SystemSampler.directory"></stringProp>
          </SystemSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">allowed</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)&lt;.Value&gt;.FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;1&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">Not Found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">allowed_payer</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;1&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;2&quot;.</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">Not Found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">AR_Bad_Debt_Adj</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;2&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;3&quot;.</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">Not Found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">CA_Provision</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;3&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;4&quot;.</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">Not Found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">AR_Charges</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;4&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;5&quot;.</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">Not Found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">AR_Contractual_Adj</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;5&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;6&quot;.</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">Not Found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">AR_Inferred_Avoidable_Adjustment</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;6&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;7&quot;.</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">Not Found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">AR_Inferred_Pat_Pymt_From_BDA</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;7&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;8&quot;.</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">Not Found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">AR_Ins_Payments</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;8&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;9&quot;.</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">Not Found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">AR_Other_Adj</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;9&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;10&quot;.</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">Not Found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">Pat_Pymt_Count</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;10&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;11&quot;.</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">Not Found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">AR_Patient_Payments</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;11&quot;&gt;&lt;Value xsi:type=&quot;xsd:decimal&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;12&quot;.</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">Not Found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">AR_Payments</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;12&quot;&gt;&lt;Value xsi:type=&quot;xsd:long&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell..Cell CellOrdinal=&quot;13&quot;.</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">Not Found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">AR_Units</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;Cell CellOrdinal=&quot;13&quot;&gt;&lt;Value xsi:type=&quot;xsd:double&quot; xmlns:xsi=&quot;http:..www.w3.org.2001.XMLSchema-instance&quot;&gt;(.*)..Value..FmtValue.(.*)..FmtValue...Cell</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">Not Found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>false</time>
                  <latency>false</latency>
                  <timestamp>false</timestamp>
                  <success>false</success>
                  <label>false</label>
                  <code>false</code>
                  <message>false</message>
                  <threadName>false</threadName>
                  <dataType>false</dataType>
                  <encoding>false</encoding>
                  <assertions>false</assertions>
                  <subresults>false</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                </value>
              </objProp>
              <stringProp name="filename">C:\Users\AABrar\Desktop\JMeter\apache-jmeter-5.2.1\bin\Cube1.csv</stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>false</time>
                  <latency>false</latency>
                  <timestamp>false</timestamp>
                  <success>false</success>
                  <label>false</label>
                  <code>false</code>
                  <message>false</message>
                  <threadName>false</threadName>
                  <dataType>false</dataType>
                  <encoding>false</encoding>
                  <assertions>false</assertions>
                  <subresults>false</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                </value>
              </objProp>
              <stringProp name="filename">C:\Users\AABrar\Desktop\JMeter\apache-jmeter-5.2.1\bin\Cube.csv</stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="false">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">test_pool</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://azprsvratsqlsvr01d.database.windows.net;DatabaseName=reserve_rate_reporting;authentication=ActiveDirectoryPassword</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Vinayaka420$</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">Amrinder_Brar@mednax.com</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - 1" enabled="false">
          <stringProp name="dataSource">test_pool</stringProp>
          <stringProp name="query">--DECLARE 
--@Ser_Date_yr int,
--@Ser_Date_mnt int,
--@div NVARCHAR(MAX),
--@om_div NVARCHAR(MAX),
--@om_reg NVARCHAR(MAX),
--@practype NVARCHAR(MAX),
--@prac NVARCHAR(MAX),
--@acct_unit NVARCHAR(MAX);


---- Initialize the variable
--SET @Ser_Date_yr = 2019				-- see line 83
--SET @Ser_Date_mnt = 11			    -- see line 84
--SET @div = &apos;PEDIATRIX&apos;				-- see line 103,153
--SET @om_div = &apos;EASTERN&apos;				-- see line 104,154
--SET @om_reg = &apos;NORTH&apos;					-- see line 105,155
--SET @practype = &apos;PERINATOLOGY&apos;				-- see line 106,156
--SET @prac = (&apos;GREATER NASHVILLE MFM PRAC,ROCKVILLE MFM PRACTICE&apos;)		-- see line 107,157
--SET @acct_unit = (&apos;44070301999&apos;)	-- see line 108,158


DROP TABLE IF EXISTS #z_dims
	select d.*
	into #z_dims
	from (
	   select distinct d.acct_unit,
	   max(d.period_id) m_pid 
	 --  max(d.dimallattrib_key) m_did
	   from [dbo].[Charge_Financial_Details] c
	   INNER JOIN 
	   dimallattrib d 
               ON c.dimallattrib_key = d.dimallattrib_key 
	--where c.charge_number = &apos;13032981&apos;
	--where billing_details_id = &apos;93849104&apos;
				   group by d.acct_unit
			)a
			 INNER JOIN 
			 dimallattrib d 
               ON a.acct_unit = d.acct_unit 
			   and m_pid = d.period_id
		--	   and m_did  = d.dimallattrib_key 



SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #Not_Allowed_base_allowed
SELECT Rtrim(zd.practice2)    practice2, 
cfd.acct_unit,
       CASE 
         WHEN division_id = 2 
              AND visitcharges_id IS NOT NULL THEN visitcharges_id 
         WHEN division_id = 1 
              AND ar_type_id = 1 THEN Ltrim(Rtrim(Str(charge_number))) 
         WHEN division_id = 1 
              AND ar_type_id = 2 
              AND source_system_id &lt;&gt; 2 THEN Ltrim( 
         Rtrim(Str(billing_details_id))) 
         WHEN ar_type_id = 2 
              AND source_system_id = 2 THEN 
         Ltrim(Rtrim(Str(Isnull(billing_details_id, 
         0)))) 
         + Isnull(cpt_modifier_code, &apos;00&apos;) 
         + Ltrim(Rtrim((Isnull(procedure_code, 0)))) 
         + Ltrim(Rtrim((Isnull(provider_code, 0)))) 
         + CONVERT(VARCHAR, service_date, 101) 
       END  uniquenum, 
       cfd.visitcharges_id, 
       cfd.charge_number, 
       cfd.billing_details_id, 
       cfd.procedure_code, 
       service_date          Actual_Service_Date, 
       Eomonth(service_date) service_date, 
       cfd.accounting_period, 
       pm.archive_period, 
       cfd.ar_units, 
       Isnull(cfd.allowed, 0)Allowed, 
       cfd.practice_code, 
       cfd.dimallattrib_key, 
       cfd.source_system_id, 
       CFD.ar_type_id, 
       cfd.cpt_modifier_code, 
       cfd.charge_financial_detail_id, 
       cfd.payer_financial_class_key, 
       CFD.ar_charges, 
       CFD.ca_provision, 
       CFD.ar_payments, 
       CFD.ar_patient_payments, 
       CFD.ar_contractual_adj, 
       CFD.ar_bad_debt_adj, 
       CFD.ar_other_adj 
INTO   #not_allowed_base_allowed 
FROM   charge_financial_details cfd 
       INNER JOIN period_master pm 
               ON cfd.period_id = pm.period_id 
       INNER JOIN dimallattrib d 
               ON cfd.dimallattrib_key = d.dimallattrib_key 
			   Inner Join #z_dims zd
			   on d.acct_unit = zd.acct_unit
WHERE  
       Year(cfd.service_date) &gt;= &apos;2016&apos; -- keep static
  --     AND Year(cfd.service_date) &lt;= Year(Getdate()) 
         and cfd.dimallattrib_key IS NOT NULL 

	   -- FILTER OPTIONS APPLIED HERE --

	    and Year(cfd.service_date) = &apos;2019&apos; --@Ser_Date_yr
		and ar_type_id = &apos;1&apos;
  --    and month(cfd.service_date) = &apos;11&apos; --@Ser_Date_mnt

--and zD.Division_ in (&apos;PEDIATRIX&apos;)-- (SELECT Value FROM STRING_SPLIT(@Div, &apos;,&apos;))
   and zD.ZANSRPT_LV1  in (&apos;EASTERN&apos;)-- (SELECT Value FROM STRING_SPLIT(@OM_Div, &apos;,&apos;))
--	and zD.ZANSRPT_LV2 in (&apos;MOUNTAIN WEST&apos;) --(SELECT Value FROM STRING_SPLIT(@OM_Reg, &apos;,&apos;))
--	and zD.PRACTYPE in (&apos;HEARING SCREEN&apos;) -- (SELECT Value FROM STRING_SPLIT(@PRACTYPE, &apos;,&apos;))
--and zD.PRACTICE2  like  (&apos;EXCELA WESTMORELAND HS PRAC&apos;) -- (SELECT Value FROM STRING_SPLIT(@Prac, &apos;,&apos;))
--and cfd.acct_unit = &apos;25090103999&apos; -- (SELECT Value FROM STRING_SPLIT(@acct_unit, &apos;,&apos;))
--	   and CASE 
--         WHEN division_id = 2 
--              AND visitcharges_id IS NOT NULL THEN visitcharges_id 
--         WHEN division_id = 1 
--              AND ar_type_id = 1 THEN Ltrim(Rtrim(Str(charge_number))) 
--         WHEN division_id = 1 
--              AND ar_type_id = 2 
--              AND source_system_id &lt;&gt; 2 THEN Ltrim( 
--         Rtrim(Str(billing_details_id))) 
--         WHEN ar_type_id = 2 
--              AND source_system_id = 2 THEN 
--         Ltrim(Rtrim(Str(Isnull(billing_details_id, 
--         0)))) 
--         + Isnull(cpt_modifier_code, &apos;00&apos;) 
--         + Ltrim(Rtrim((Isnull(procedure_code, 0)))) 
--         + Ltrim(Rtrim((Isnull(provider_code, 0)))) 
--         + CONVERT(VARCHAR, service_date, 101) 
--      END  in (
--&apos;2019120501560555400121382B76BC&apos;
--	  ) --&apos;93849104&apos;,&apos;17506869&apos;)




-- CFD2 START
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #cfd
SELECT Rtrim(zd.practice2)    practice2, 
cfd.acct_unit,
       CASE 
         WHEN division_id = 2 
              AND visitcharges_id IS NOT NULL THEN visitcharges_id 
         WHEN division_id = 1 
              AND ar_type_id = 1 THEN Ltrim(Rtrim(Str(charge_number))) 
         WHEN division_id = 1 
              AND ar_type_id = 2 
              AND source_system_id &lt;&gt; 2 THEN Ltrim( 
         Rtrim(Str(billing_details_id))) 
         WHEN ar_type_id = 2 
              AND source_system_id = 2 THEN 
         Ltrim(Rtrim(Str(Isnull(billing_details_id, 
         0)))) 
         + Isnull(cpt_modifier_code, &apos;00&apos;) 
         + Ltrim(Rtrim((Isnull(procedure_code, 0)))) 
         + Ltrim(Rtrim((Isnull(provider_code, 0)))) 
         + CONVERT(VARCHAR, service_date, 101) 
       END  uniquenum, 
       Eomonth(service_date) service_date, 
       cfd.accounting_period, 
       pm.archive_period, 
       cfd.ar_units, 
       Isnull(cfd.allowed, 0)Allowed, 
       cfd.practice_code, 
       CFD.ar_charges,     
       CFD.ar_contractual_adj, 
       CFD.ar_bad_debt_adj,
	   cpt_modifier_code,
	   charge_financial_detail_id,
	   cfd.dimallattrib_key dimkey,
	   zd.dimallattrib_key 
INTO   #cfd 
FROM   charge_financial_details cfd 
       INNER JOIN period_master pm 
               ON cfd.period_id = pm.period_id 
       INNER JOIN dimallattrib d 
               ON cfd.dimallattrib_key = d.dimallattrib_key 
			   Inner Join #z_dims zd
			   on d.acct_unit = zd.acct_unit
WHERE  
        Year(cfd.service_date) &gt;= 2016 
        AND Year(cfd.service_date) &lt;= Year(Getdate()) 
        and cfd.dimallattrib_key IS NOT NULL 


--and zD.Division_ in (&apos;PEDIATRIX&apos;)-- (SELECT Value FROM STRING_SPLIT(@Div, &apos;,&apos;))
 --  and zD.ZANSRPT_LV1  in (&apos;EASTERN&apos;)-- (SELECT Value FROM STRING_SPLIT(@OM_Div, &apos;,&apos;))
	--and zD.ZANSRPT_LV2 in (&apos;MOUNTAIN WEST&apos;) --(SELECT Value FROM STRING_SPLIT(@OM_Reg, &apos;,&apos;))
		--and zD.PRACTYPE in (&apos;PERINATOLOGY&apos;) -- (SELECT Value FROM STRING_SPLIT(@PRACTYPE, &apos;,&apos;))
--and zD.Division_ in (&apos;PEDIATRIX&apos;)-- (SELECT Value FROM STRING_SPLIT(@Div, &apos;,&apos;))
   and zD.ZANSRPT_LV1  in (&apos;EASTERN&apos;)-- (SELECT Value FROM STRING_SPLIT(@OM_Div, &apos;,&apos;))
--	and zD.PRACTYPE in (&apos;HEARING SCREEN&apos;) -- (SELECT Value FROM STRING_SPLIT(@PRACTYPE, &apos;,&apos;))
--and zD.PRACTICE2  like  (&apos;EXCELA WESTMORELAND HS PRAC&apos;) -- (SELECT Value FROM STRING_SPLIT(@Prac, &apos;,&apos;))
--and zD.PRACTICE2  like  (&apos;DENVER CARDIOLOGY PRACTICE%&apos;) -- (SELECT Value FROM STRING_SPLIT(@Prac, &apos;,&apos;))
--and cfd.acct_unit = &apos;32040571999&apos; -- (SELECT Value FROM STRING_SPLIT(@acct_unit, &apos;,&apos;))
--	   and CASE 
--         WHEN division_id = 2 
--              AND visitcharges_id IS NOT NULL THEN visitcharges_id 
--         WHEN division_id = 1 
--              AND ar_type_id = 1 THEN Ltrim(Rtrim(Str(charge_number))) 
--         WHEN division_id = 1 
--              AND ar_type_id = 2 
--              AND source_system_id &lt;&gt; 2 THEN Ltrim( 
--         Rtrim(Str(billing_details_id))) 
--         WHEN ar_type_id = 2 
--              AND source_system_id = 2 THEN 
--         Ltrim(Rtrim(Str(Isnull(billing_details_id, 
--         0)))) 
--         + Isnull(cpt_modifier_code, &apos;00&apos;) 
--         + Ltrim(Rtrim((Isnull(procedure_code, 0)))) 
--         + Ltrim(Rtrim((Isnull(provider_code, 0)))) 
--         + CONVERT(VARCHAR, service_date, 101) 
--      END  in (
--&apos;2019120501560555400121382B76BC&apos;
--	  ) --&apos;93849104&apos;,&apos;17506869&apos;)







	   
-- CFD2 END

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #Not_Allowed_get_min_period
SELECT --cfd.practice2, 
       cfd.uniquenum, 
       cfd.practice_code, 
       cfd.cpt_modifier_code, 
     --  payer_financial_class_key, 
       Min(cfd.archive_period) archive_PERIOD
	--   zd.acct_unit	 
INTO   #not_allowed_get_min_period 
--FROM   #not_allowed_base_allowed  -- changed 1/29
FROM #cfd cfd
inner join #z_dims zd
on cfd.acct_unit = zd.acct_unit
GROUP  BY cfd.uniquenum, 
        cfd.practice_code, 
        --  cfd.practice2, 
          cfd.cpt_modifier_code
	--	  zd.acct_unit

		  

 drop table if exists #zach_getdims
	  select --a.*,	  
	  a.uniquenum,
	  a.practice_code,
      a.cpt_modifier_code,
      max(a.archive_PERIOD) archive_PERIOD,
      b.dimallattrib_key
	  into #zach_getdims
	  from #Not_Allowed_get_min_period a
	  inner join 
	  	(  select uniquenum,practice_code, max(dimallattrib_key) dimallattrib_key from #Not_Allowed_base_allowed 
	   -- where uniquenum = &apos;17430777&apos;
		group by uniquenum, practice_code)b
		on a.uniquenum = b.uniquenum
		and a.practice_code = b.practice_code
		group by 
		a.uniquenum,
	    a.practice_code,
        a.cpt_modifier_code,    
        b.dimallattrib_key

drop table if exists #zach_getdims2
select zd.*,d.practice2,d.acct_unit 
into #zach_getdims2
from #zach_getdims zd
       INNER JOIN dimallattrib d 
               ON zd.dimallattrib_key = d.dimallattrib_key 




SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
 drop table if exists #Not_Allowed_GETMIN_A

SELECT DISTINCT T.uniquenum, 
				--t.practice2,
				t.acct_unit,
                t.practice_code, 
                t.archive_period, 
                 mi.allowed                   Allowed_Initial, 
			   
                mi.cpt_modifier_code         CPT_Modifier_Code_Initial, 
                mi.payer_financial_class_key Payer_Financial_Class_Key_Initial 
INTO   #not_allowed_getmin_a 
FROM    #zach_getdims2 t 
       OUTER apply(SELECT c.payer_code,                     
                          c.contract_key, 
                          c.payer_financial_class_key, 
                          c.acct_unit, 
                          c.allowed, 
                          c.procedure_code, 
                          c.cpt_modifier_code,
						  t.dimallattrib_key							
           --        FROM   #not_allowed_base_allowed p   --changed 1/29
				   FROM #cfd p
                          INNER JOIN dbo.charge_financial_details c 
                                  ON p.charge_financial_detail_id = 
                                     c.charge_financial_detail_id 
						--Inner Join	 #Not_Allowed_get_min_period m
						--on p.uniquenum = m.uniquenum 
						--and p.practice_code = m.practice_code
						--and p.archive_period = m.archive_period
						--and p.acct_unit = m.acct_unit
                          LEFT JOIN dbo.period_master pm 
                                 ON pm.period_id = c.period_id                  
                   WHERE  c.practice_code = t.practice_code                 
                          AND p.uniquenum = t.uniquenum 
                          AND p.practice_code = t.practice_code 
                          AND p.archive_period = t.archive_period
					--	  AND p.dimkey = t.dimallattrib_key--_Min 					
                  ) mi 






SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #Not_Allowed_GETMIN_B

SELECT A.uniquenum, 
  --    a.practice2,
       A.practice_code, 
	   a.acct_unit,
       A.archive_period, 
       A.allowed_initial, 
       A.cpt_modifier_code_initial, 
       a.payer_financial_class_key_initial 
INTO   #not_allowed_getmin_b 
FROM   #not_allowed_getmin_a A 
       INNER JOIN (SELECT A.uniquenum, 
	   a.acct_unit,
                          A.practice_code, 
                          Min(A.archive_period)ARCHIVE_PERIOD 
                   FROM   #not_allowed_getmin_a A 
                   GROUP  BY A.uniquenum, 
                             A.practice_code,
							  a.acct_unit) B 
               ON A.uniquenum = B.uniquenum 
                  AND A.practice_code = B.practice_code 
                  AND A.archive_period = B.archive_period 
				  and  a.acct_unit = b.acct_unit
 


SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #Not_Allowed_base_allowed_a
SELECT a.* 
INTO   #not_allowed_base_allowed_a 
FROM   #not_allowed_base_allowed a 
       INNER JOIN #zach_getdims2 m 
               ON a.uniquenum = m.uniquenum 
                  AND a.practice_code = m.practice_code 
               --   AND a.archive_period = m.archive_period 
				  and a.acct_unit = m.acct_unit




drop table if exists #Not_Allowed_base_allowed_amount_A
SELECT A.practice2, 
a.acct_unit,
       A.uniquenum, 
       A.practice_code, 
       A.service_date, 
       a.accounting_period, 
       a.archive_period, 
       Sum(CASE 
             WHEN Round(A.ar_units, 0) &gt;= 1 THEN COALESCE(B.allowed_initial, 0) 
             WHEN Round(A.ar_units, 0) &lt;= -1 
                  AND A.source_system_id = 2 THEN COALESCE(B.allowed_initial, 
                                                  ( Isnull(a.allowed, 0) )) 
             WHEN Round(A.ar_units, 0) &lt;= -1 
                  AND A.source_system_id = 1 THEN COALESCE(B.allowed_initial, 
                                                  ( Isnull(a.allowed, 0) )) *- 1 
             ELSE 0 
           END) Allowed 
INTO   #not_allowed_base_allowed_amount_a 
FROM   
--#not_allowed_base_allowed A 
 #not_allowed_base_allowed_a A
       LEFT JOIN #not_allowed_getmin_b B 
              ON A.uniquenum = B.uniquenum 
                 AND A.practice_code = B.practice_code 
                 AND Isnull(A.cpt_modifier_code, 0) = 
                     Isnull(B.cpt_modifier_code_initial, 0) 
                 AND Isnull(A.payer_financial_class_key, 0) = 
                     Isnull(B.payer_financial_class_key_initial, 0) 
					 
GROUP  BY A.practice2, 
          A.uniquenum, 
          A.service_date, 
          A.practice_code, 
          a.accounting_period, 
          a.archive_period,
		  a.acct_unit



drop table if exists #Not_Allowed_base_allowed_amount_b
SELECT practice2, 
acct_unit,
       service_date, 
       accounting_period, 
       archive_period, 
	   uniquenum,
	   practice_code,
       Sum(z.ar_charges)         AR_Charges, 
       Sum(z.ca_provision)       CA_Provision, 
       Sum(z.ar_payments)        AR_Payments, 
       Sum(z.ar_patient_payments)AR_Patient_Payments, 
       Sum(z.ar_contractual_adj) AR_Contractual_Adj, 
       Sum(z.ar_bad_debt_adj)    AR_Bad_Debt_Adj, 
       Sum(z.ar_other_adj)       AR_Other_Adj, 
	   Sum(z.ar_units)			 AR_Units,
       Sum(z.allowed)            ALLOWED 
INTO   #not_allowed_base_allowed_amount_b 
FROM   (SELECT b.practice2, 
b.acct_unit,
               b.uniquenum, 
               b.practice_code,
               B.service_date, 
               a.accounting_period, 
               a.archive_period, 
               Sum(b.ar_charges)         AR_Charges, 
               Sum(b.ca_provision)       CA_Provision, 
               Sum(b.ar_payments)        AR_Payments, 
               Sum(b.ar_patient_payments)AR_Patient_Payments, 
               Sum(b.ar_contractual_adj) AR_Contractual_Adj, 
               Sum(b.ar_bad_debt_adj)    AR_Bad_Debt_Adj, 
               Sum(b.ar_other_adj)       AR_Other_Adj, 
			   Sum(b.ar_units) AR_Units, -- zach added
               a.allowed 
        FROM   #not_allowed_base_allowed B 
               LEFT JOIN (SELECT a.practice2, 
			   a.acct_unit,
                                 a.practice_code, 
                                 a.uniquenum, 
                                 a.archive_period, 
                                 a.accounting_period, 
                                 Sum(A.allowed)Allowed 
                          FROM   #not_allowed_base_allowed_amount_a A 
                          GROUP  BY a.practice2, 
						  a.acct_unit,
                                    a.practice_code, 
                                    a.uniquenum, 
                                    A.allowed, 
                                    a.archive_period, 
                                    a.accounting_period)A 
                      ON a.uniquenum = b.uniquenum 
                         AND a.practice_code = b.practice_code 
                         AND a.practice2 = b.practice2 
                         AND a.accounting_period = b.accounting_period 
                         AND a.archive_period = b.archive_period 
						 AND a.acct_unit = b.acct_unit
        GROUP  BY b.practice2, 
		b.acct_unit,
                  b.uniquenum, 
                  b.practice_code, 
                  a.allowed, 
                  B.service_date, 
                  a.accounting_period, 
                  a.archive_period)z 
GROUP  BY z.practice2, 
acct_unit,
          z.accounting_period, 
          z.archive_period, 
          z.service_date,
		  z.uniquenum,
		  practice_code




drop table if exists #Not_Allowed_base_allowed_amount_C
SELECT practice2, 
acct_unit,
       accounting_period, 
       archive_period, 
       service_date, 
	   uniquenum,
	   practice_code,
       Sum(ar_charges)         AR_Charges, 
       Sum(ca_provision)       CA_Provision, 
       Sum(ar_payments)        AR_Payments, 
       Sum(ar_patient_payments)AR_Patient_Payments, 
       Sum(ar_contractual_adj) AR_Contractual_Adj, 
       Sum(ar_bad_debt_adj)    AR_Bad_Debt_Adj, 
       Sum(ar_other_adj)       AR_Other_Adj,
	   Sum(ar_units)		   AR_units -- zach added
INTO   #not_allowed_base_allowed_amount_c 
FROM   #not_allowed_base_allowed_amount_b 
GROUP  BY practice2, 
          accounting_period, 
          archive_period, 
          service_date,
		  uniquenum,
		  practice_code,
		  acct_unit




drop table if exists #Not_Allowed_base_allowed_amount_D
SELECT-- b.practice2, 
b.acct_unit,
	  b.uniquenum,
	   max(service_date) service_date,
	   b.practice_code,
       Sum(ar_charges)         AR_Charges, 
       Sum(ca_provision)       CA_Provision, 
       Sum(ar_payments)        AR_Payments, 
       Sum(ar_patient_payments)AR_Patient_Payments, 
       Sum(ar_contractual_adj) AR_Contractual_Adj, 
       Sum(ar_bad_debt_adj)    AR_Bad_Debt_Adj, 
       Sum(ar_other_adj)       AR_Other_Adj  
INTO   #not_allowed_base_allowed_amount_d 
FROM   #not_allowed_base_allowed_amount_c c
 LEFT JOIN #not_allowed_getmin_b B 
              ON c.uniquenum = B.uniquenum 
                 AND c.practice_code = B.practice_code 
GROUP  BY --b.practice2,
b.uniquenum,b.practice_code,b.acct_unit--service_date






--Zach Test


SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
drop table if exists #_Allowed_base_allowed_units_a
SELECT A.uniquenum, 
       A.practice_code, 
       a.practice2 , 
	   b.acct_unit,
       a.cpt_modifier_code, 
       ar_units, 
       a.archive_period,
	   a.service_date,
	   sum(AR_Contractual_Adj) AR_Contractual_Adj,
sum(AR_Charges)  AR_Charges
INTO   #_allowed_base_allowed_units_a
FROM   #not_allowed_base_allowed a
left join #Not_Allowed_GETMIN_B b
on A.uniquenum = b.uniquenum
and a.practice_code = b.practice_code
group by
A.uniquenum, 
       A.practice_code, 
       a.practice2 , 
	   b.acct_unit,
       a.cpt_modifier_code, 
       ar_units, 
       a.archive_period,
	   a.service_date




-- for allowed
DROP TABLE IF EXISTS #_allowed_base_allowed_amount_a 
SELECT    a.practice2, 
          a.uniquenum, 
          max(a.service_date) service_date, 
		  a.practice_code,
		  b.acct_unit,	
	--	  a.cpt_modifier_code,	
          sum( 
          CASE 
                    WHEN round(a.ar_units,0) &gt;= 1 THEN COALESCE(b.allowed_initial,0) 
                    WHEN round(a.ar_units,0) &lt;= -1 
                    AND       a.source_system_id = 2 THEN COALESCE(b.allowed_initial,0) 
                    WHEN round(a.ar_units,0) &lt;= -1 
                    AND       a.source_system_id = 1 THEN COALESCE(b.allowed_initial,0)*-1 
                    ELSE 0 
          END ) allowed 
INTO      #_allowed_base_allowed_amount_a 
FROM      #not_allowed_base_allowed a 
LEFT JOIN #Not_Allowed_GETMIN_B  b 
ON        a.uniquenum = b.uniquenum 
AND       a.practice_code = b.practice_code 
--AND       isnull(a.cpt_modifier_code,0) = isnull(b.cpt_modifier_code_initial,0) 
--And a.acct_unit = b.acct_unit
GROUP BY  a.practice2,
a.practice_code, 
          a.uniquenum,     
		  b.acct_unit
	--	  a.cpt_modifier_code
	--	  ,a.service_date
		 
--select * from		 #not_allowed_base_allowed
--select * from		 #Not_Allowed_GETMIN_B 
--select * from #_allowed_base_allowed_amount_a 


DROP TABLE IF EXISTS #_allowed_base_allowed_amount_b 
SELECT  -- practice2,
practice_code,
         uniquenum,
		 acct_unit,
         sum(allowed)allowed,
		 service_date
into #_allowed_base_allowed_amount_b 
FROM     #_allowed_base_allowed_amount_a 
GROUP BY --practice2,
practice_code,uniquenum,service_date,acct_unit
ORDER BY --practice2,
practice_code,uniquenum,service_date,acct_unit



DROP TABLE IF EXISTS #_ar_units
select 
max(service_date) service_date,
uniquenum, 
practice_code,
acct_unit,
sum(ar_units) ar_units, 
sum(AR_Contractual_Adj) AR_Contractual_Adj,
sum(AR_Charges)  AR_Charges
into #_ar_units
from  
#_Allowed_base_allowed_units_a
--#not_allowed_base_allowed 
group by 
--service_date, 
uniquenum, practice_code,acct_unit
order by --service_date, 
uniquenum, practice_code,acct_unit






DROP TABLE IF EXISTS #_allowed_payer
select 
service_date,
uniquenum, 
practice_code,
acct_unit,
ar_units,
case
              when (AR_Units) &gt; 0 and AR_Contractual_Adj != 0 then (round(AR_Charges,2) - AR_Contractual_Adj)
              when (AR_Units) &lt; 0 and AR_Contractual_Adj != 0 then (round(AR_Charges,2) - AR_Contractual_Adj)*-1
              else 0
       end Allowed_Payer
into #_allowed_payer
from #_ar_units


DROP TABLE IF EXISTS #_master1
SELECT 
	--  nal.practice2,
	  nal.acct_unit,
     nal.service_date,
	   nal.practice_code,
	   nal.UniqueNum,
       Sum(allowed)allowed,
	   Sum(allowed_payer) allowed_payer,
	   Sum(ar_charges)         AR_Charges, 
       Sum(ca_provision)       CA_Provision, 
       Sum(ar_payments)        AR_Payments, 
       Sum(ar_patient_payments)AR_Patient_Payments, 
       Sum(ar_contractual_adj) AR_Contractual_Adj, 
       Sum(ar_bad_debt_adj)    AR_Bad_Debt_Adj, 
       Sum(ar_other_adj)       AR_Other_Adj,
	   sum(AR_Payments) - sum(AR_Patient_Payments) AR_Ins_Payments,
	   sum(ar_units)		 AR_Units
	   into #_master1
 FROM #Not_Allowed_base_allowed_amount_D nal
left join #_allowed_base_allowed_amount_b al
on nal.uniquenum = al.uniquenum
and nal.practice_code = al.practice_code
and nal.service_date = al.service_date
and nal.acct_unit = al.acct_unit
left join #_allowed_payer ap
on nal.uniquenum = ap.uniquenum
and nal.service_date = ap.service_date
and isnull(nal.practice_code,0) = isnull(ap.practice_code,0)
and nal.acct_unit = ap.acct_unit
group by --nal.practice2,
nal.practice_code,nal.service_date,nal.UniqueNum,nal.acct_unit
order by --nal.practice2,
nal.practice_code,nal.service_date,nal.UniqueNum,nal.acct_unit





--select * from #Not_Allowed_base_allowed --

--select * from #Not_Allowed_get_min_period --

--select * from #Not_Allowed_GETMIN_A
--where acct_unit = &apos;15120204999&apos;
--select * from #Not_Allowed_GETMIN_B 
-- where acct_unit = &apos;15120204999&apos;
--select * from #Not_Allowed_base_allowed_a -- ok
--where acct_unit = &apos;15120204999&apos;
----select * from #Not_Allowed_base_allowed_amount_A
----where acct_unit = &apos;14090101999    &apos;

----select * from #Not_Allowed_base_allowed_amount_b -- ok
----where acct_unit = &apos;14090101999    &apos;
----select * from #Not_Allowed_base_allowed_amount_C -- ok
----where acct_unit = &apos;14090101999    &apos;
----select * from #Not_Allowed_base_allowed_amount_D -- ok
----where acct_unit = &apos;14090101999    &apos;
--select * from #_Allowed_base_allowed_units_a 
------where acct_unit = &apos;14090101999    &apos;
--select * from #_allowed_base_allowed_amount_a 
------where acct_unit = &apos;14090101999    &apos;
--select * from  #_allowed_base_allowed_amount_b 
------where acct_unit = &apos;14090101999    &apos;
--select * from #_ar_units
------where acct_unit = &apos;14090101999    &apos;
--select * from #_allowed_payer
------where acct_unit = &apos;14090101999    &apos;
----select * from #_master1 


----select * from #z_dims

----select * from #_flag_allow
------where acct_unit =&apos;15120304999&apos;
----select * from #_flag_Adj 
------where acct_unit =&apos;15120304999&apos;
------select * from #_master2
----select * from #_master3
----where acct_unit =&apos;15120304999&apos;



-- Flag Allowed
DROP TABLE IF EXISTS #_flag_allow
SELECT *, 
       CASE 
         WHEN allowed_initial IS NULL THEN 2 
         ELSE 1 
       END Flag_Allowed 
INTO   #_flag_allow 
FROM   #not_allowed_getmin_b 


-- Flag_Adjudicated
DROP TABLE IF EXISTS #_flag_Adj
SELECT *, 
       CASE 
         WHEN ar_charges &gt; 0 
              AND ( ar_contractual_adj &gt; 0 
                     OR ar_bad_debt_adj &gt; 0 ) THEN 1 
         ELSE 2 
       END Flag_Adjudicated 
INTO   #_flag_adj 
FROM   #not_allowed_base_allowed_amount_d 




DROP TABLE IF EXISTS #_master2
select  distinct
 m1.*,isnull(CPT_Modifier_Code_Initial,0)CPT_Modifier_Code_Initial,allowed_initial,Flag_Allowed, Flag_Adjudicated 
into #_master2
from
#_master1 m1
left join #_flag_allow fal
on m1.uniquenum = fal.uniquenum 
and m1.practice_code = fal.practice_code
and  m1.acct_unit =  fal.acct_unit
left join #_flag_Adj fad
on m1.uniquenum = fad.uniquenum 
and m1.service_date = fad.service_date
and m1.practice_code = fad.practice_code
and  m1.acct_unit =  fad.acct_unit


-- Final Output

DROP TABLE IF EXISTS #_master3
Select
--practice2,
--acct_unit,
----service_date,
--practice_code,
--UniqueNum,
sum( allowed ) as allowed,
sum( allowed_payer ) as allowed_payer,
sum( AR_Bad_Debt_Adj ) as AR_Bad_Debt_Adj,
sum( CA_Provision ) as CA_Provision,
sum( AR_Charges ) as AR_Charges,
sum( AR_Contractual_Adj ) as AR_Contractual_Adj,
sum(case                
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and Allowed_Payer = 0 and Allowed != 0 then iif(Allowed - AR_Patient_Payments &lt; 0,0,Allowed - AR_Patient_Payments)
else 0
end) AR_Inferred_Avoidable_Adjustment,
sum(case
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and AR_Patient_Payments = 0 and Allowed_Payer = 0 then 0
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt; 0 and Allowed_Payer = 0 then AR_Patient_Payments
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt;= 0 and Allowed_Payer &gt; Allowed then iif((Allowed_Payer - AR_Ins_Payments) &lt; 0,0,(Allowed_Payer - AR_Ins_Payments))
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt;= 0 and Allowed_Payer &lt;= Allowed then iif((Allowed - AR_Ins_Payments) &lt; 0,0,(Allowed - AR_Ins_Payments))
	when Flag_Allowed = 1 and Flag_Adjudicated = 2 and AR_Patient_Payments &gt; 0 then AR_Patient_Payments
	when Flag_Allowed = 1 and AR_Patient_Payments &lt; 0 then 0
	when Flag_Allowed = 2 then 0
		else round(AR_Patient_Payments,2)
end) AR_Inferred_Pat_Pymt_From_BDA,
sum( AR_Ins_Payments ) as AR_Ins_Payments,
sum( AR_Other_Adj ) as AR_Other_Adj,
sum(case when 
(case
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and AR_Patient_Payments = 0 and Allowed_Payer = 0 then 0
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt; 0 and Allowed_Payer = 0 then AR_Patient_Payments
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt;= 0 and Allowed_Payer &gt; Allowed then iif((Allowed_Payer - AR_Ins_Payments) &lt; 0,0,(Allowed_Payer - AR_Ins_Payments))
	when Flag_Allowed = 1 and Flag_Adjudicated = 1 and CPT_Modifier_Code_Initial != &apos;NC&apos; and AR_Patient_Payments &gt;= 0 and Allowed_Payer &lt;= Allowed then iif((Allowed - AR_Ins_Payments) &lt; 0,0,(Allowed - AR_Ins_Payments))
	when Flag_Allowed = 1 and Flag_Adjudicated = 2 and AR_Patient_Payments &gt; 0 then AR_Patient_Payments
	when Flag_Allowed = 1 and AR_Patient_Payments &lt; 0 then 0
	when Flag_Allowed = 2 then 0
		else round(AR_Patient_Payments,2)
end)
 &gt; 0 then 1 else 0 end) Pat_Pymt_Count,
sum( AR_Patient_Payments ) as AR_Patient_Payments,
 sum( AR_Payments ) as AR_Payments,
 sum( AR_Units ) as AR_Units
--,CPT_Modifier_Code_Initial,
----allowed_initial,
--Flag_Allowed,
--Flag_Adjudicated
 into #_master3
FROM  #_master2
--where acct_unit = &apos;64200212999&apos;
--group by 
--practice2
--acct_unit
--,service_date
--,practice_code
--,UniqueNum
--,CPT_Modifier_Code_Initial
--,allowed_initial
--,Flag_Allowed
--,Flag_Adjudicated



select distinct
--zD.Division_,
--zD.ZANSRPT_LV1,
--zD.ZANSRPT_LV2,
--zD.PRACTYPE,
--zd.practice2,
m3.*
 from #_master3 m3
--left join #z_dims zd on m3.practice2 = zd.practice2
--on m3.acct_unit = zd.acct_unit
----where m3.acct_unit = &apos;25090103999&apos;
----where uniquenum = &apos;13032981&apos;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">test_3</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">BodyData</stringProp>
            <stringProp name="RegexExtractor.regex">[\s\S]+</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">test_3 = vars.getObject(&quot;test_3&quot;)
result = new StringBuilder()

def randomRow = test_3.get(org.apache.commons.lang3.RandomUtils.nextInt(0,test_3.size()))

randomRow.each { k, v -&gt; 
    result.append(&quot;${k}&quot;).append(&quot;,&quot;)
}
result.append(System.getProperty(&quot;line.separator&quot;))

for (Object row : test_3 ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(&quot;Eastern.csv&quot;), result.toString(), &quot;UTF-8&quot;)</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="false">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="graphiteMetricsSender" elementType="Argument">
                <stringProp name="Argument.name">graphiteMetricsSender</stringProp>
                <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.graphite.TextGraphiteMetricsSender</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="graphiteHost" elementType="Argument">
                <stringProp name="Argument.name">graphiteHost</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="graphitePort" elementType="Argument">
                <stringProp name="Argument.name">graphitePort</stringProp>
                <stringProp name="Argument.value">2003</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="rootMetricsPrefix" elementType="Argument">
                <stringProp name="Argument.name">rootMetricsPrefix</stringProp>
                <stringProp name="Argument.value">jmeter.</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="summaryOnly" elementType="Argument">
                <stringProp name="Argument.name">summaryOnly</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="samplersList" elementType="Argument">
                <stringProp name="Argument.name">samplersList</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="percentiles" elementType="Argument">
                <stringProp name="Argument.name">percentiles</stringProp>
                <stringProp name="Argument.value">90;95;99</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">org.apache.jmeter.visualizers.backend.graphite.GraphiteBackendListenerClient</stringProp>
        </BackendListener>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Load Test - SQL Server" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">500000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">test_pool1</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://cofindwdb01t;DatabaseName=FinCon_DM;integratedSecurity=true;authenticationScheme=JavaKerberos</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Vinayaka420%</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">100000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">AABrar</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL - Information Schema Tables" enabled="true">
          <stringProp name="dataSource">test_pool1</stringProp>
          <stringProp name="query">/*select *
from INFORMATION_SCHEMA.COLUMNS
where TABLE_NAME=&apos;[FinCon_DM].[source_tables].[Employees]&apos;*/

select * from INFORMATION_SCHEMA.TABLES

/*SELECT TABLE_SCHEMA ,
       TABLE_NAME ,
       COLUMN_NAME ,
       ORDINAL_POSITION ,
       COLUMN_DEFAULT ,
       DATA_TYPE ,
       CHARACTER_MAXIMUM_LENGTH ,
       NUMERIC_PRECISION ,
       NUMERIC_PRECISION_RADIX ,
       NUMERIC_SCALE ,
       DATETIME_PRECISION
FROM   INFORMATION_SCHEMA.COLUMNS
where TABLE_SCHEMA in (&apos;dbo&apos;,&apos;meta&apos;)
and table_name in (select name from sys.tables)
order by TABLE_SCHEMA ,       TABLE_NAME ,ORDINAL_POSITION */</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">test_2</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">BodyData</stringProp>
            <stringProp name="RegexExtractor.regex">[\s\S]+</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>false</time>
                <latency>false</latency>
                <timestamp>false</timestamp>
                <success>false</success>
                <label>false</label>
                <code>false</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>true</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">500000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">test_pool2</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://cofindwdb01t;DatabaseName=FinCon_DM;integratedSecurity=true;authenticationScheme=JavaKerberos</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Vinayaka420%</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">100000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">AABrar</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL - Datamart - PAU Components" enabled="true">
          <stringProp name="dataSource">test_pool2</stringProp>
          <stringProp name="query">/****** Script for SelectTopNRows command from SSMS  ******/
SELECT TOP (1000) [ACCT_UNIT]
      ,[STATE]
      ,[GL_SPECIALITY]
  FROM [acct_datamart].[dbo].[dimPAU_Components]</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">test_2</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">BodyData</stringProp>
            <stringProp name="RegexExtractor.regex">[\s\S]+</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>false</time>
                <latency>false</latency>
                <timestamp>false</timestamp>
                <success>false</success>
                <label>false</label>
                <code>false</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>true</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">500000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">test_pool3</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://cofindwdb01t;DatabaseName=FinCon_DM;integratedSecurity=true;authenticationScheme=JavaKerberos</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Vinayaka420%</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">100000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">AABrar</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL - Datamart - DimAllAttributes" enabled="true">
          <stringProp name="dataSource">test_pool3</stringProp>
          <stringProp name="query">/****** Script for SelectTopNRows command from SSMS  ******/
SELECT TOP (1000) [COMPANY]
      ,[ACCT_UNIT]
      ,[DESC1]
      ,[LEVEL2]
      ,[ACQDATE]
      ,[LEVEL3]
      ,[HOSPCODE]
      ,[LEVEL4]
      ,[MEDICDIR]
      ,[LEVEL5]
      ,[PMGCOMPANY]
      ,[LEVEL6]
      ,[PRACTICE]
      ,[LEVEL7]
      ,[PRACTYPE]
      ,[LEVEL8]
      ,[REGION]
      ,[LEVEL9]
      ,[RPTTYPE]
      ,[LEVEL10]
      ,[STARTDATE]
      ,[LEVEL11]
      ,[STATE]
      ,[LEVEL12]
      ,[TAXENTITY]
      ,[LEVEL13]
      ,[TAXID]
      ,[LEVEL14]
      ,[GARPTGROUP1]
      ,[LEVEL15]
      ,[GARPTGROUP2]
      ,[LEVEL16]
      ,[GARPTGROUP3]
      ,[LEVEL17]
      ,[PRACTICE2]
      ,[LEVEL18]
      ,[REGION2]
      ,[LEVEL19]
      ,[ZANSRPT_LV1]
      ,[LEVEL20]
      ,[ZANSRPT_LV2]
      ,[LEVEL21]
      ,[ZANSRPT_LV3]
      ,[LEVEL22]
      ,[ZANSRPT_LV4]
      ,[LEVEL23]
      ,[ZGAEXPDEP_L1]
      ,[LEVEL24]
      ,[ZGAEXPDEP_L2]
      ,[LEVEL25]
      ,[ZGAEXPDEP_L3]
      ,[LEVEL26]
      ,[ZGAEXPDEP_S1]
      ,[LEVEL27]
      ,[ZGAEXPDEP_S2]
      ,[LEVEL28]
      ,[ZGAEXPDEP_S3]
      ,[LEVEL29]
      ,[ZGAEXPREG_L1]
      ,[LEVEL30]
      ,[ZGAEXPREG_S1]
      ,[LEVEL31]
      ,[ZGAREPORT_YN]
      ,[LEVEL32]
      ,[INACTIVEDATE]
      ,[LEVEL33]
      ,[DIVISION_]
      ,[LEVEL34]
      ,[SVCLINEGRP1]
      ,[LEVEL35]
      ,[PROVIDRGRPID]
      ,[LEVEL36]
      ,[DIROPERATION]
      ,[PAU_DESC]
      ,[LEVEL37]
      ,[SAMESTOREUSE]
      ,[RegionType]
      ,[NPDEPNAME]
      ,[NPDEPTYPE]
      ,[OGISTARTDATE]
      ,[STATUS]
      ,[TYPE]
      ,[PERSON_RESPONSIBLE]
      ,[LEVEL38]
      ,[CEP]
      ,[LEVEL39]
      ,[HSSTANALNE]
      ,[LEVEL40]
      ,[HSSTANALNEPR]
      ,[LEVEL41]
      ,[LVL_1_VALUE]
      ,[LEVEL42]
      ,[LVL_2_VALUE]
      ,[LEVEL43]
      ,[LVL_3_VALUE]
      ,[LEVEL44]
      ,[LVL_4_VALUE]
      ,[LEVEL45]
      ,[OGISALESPERS]
      ,[LEVEL46]
      ,[OGITRACKING]
      ,[LEVEL47]
      ,[OGITYPE]
      ,[LEVEL48]
      ,[OMENTITY]
      ,[LEVEL49]
      ,[PRACTYPEGRP]
      ,[LEVEL50]
      ,[RP]
      ,[LEVEL51]
      ,[RVP]
      ,[LEVEL52]
      ,[SWIFT]
      ,[SECURITYGRP1]
      ,[SECURITYGRP2]
      ,[SECURITYGRP3]
  FROM [acct_datamart].[dbo].[dimAllAttrib]</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">test_2</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">BodyData</stringProp>
            <stringProp name="RegexExtractor.regex">[\s\S]+</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>false</time>
                <latency>false</latency>
                <timestamp>false</timestamp>
                <success>false</success>
                <label>false</label>
                <code>false</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>true</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">500000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">test_pool4</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://cofindwdb01t;DatabaseName=FinCon_DM;integratedSecurity=true;authenticationScheme=JavaKerberos</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Vinayaka420%</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">100000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">AABrar</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL - Datamart - Current Period" enabled="true">
          <stringProp name="dataSource">test_pool4</stringProp>
          <stringProp name="query">/****** Script for SelectTopNRows command from SSMS  ******/
SELECT TOP (1000) [Cur_Year]
      ,[Cur_Per]
      ,[Cur_Date]
  FROM [acct_datamart].[dbo].[Current_Period]</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">test_2</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">BodyData</stringProp>
            <stringProp name="RegexExtractor.regex">[\s\S]+</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>false</time>
                <latency>false</latency>
                <timestamp>false</timestamp>
                <success>false</success>
                <label>false</label>
                <code>false</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>true</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">500000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">test_pool5</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://cofindwdb01t;DatabaseName=FinCon_DM;integratedSecurity=true;authenticationScheme=JavaKerberos</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Vinayaka420%</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">100000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">AABrar</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL - Datamart - Business Days" enabled="true">
          <stringProp name="dataSource">test_pool5</stringProp>
          <stringProp name="query">/****** Script for SelectTopNRows command from SSMS  ******/
SELECT TOP (1000) [Accounting_Period]
      ,[Business_Days]
  FROM [acct_datamart].[dbo].[Business_Days_]</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">test_2</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">BodyData</stringProp>
            <stringProp name="RegexExtractor.regex">[\s\S]+</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>false</time>
                <latency>false</latency>
                <timestamp>false</timestamp>
                <success>false</success>
                <label>false</label>
                <code>false</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>true</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Load Test - Azure" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">test_pool</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://azprsvratsqlsvr01t.database.windows.net;DatabaseName=reserve_rate_reporting;authentication=ActiveDirectoryPassword</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Vinayaka420%</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">Amrinder_Brar@mednax.com</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Azure - Charge Financial Details" enabled="true">
          <stringProp name="dataSource">test_pool</stringProp>
          <stringProp name="query">SELECT period_id, 
       Count(*)                  records, 
       Sum(charges)              Charges, 
       Sum(payments)             Payments, 
       Sum(refunds)              Refunds, 
       Sum(adjustments)          Adjustments, 
       Sum(balance)              Balance, 
       Sum(encounters)           Encounters, 
       Sum(quantity)             Quantity, 
       Sum(cases)                Cases, 
       Sum(allowed)              Allowed, 
       --Allowed_Base_Units, Total_Allowed_Units, 
       Sum(base_units)           Base_Units, 
       Sum(units)                Units, 
       Sum(ar_beginning_balance) AR_Beginning_Balance, 
       Sum(ar_charges)           AR_Charges, 
       Sum(ar_payments)          AR_Payments, 
       Sum(ar_refunds)           AR_Refunds, 
       Sum(ar_adjustments)       AR_Adjustments, 
       Sum(ar_ending_balance)    AR_Ending_Balance, 
       Sum(ca_beginning_balance) CA_Beginning_Balance, 
       Sum(ca_provision)         CA_Provision, 
       Sum(ca_adjustments)       CA_Adjustments, 
       Sum(ca_ending_balance)    CA_Ending_Balance, 
       Sum(contractual_adj_calc) Contractual_Adj_Calc, 
       Sum(bad_debt_adj_calc)    Bad_Debt_Adj_Calc, 
       Sum(other_adj_calc)       Other_Adj_Calc, 
       Sum(ar_contractual_adj)   ar_contractual_adj, 
       Sum(ar_bad_debt_adj)      ar_bad_debt_adj, 
       Sum(ar_other_adj)         ar_other_adj, 
       Sum(patient_payments)     patient_payments, 
       Sum(contractual_adj)      contractual_adj, 
       Sum(bad_debt_adj)         bad_debt_adj, 
       Sum(other_adj)            other_adj,
    Sum(total_units)          Total_Units,
         ( Sum(contractual_adj) + Sum(bad_debt_adj) 
         + Sum(other_adj) )      TOTAL_Adj
FROM   dbo.charge_financial_details 
WHERE  division_id = 1
GROUP  BY period_id 
ORDER  BY period_id </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">test_5</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">BodyData</stringProp>
            <stringProp name="RegexExtractor.regex">[\s\S]+</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">test_pool1</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://azprsvratsqlsvr01t.database.windows.net;DatabaseName=reserve_rate_reporting;authentication=ActiveDirectoryPassword</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Vinayaka420%</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">Amrinder_Brar@mednax.com</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Azure - DimPeriods" enabled="true">
          <stringProp name="dataSource">test_pool1</stringProp>
          <stringProp name="query">/****** Script for SelectTopNRows command from SSMS  ******/
SELECT TOP (1000) [fyyear]
      ,[qtr]
      ,[qtr_name]
      ,[period]
      ,[period_name]
      ,[first_of_month]
      ,[month_end]
      ,[first_of_month_prior3]
      ,[first_of_month_prior6]
      ,[month_end_prior6]
      ,[first_of_month_prior12]
      ,[days_in_month]
      ,[periodkey]
      ,[Days_In_Last_3_Months]
  FROM [dbo].[dimPeriods]</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">test_5</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">BodyData</stringProp>
            <stringProp name="RegexExtractor.regex">[\s\S]+</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">test_pool2</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://azprsvratsqlsvr01t.database.windows.net;DatabaseName=reserve_rate_reporting;authentication=ActiveDirectoryPassword</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Vinayaka420%</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">Amrinder_Brar@mednax.com</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Azure - CPT Modifiers" enabled="true">
          <stringProp name="dataSource">test_pool2</stringProp>
          <stringProp name="query">/****** Script for SelectTopNRows command from SSMS  ******/
SELECT TOP (1000) [CPT_Modifier_Code]
      ,[CPT_Modifier_Description]
      ,[Date_of_Last_Update]
      ,[Active_Record_Flag]
      ,[Update_Status_Flag]
      ,[Last_Updated_By]
      ,[CPT_Modifier_ID]
  FROM [dbo].[CPT_Modifiers]</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">test_5</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">BodyData</stringProp>
            <stringProp name="RegexExtractor.regex">[\s\S]+</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">test_pool3</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://azprsvratsqlsvr01t.database.windows.net;DatabaseName=reserve_rate_reporting;authentication=ActiveDirectoryPassword</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Vinayaka420%</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">Amrinder_Brar@mednax.com</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Azure - Aging Codes" enabled="true">
          <stringProp name="dataSource">test_pool3</stringProp>
          <stringProp name="query">/****** Script for SelectTopNRows command from SSMS  ******/
SELECT TOP (1000) [Aging_Key]
      ,[Period_ID]
      ,[Aging_Code]
      ,[Days_From]
      ,[Days_To]
  FROM [dbo].[Aging_Codes]</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">test_5</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">BodyData</stringProp>
            <stringProp name="RegexExtractor.regex">[\s\S]+</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">test_pool4</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://azprsvratsqlsvr01t.database.windows.net;DatabaseName=reserve_rate_reporting;authentication=ActiveDirectoryPassword</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Vinayaka420%</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">Amrinder_Brar@mednax.com</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Azure - Allowance Tiers" enabled="true">
          <stringProp name="dataSource">test_pool4</stringProp>
          <stringProp name="query">/****** Script for SelectTopNRows command from SSMS  ******/
SELECT TOP (1000) [Allow_Tier_ID]
      ,[Allow_Tier]
      ,[Allow_Tier_Description]
      ,[Created_By]
      ,[Created_Date]
      ,[Last_Updated_By]
      ,[Last_Updated_Date]
  FROM [dbo].[Allowance_Tiers]</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">test_5</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">BodyData</stringProp>
            <stringProp name="RegexExtractor.regex">[\s\S]+</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
